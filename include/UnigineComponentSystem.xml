<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.ComponentBase.getClassName">
			<summary>
			Returns the name of the class associated with the component. The name is generated automatically in the COMPONENT macro.
			</summary>  
			<returns>Component class name.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.getComponentDescription">
			<summary>
			Returns the component description. The description can be specified in the COMPONENT_DESCRIPTION macro.
			</summary>  
			<returns>Component description.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.getPropertyName">
			<summary>
			Returns the name of the property associated with the component. The name is automatically generated in the COMPONENT_DEFINE macro: in this case, the propert name will be same as the class name. To specify a custom name, use the COMPONENT and PROP_NAME macros instead.
			</summary>  
			<returns>Property name.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.getParentPropertyName">
			<summary>
			Returns the name of the parent property from which the current property associated with the component is inherited. The name is automatically generated in the COMPONENT_DEFINE macro.
			</summary>  
			<returns>Parent property name.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.setEnabled(int)">
			<summary>
			Enables or disables the component.
			</summary> 
			<param name="enable"> Use 1 to enable the component, 0 - to disable it. </param> 
		</member>
		<member name="M:Unigine.ComponentBase.isEnabled">
			<summary>
			Returns a value indicating whether the component is enabled.
			</summary>  
			<returns>1 if the component is enabled; otherwise 0.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.isInitialized">
			<summary>
			Returns a value indicating whether the component is initialized (its init() method was already called).
			</summary>  
			<returns>1 if the component is initialized; otherwise 0.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.isAutoSaveProperty">
			<summary>
			Returns a value indicating whether the property file associated with the component should be automatically generated each time C++ Component System is initialized or createPropertyFiles() method is called.					By default all components have their property files re-generated automatically, this behavior might not be suitable, when you modify properties manually after creation. In this case you can add the following macro to the header file containing your component's declaration:
			</summary>  
			<returns>1 if the property file associated with the component should be automatically generated each time C++ Component System is initialized or createPropertyFiles() method is called; otherwise 0.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.getNode">
			<summary>
			Returns the node, to which the component is attached.
			</summary>  
			<returns>Node, to which the component is attached.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.getProperty">
			<summary>
			Returns the property associated with the component.
			</summary>  
			<returns>Property associated with the component.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.getPropertyNum">
			<summary>
			Returns the number of the property associated with the component.
			</summary>  
			<returns>Number of the property in the list of properties assigned to the node.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.addComponent(NodePtr)">
			<summary>
			Adds the component to the specified node. This method is equivalent to ComponentSystem::addComponent() method.
			</summary> 
			<param name="node"> Node, to which the component is to be added. </param> 
			<returns>Pointer to the new added component, if it was successfully added to the specified node; otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.removeComponent(NodePtr)">
			<summary>
			Removes the component from the specified node. This method is equivalent to ComponentSystem::removeComponent() method.
			</summary> 
			<param name="node"> Node, from which the component is to be removed. </param> 
			<returns>1 if the component was successfully removed from the specified node; otherwise 0.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.getComponent(NodePtr,bool)">
			<summary>
			Returns the first component of the specified type associated with the specified node. This method is equivalent to ComponentSystem::getComponent() method.
			</summary> 
			<param name="node"> Node, for which the component of this type is to be found. </param>
			<param name="enabled_only"> Enabled flag: true to get enabled component only, false to get component in any case. </param> 
			<returns>Pointer to the component if it exists; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.getComponents(NodePtr,Unigine.Vector{C*,int,Unigine.VectorAllocator})">
			<summary>
			Returns all components of this type assigned to the specified node and puts them to the specified buffer vector. This method is equivalent to ComponentSystem::getComponents() method.
			</summary> 
			<param name="node"> Node, whose components are to be retrieved. </param>
			<param name="components"> Buffer vector, to which all found components of this type will be put. </param> 
		</member>
		<member name="M:Unigine.ComponentBase.getComponentInChildren(NodePtr,bool)">
			<summary>
			Returns the first component of this type found among all the children of the specified node (including the node itself). This method searches for the component in the following order:											node itself						node reference						node's children						children of node's children					This method is equivalent to					ComponentSystem::getComponentInChildren() method.
			</summary> 
			<param name="node"> Node, whose hierarchy is to be checked for the components of this type. </param>
			<param name="enabled_only"> Enabled flag: true to get enabled component only, false to get component in any case. </param> 
			<returns>Pointer to the component if it exists; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.getComponentsInChildren(NodePtr,Unigine.Vector{C*,int,Unigine.VectorAllocator})">
			<summary>
			Searches for all components of this type down the hierarchy of the specified node and puts them to the given buffer vector. This method is equivalent to ComponentSystem::getComponentsInChildren() method.
			</summary> 
			<param name="node"> Node, whose hierarchy is to be checked for the components of this type. </param>
			<param name="components"> Buffer vector, to which all found components of this type will be put. </param> 
		</member>
		<member name="M:Unigine.ComponentBase.getComponentInParent(NodePtr,bool)">
			<summary>
			Returns the first component of this type found among all predecessors and posessors of the specified node. This method is equivalent to ComponentSystem::getComponentInParent() method.
			</summary> 
			<param name="node"> Node, whose hierarchy is to be checked for the components of this type. </param>
			<param name="enabled_only"> Enabled flag: true to get enabled component only, false to get component in any case. </param> 
			<returns>Pointer to the component if it exists; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.ComponentBase.getComponentsInParent(NodePtr,Unigine.Vector{C*,int,Unigine.VectorAllocator})">
			<summary>
			Searches for all components of this type up the hierarchy of the specified node and puts them to the given buffer vector. This method is equivalent to ComponentSystem::getComponentsInParent() method.
			</summary> 
			<param name="node"> Node, whose hierarchy is to be checked for the components of this type. </param>
			<param name="components"> Buffer vector, to which all found components of this type will be put. </param> 
		</member>
		<member name="M:Unigine.ComponentBase.setDestroyCallback(Unigine.CallbackBase)">
			<summary>
			Sets a callback function to be called before destroying the component. This function can be used to implement certain actions to be performed when a component is destroyed.
			</summary> 
			<param name="func"> Callback function. </param> 
		</member>
		<member name="M:Unigine.ComponentBase.clearDestroyCallback">
			<summary>
			Removes a destroy callback function previously set by the setDestroyCallback() method. This callback function can be used to implement certain actions to be performed when a component is destroyed.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentBase.save_property(char)">
			<summary>
			Saves all parameters of the property associated with the component to the specified prop-file.
			</summary> 
			<param name="name"> Name of the target .prop-file. </param> 
		</member>
		<member name="M:Unigine.ComponentBase.on_enable">
			<summary>
			This method is called by the Engine, when the component becomes enabled and active (both, node and property are enabled). You can override this method to implement some specific actions to be performed each time, when the component becomes enabled and active.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentBase.on_disable">
			<summary>
			This method is called by the Engine, when the component becomes disabled (both, node and property are disabled). You can override this method to implement some specific actions to be performed each time, when the component becomes disabled and inactive.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentBase.init">
			<summary>
			Engine calls this function on world initialization. Put you code for resources initialization during the world start here.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentBase.update">
			<summary>
			Engine calls this function before updating each render frame. You can specify here all logic-related functions you want to be called every frame while your application executes.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentBase.postUpdate">
			<summary>
			Engine calls this function after updating each render frame. You can correct behavior after the state of the node has been updated.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentBase.updatePhysics">
			<summary>
			Engine calls this function before updating each physics frame. Here you can control physics, perform continuous physics-related operations (pushing a car forward depending on current motor's RPM, simulating a wind blowing constantly, perform immediate collision response, etc.). The engine calls updatePhysics() with the fixed rate (60 times per second by default) regardless of the fps number. Similar to the world script's updatePhysics() function.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentBase.shutdown">
			<summary>
			Engine calls this function on world shutdown. Here you can clean up resources that were created during world script execution to avoid memory leaks.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentBase.is_equals(Unigine.Ptr{Unigine.Xml},Unigine.Ptr{Unigine.Xml})">
			<summary>
			Returns a value indicating whether the two xml nodes are actually equal (have the same set of parameters with the same values and the same hierarchy).
			</summary> 
			<param name="xml1"> First xml node. </param>
			<param name="xml2"> Second xml node. </param> 
			<returns>1 if the two specified xml nodes are equal; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ComponentSystem.get">
			<summary>
			Returns a pointer to C++ Component System. This pointer must be obtained to access functions of C++ Component System:
			</summary>  
		</member>
		<member name="M:Unigine.ComponentSystem.initialize">
			<summary>
			Performs initialization of C++ Component System, registration of all components and creation of all necessary property files.																		This method should me called in the AppSystemLogic::init() method.							If a property file for any component does not exist, it will be created automatically.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentSystem.addInitCallback(Unigine.CallbackBase)">
			<summary>
			Adds a callback which is called during ComponentSystem initialization.
			</summary> 
			<param name="callback"> Callback pointer. </param> 
		</member>
		<member name="M:Unigine.ComponentSystem.setEnabled(bool)">
			<summary>
			Enables or disables the C++ Component System. You can use it for performance debugging: enable or disable update(), postUpdate(), updatePhysics(), swap(), updateSync(), updateAsync() for all components.
			</summary> 
			<param name="enabled"> true to enable the C++ Component System, false to disable it. </param> 
		</member>
		<member name="M:Unigine.ComponentSystem.isEnabled">
			<summary>
			Returns a value indicating whether the C++ Component System is enabled. You can use it for performance debugging: check if update(), postUpdate(), updatePhysics(), swap(), updateSync(), updateAsync() are enabled/disabled for all components.
			</summary>  
			<returns>true if the C++ Component System is enabled, false if it is disabled.</returns>
		</member>
		<member name="M:Unigine.ComponentSystem.getNumComponents">
			<summary>
			Returns the total number of components registered in C++ Component System.					This method is very slow and should not be used often.
			</summary>  
			<returns>Total number of registered components.</returns>
		</member>
		<member name="M:Unigine.ComponentSystem.getNumNodesWithComponents">
			<summary>
			Returns the total number of nodes with components assigned.
			</summary>  
			<returns>Total number of nodes with components assigned.</returns>
		</member>
		<member name="M:Unigine.ComponentSystem.createPropertyFile">
			<summary>
			Creates a property file for a registered component associated with the property with a given name.Parameters of each component are stored in a separate *.prop file. If this property file does not exist, it will be created in the data/ComponentSystem folder with a name obtained by the component's getPropertyName() method.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentSystem.initializeComponents(NodePtr)">
			<summary>
			Forces initialization of components associated with the given node in the currrent frame (it doesn't wait for the WorldLogic::update() callback execution).
			</summary> 
			<param name="node"> Node for which the components need to be initialized. </param> 
		</member>
		<member name="M:Unigine.ComponentSystem.createPropertyFile(char)">
			<summary>
			Creates a property file for a registered component associated with the property with a given name. Parameters of each component are stored in a separate *.prop file. If this property file does not exist, it will be created in the data/ComponentSystem folder.
			</summary> 
			<param name="name"> Name of the property associated with the component. </param> 
		</member>
		<member name="M:Unigine.ComponentSystem.createPropertyFiles">
			<summary>
			Creates property files for all registered components. Parameters of each component are stored in a separate *.prop file. If these property files do not exist, they will be created in the data/ComponentSystem folder.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentSystem.refreshProperty(char)">
			<summary>
			Rewrites the *.prop file for the specified property and reloads it in the Property Manager.
			</summary> 
			<param name="name"> Property name. </param> 
		</member>
		<member name="M:Unigine.ComponentSystem.refreshProperty">
			<summary>
			Rewrites the property file for the specified component and reloads it in the Property Manager.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentSystem.registerComponent">
			<summary>
			Registers a user component derived from the ComponentBase class.																		Components must be registered in the AppSystemLogic::init() method.							If a property file for the component does not exist, it will be created automatically.							It is recommended to use the REGISTER_COMPONENT macro instead.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentSystem.unregisterComponent">
			<summary>
			Deletes a user component derived from the ComponentBase class.
			</summary>  
		</member>
		<member name="M:Unigine.ComponentSystem.addComponent(NodePtr)">
			<summary>
			Adds the component to the specified node.
			</summary> 
			<param name="node"> Node, to which the component is to be added. </param> 
			<returns>Pointer to the new added component, if it was successfully added to the specified node; otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.ComponentSystem.getComponent(NodePtr,bool)">
			<summary>
			Returns the first component of the specified type associated with the given node.
			</summary> 
			<param name="node"> Node, for which the component of the specified type is to be found. </param>
			<param name="enabled_only"> Enabled flag: true to get enabled component only, false to get component in any case. </param> 
			<returns>Pointer to the component if any; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.ComponentSystem.getComponents(NodePtr,Unigine.Vector{C*,int,Unigine.VectorAllocator},int)">
			<summary>
			Searches for all components of the specified type assigned to the specified node and puts them to the given buffer vector.
			</summary> 
			<param name="node"> Node, for which the components of the specified type are to be found. </param>
			<param name="out_components"> Buffer vector, to which all found components of the specified type will be added. </param>
			<param name="clear_vector"> Flag indicating whether the buffer vector is to be cleared before adding the found components to it or not. Use 1 to clear the vector, 0 - to append new found components to the end of the vector. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.ComponentSystem.getComponentInChildren(NodePtr,bool)">
			<summary>
			Returns the first component of the specified type found among all the children of the specified node (including the node itself). This method searches for the component in the following order:											node itself						node reference						node's children						children of node's children
			</summary> 
			<param name="node"> Node, whose hierarchy is to be checked for the specified type of component. </param>
			<param name="enabled_only"> Enabled flag: true to get enabled component only, false to get component in any case. </param> 
			<returns>Pointer to the component if any; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.ComponentSystem.getComponentsInChildren(NodePtr,Unigine.Vector{C*,int,Unigine.VectorAllocator},int)">
			<summary>
			Searches for all components of the specified type down the hierarchy of the specified node and puts them to the given buffer vector.
			</summary> 
			<param name="node"> Node, whose hierarchy is to be checked. </param>
			<param name="out_components"> Buffer vector, to which all found components of the specified type will be added. </param>
			<param name="clear_vector"> Flag indicating whether the buffer vector is to be cleared before adding the found components to it or not. Use 1 to clear the vector, 0 - to append new found components to the end of the vector. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.ComponentSystem.getComponentInParent(NodePtr,bool)">
			<summary>
			Returns the first component of the specified type found among all predecessors and posessors of the specified node.
			</summary> 
			<param name="node"> Node, whose hierarchy is to be checked. </param>
			<param name="enabled_only"> Enabled flag: true to get enabled component only, false to get component in any case. </param> 
			<returns>Pointer to the component if any; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.ComponentSystem.getComponentsInParent(NodePtr,Unigine.Vector{C*,int,Unigine.VectorAllocator},int)">
			<summary>
			Searches for all components of the specified type up the hierarchy of the specified node and puts them to the given buffer vector.
			</summary> 
			<param name="node"> Node, whose hierarchy is to be checked. </param>
			<param name="out_components"> Buffer vector, to which all found components of the specified type will be added. </param>
			<param name="clear_vector"> Flag indicating whether the buffer vector is to be cleared before adding the found components to it or not. Use 1 to clear the vector, 0 - to append new found components to the end of the vector. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.ComponentSystem.getComponentInWorld(bool)">
			<summary>
			Returns the first component of this type found in the current world.
			</summary> 
			<param name="enabled_only"> Enabled flag: true to get enabled component only, false to get component in any case. </param> 
			<returns>Pointer to the component if any; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.ComponentSystem.getComponentsInWorld(Unigine.Vector{C*,int,Unigine.VectorAllocator},bool)">
			<summary>
			Searches for all components of the specified type in the current world and puts them to the given buffer vector.
			</summary> 
			<param name="out_components"> Buffer vector, to which all found components of the specified type will be added. </param>
			<param name="enabled_only"> Enabled flag: true to get only enabled components, false to get all components. </param> 
		</member>
		<member name="M:Unigine.ComponentSystem.removeComponent(NodePtr)">
			<summary>
			Removes the component from the specified node.
			</summary> 
			<param name="node"> Node, from which the component is to be removed. </param> 
			<returns>1 if the component was successfully removed from the specified node; otherwise 0.</returns>
		</member>
		<member name="M:Unigine.ComponentSystem.setWarningLevel(int)">
			<summary>
			Sets the warning level for C++ Component System. Warnings can be very useful when debugging your application, e.g. to investigate Null Reference Exception cases.
			</summary> 
			<param name="level"> New warning level to be set. One of the following values:WARNING_LEVEL::NONE - warning messages are disabled.WARNING_LEVEL::LOW - warning messages are generated only for serious cases.WARNING_LEVEL::HIGH - warning messages are generated for all cases including potential ones. At this level, for example, all Node/Property/Material parameters, that are empty at startup, will be reported. </param> 
		</member>
		<member name="M:Unigine.ComponentSystem.getWarningLevel">
			<summary>
			Returns the current warning level for C++ Component System. Warnings can be very useful when debugging your application, e.g. to investigate Null Reference Exception cases.
			</summary>  
			<returns>Current warning level. One of the following values:WARNING_LEVEL::NONE - warning messages are disabled.WARNING_LEVEL::LOW - warning messages are generated only for serious cases.WARNING_LEVEL::HIGH - warning messages are generated for all cases including potential ones. At this level, for example, all Node/Property/Material parameters, that are empty at startup, will be reported.</returns>
		</member>
		<member name="M:Unigine.ComponentVariable.getParameter const">
			<summary>
			Returns the pointer to the corresponding property parameter.
			</summary>  
			<returns>Pointer to the property parameter.</returns>
		</member>
		<member name="M:Unigine.ComponentVariable.size">
			<summary>
			Returns the number of elements in the array.						This method is for the array and array structure component parameters.
			</summary>  
			<returns>Number of elements in the array.</returns>
		</member>
		<member name="M:Unigine.ComponentVariable.operator[](int)">
			<summary>
			Returns the reference to the requested element.						This method is for the array and array structure component parameters.
			</summary> 
			<param name="index"> Position of the element to return. </param> 
			<returns>Reference to the requested element.</returns>
		</member>
	</members>
</doc>