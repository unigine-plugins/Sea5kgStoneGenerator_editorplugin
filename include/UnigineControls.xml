<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Controls.#ctor(int)">
			<summary>
			Creates a smart pointer to Controls.
			</summary> 
			<param name="type"> Type of the controls to be created. </param> 
		</member>
		<member name="M:Unigine.Controls.setMouseDX(float)">
			<summary>
			Updates a screen position change of the mouse pointer along the X axis.
			</summary> 
			<param name="mousedx"> Change of the X coordinate. </param> 
		</member>
		<member name="M:Unigine.Controls.getMouseDX">
			<summary>
			Returns a screen position change of the mouse pointer along the X axis during the previous frame.
			</summary>  
			<returns>Change of the X coordinate.</returns>
		</member>
		<member name="M:Unigine.Controls.setMouseDY(float)">
			<summary>
			Updates a screen position change of the mouse pointer along the Y axis.
			</summary> 
			<param name="mousedy"> Change of the Y coordinate. </param> 
		</member>
		<member name="M:Unigine.Controls.getMouseDY">
			<summary>
			Returns a screen position change of the mouse pointer along the Y axis during the previous frame.
			</summary>  
			<returns>Change of the Y coordinate.</returns>
		</member>
		<member name="M:Unigine.Controls.setState(int,int)">
			<summary>
			Toggles the state of the given control on or off.
			</summary> 
			<param name="state"> Control state number to update. Possible values are in range [STATE_FORWARD;NUM_STATES]. For full list of available controls see Unigine::Controls:: Enumeration at the end of the article. </param>
			<param name="value"> State value: positive value to "press" the control; 0 to release it. </param> 
		</member>
		<member name="M:Unigine.Controls.getState(int)">
			<summary>
			Returns the state of a given control (pressed or unpressed).
			</summary> 
			<param name="state"> Control state number. Possible values are in range [STATE_FORWARD;NUM_STATES]. For full list of available controls see Unigine::Controls:: Enumeration at the end of the article. </param> 
			<returns>1 if the control is pressed; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.Controls.getType">
			<summary>
			Returns the type of input controls.
			</summary>  
			<returns>Controls type (one of CONTROLS_* variables):CONTROLS_APP = 0CONTROLS_DUMMYCONTROLS_SIX_AXISCONTROLS_X_PAD360CONTROLS_JOYSTICK</returns>
		</member>
		<member name="M:Unigine.Controls.getTypeName">
			<summary>
			Returns a type name of input controls.
			</summary>  
			<returns>Type name.</returns>
		</member>
		<member name="M:Unigine.Controls.clearState(int)">
			<summary>
			Returns a control state and clears it to 0 (not pressed). This function allows to handle control only once even if it is kept pressed over several frames.
			</summary> 
			<param name="state"> Control state number. Possible values are in range [STATE_FORWARD;NUM_STATES]. For full list of available controls see Unigine::Controls:: Enumeration at the end of the article. </param> 
			<returns>Returns the state of the given control: 1 if the control is pressed; otherwise,0.</returns>
		</member>
		<member name="M:Unigine.Controls.saveState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Saves controls settings into the stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the controls settings are saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Controls.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores controls settings from the stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the controls settings are restored successfully; otherwise, false.</returns>
		</member>
		<member name="F:Unigine.Controls.CONTROLS_APP">
			<summary>
			A ControlsApp instance.
		</summary>
		</member>
		<member name="F:Unigine.Controls.CONTROLS_DUMMY">
			<summary>
			ControlsDummy instance.
		</summary>
		</member>
		<member name="F:Unigine.Controls.CONTROLS_JOYSTICK">
			<summary>
			Joystick as the input device.
		</summary>
		</member>
		<member name="F:Unigine.Controls.CONTROLS_SIX_AXIS">
			<summary>
			Sixaxis controller as the input device.
		</summary>
		</member>
		<member name="F:Unigine.Controls.CONTROLS_X_PAD360">
			<summary>
			XBox 360 game pad as the input device.
		</summary>
		</member>
		<member name="F:Unigine.Controls.NUM_STATES">
			<summary>
			The total number of controls states.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_FORWARD">
			<summary>
			A state in which the player moves forwards.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_BACKWARD">
			<summary>
			A state in which the player moves backwards.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_MOVE_LEFT">
			<summary>
			A state in which the player moves left.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_MOVE_RIGHT">
			<summary>
			A state in which the player moves right.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_TURN_UP">
			<summary>
			A state, in which the player turns upward.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_TURN_DOWN">
			<summary>
			A state in which the player turns downward.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_TURN_LEFT">
			<summary>
			A state in which the player turns left.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_TURN_RIGHT">
			<summary>
			A state in which the player turns right.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_CROUCH">
			<summary>
			A state in which the player crouches or squats.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_JUMP">
			<summary>
			A state in which the player jumps.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_RUN">
			<summary>
			A state in which the player runs.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_USE">
			<summary>
			A state in which the player utilizes some object.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_FIRE">
			<summary>
			A state in which the player fires their weapon.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_SAVE">
			<summary>
			A state in which the world is being saved.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_RESTORE">
			<summary>
			A state in which the world is being restored.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_SCREENSHOT">
			<summary>
			A state in which a screenshot is being taken.
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_0">
			<summary>
			Auxiliary state (unreserved) It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_1">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_2">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_3">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_4">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_5">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_6">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_7">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_8">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_9">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_A">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_B">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_C">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_D">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_E">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="F:Unigine.Controls.STATE_AUX_F">
			<summary>
			Auxiliary state (unreserved). It can be mapped to any control state, if necessary (see the example).
		</summary>
		</member>
		<member name="M:Unigine.ControlsApp.setAlwaysRun(int)">
			<summary>
			Sets a value indicating if the player is running by default. If the player is in this mode, the Run control will switch them to walking. The default is 0.
			</summary> 
			<param name="run"> Positive integer to make the player run by default; otherwise, 0.  </param> 
		</member>
		<member name="M:Unigine.ControlsApp.getAlwaysRun">
			<summary>
			Returns a value indicating if the player is running by default. If the player is in this mode, the Run control will switch them to walking.
			</summary>  
			<returns>1 if the player is running by default; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsApp.setEnabled(bool)">
			<summary>
			Enables or disables input handling for current application window.
			</summary> 
			<param name="enabled"> true to enable input handling for current application window, false to disable it. </param> 
		</member>
		<member name="M:Unigine.ControlsApp.isEnabled">
			<summary>
			Returns a value indicating if input handling for current application window is enabled.
			</summary>  
			<returns>true if input handling for current application window is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.setMouseDX(float)">
			<summary>
			Updates a screen position change of the mouse pointer along the X axis.
			</summary> 
			<param name="mousedx"> Change of the X coordinate. </param> 
		</member>
		<member name="M:Unigine.ControlsApp.getMouseDX">
			<summary>
			Returns a screen position change of the mouse pointer along the X axis during the last frame.
			</summary>  
			<returns>Change of the X coordinate.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.setMouseDY(float)">
			<summary>
			Updates a screen position change of the mouse pointer along the Y axis.
			</summary> 
			<param name="mousedy"> Change of the Y coordinate. </param> 
		</member>
		<member name="M:Unigine.ControlsApp.getMouseDY">
			<summary>
			Returns a screen position change of the mouse pointer along the Y axis during the last frame.
			</summary>  
			<returns>Change of the Y coordinate.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.setMouseEnabled(bool)">
			<summary>
			Enables or disables the mouse input.
			</summary> 
			<param name="enabled"> Positive integer to enable the mouse; otherwise, 0.  </param> 
		</member>
		<member name="M:Unigine.ControlsApp.isMouseEnabled">
			<summary>
			Returns a value indicating if the mouse is enabled.
			</summary>  
			<returns>1 if the mouse is enabled; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsApp.setMouseInverse(int)">
			<summary>
			Sets back-and-forth movements of the mouse (by Y-axis) to be interpreted as inverted: when the mouse is moved upward, the camera looks downwards, and when the mouse is moved downwards, the camera looks upwards. This mode is available only to control the camera.
			</summary> 
			<param name="inverse"> Positive integer to inverse the mouse; otherwise, 0.  </param> 
		</member>
		<member name="M:Unigine.ControlsApp.getMouseInverse">
			<summary>
			Returns a value indicating if back-and-forth movements of the mouse (by Y-axis) are inverted: when the mouse is moved upward, the camera looks downwards, and when the mouse is moved downwards, the camera looks upwards. This mode is available only to control the camera.
			</summary>  
			<returns>1 if the mouse is inverted; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsApp.setMouseSensitivity(float)">
			<summary>
			Sets mouse sensitivity used to increase or decrease the speed of mouse movement.
			</summary> 
			<param name="sensitivity"> Mouse sensitivity. Higher values increase the mouse speed; lower values decrease it. </param> 
		</member>
		<member name="M:Unigine.ControlsApp.getMouseSensitivity">
			<summary>
			Returns the current mouse sensitivity used to increase or decrease the speed of mouse movement.
			</summary>  
			<returns>Mouse sensitivity.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.setState(int,int)">
			<summary>
			Updates the state of a given control (sets the control on or off).
			</summary> 
			<param name="state"> Control state number to update. Possible values are in range [STATE_FORWARD;NUM_STATES]. For full list of available controls see Unigine::Controls  </param>
			<param name="value"> State value: positive value to "press" the control; 0 to release it. </param> 
		</member>
		<member name="M:Unigine.ControlsApp.getState(int)">
			<summary>
			Returns the state of a given control.
			</summary> 
			<param name="state"> Control state number. Possible values are in range [STATE_FORWARD;NUM_STATES]. For full list of available controls see Unigine::Controls  </param> 
			<returns>State value: positive value means the control is "pressed"; 0 means the control is released.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.setStateButton(int,int)">
			<summary>
			Sets a mouse button that switches a given state on and off.
			</summary> 
			<param name="state"> State (one of CONTROLS_STATE_* variables). </param>
			<param name="button"> Button that toggles the state (one of APP_BUTTON_* variables). </param> 
		</member>
		<member name="M:Unigine.ControlsApp.getStateButton(int)">
			<summary>
			Returns a mouse button that switches a given state on and off.
			</summary> 
			<param name="state"> State (one of CONTROLS_STATE_* variables). </param> 
			<returns>Button that toggles the state (one of APP_BUTTON_* variables).</returns>
		</member>
		<member name="M:Unigine.ControlsApp.isStateButton(int)">
			<summary>
			Returns a value indicating if the given button assigned to the state.
			</summary> 
			<param name="button"> Button that toggles the state (one of APP_BUTTON_* variables). </param> 
			<returns>1 if the given button is assigned; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.getStateEvent(int)">
			<summary>
			Lets the user assign a key or a mouse button to a given state.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables), to which a key or a mouse button is going to be assigned. </param> 
		</member>
		<member name="M:Unigine.ControlsApp.isStateEvent">
			<summary>
			Returns a value indicating if a key or a mouse button is successfully assigned to a state.
			</summary>  
			<returns>1 if a key or a mouse button is already assigned; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsApp.setStateKey(int,int)">
			<summary>
			Sets a key that toggles a given state on and off.
			</summary> 
			<param name="state"> State (one of CONTROLS_STATE_* variables). </param>
			<param name="key"> Key that switches the state. It is a standard ASCII key code or one of the APP_KEY_* variables. </param> 
		</member>
		<member name="M:Unigine.ControlsApp.getStateKey(int)">
			<summary>
			Returns a key that toggles a given state on and off.
			</summary> 
			<param name="state"> State (one of CONTROLS_STATE_* variables). </param> 
			<returns>Key that switches the state. It is a standard ASCII key code or one of the APP_KEY_* variables: KEY_ESC = 256KEY_TABKEY_BACKSPACEKEY_RETURNKEY_DELETEKEY_INSERTKEY_HOMEKEY_ENDKEY_PGUPKEY_PGDOWNKEY_LEFTKEY_RIGHTKEY_UPKEY_DOWNKEY_SHIFTKEY_CTRLKEY_ALTKEY_SCROLLKEY_CAPSKEY_NUMKEY_F1KEY_F2KEY_F3KEY_F4KEY_F5KEY_F6KEY_F7KEY_F8KEY_F9KEY_F10KEY_F11KEY_F12</returns>
		</member>
		<member name="M:Unigine.ControlsApp.isStateKey(int)">
			<summary>
			Checks if a given key already acts as an application control. This is useful to avoid collisions between application controls and hot keys.
			</summary> 
			<param name="key"> Key in one of the following formats:Character format (for example,'a')Standard ASCII key code (for example,97)One of APP_KEY_* variables </param> 
			<returns>1 if the key is assigned to a state; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsApp.getStateName(int)">
			<summary>
			Returns the name of the given control state.
			</summary> 
			<param name="state"> The control state number in range from 0 to the total number of states. </param> 
			<returns>Name of the given control state.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.clearState(int)">
			<summary>
			Returns a control state and clears it to 0 (control is not pressed).
			</summary> 
			<param name="state"> Control state number. Possible values are in range [ STATE_FORWARD;NUM_STATES]. For full list of available controls see Unigine::Controls:: Enumeration at the end of the article. </param> 
			<returns>1 if the control is pressed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.setMouseHandle(Input::MOUSE_HANDLE)">
			<summary>
			Sets the mouse behavior mode.
			</summary> 
			<param name="handle"> Mouse behavior mode, one of the MOUSE_HANDLE_* values. </param> 
		</member>
		<member name="M:Unigine.ControlsApp.getMouseHandle">
			<summary>
			Returns the mouse behavior mode.
			</summary>  
			<returns>Mouse behavior mode, one of the MOUSE_HANDLE_* values.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.setPath(char)">
			<summary>
			Sets a new path to the controls configuration file (default: configs/default.controls). The path can be specified as an absolute path or relative to the -data_path or &lt;project_name&gt; folder if the -project_name is set.
			</summary> 
			<param name="path"> New path to the controls configuration file to be set. </param> 
		</member>
		<member name="M:Unigine.ControlsApp.getPath const">
			<summary>
			Returns the current path to the controls configuration file (default: configs/default.controls).
			</summary>  
			<returns>Current path to the controls configuration file.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.setAutosave(bool)">
			<summary>
			Sets a value indicating if current controls configuration settings are automatically saved to the corresponding config file on loading, closing, and saving the world, as well as on the Engine shutdown.
			</summary> 
			<param name="autosave"> true to enable automatic saving of current controls configuration settings; false — to disable it. </param> 
		</member>
		<member name="M:Unigine.ControlsApp.isAutosave const">
			<summary>
			Returns a value indicating if current controls configuration settings are automatically saved to the corresponding config file on loading, closing, and saving the world, as well as on the Engine shutdown.
			</summary>  
			<returns>true if automatic saving of current controls configuration settings is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.load">
			<summary>
			Loads controls configuration settings from a controls configuration file (configs/default.controls by default). To change the path to the controls configuration file use the setPath() method.
			</summary>  
			<returns>1 if controls configuration settings are successfully loaded from a file; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ControlsApp.save const">
			<summary>
			Saves controls configuration settings to a controls configuration file (configs/default.controls by default). To change the path to the controls configuration file use the setPath() method.
			</summary>  
			<returns>1 if controls configuration settings are successfully saved to a file; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ControlsDummy.#ctor">
			<summary>
			Constructor. Creates a new set of dummy controls.
			</summary>  
		</member>
		<member name="M:Unigine.ControlsJoystick.#ctor(int)">
			<summary>
			Constructor. Creates a new joystick.
			</summary> 
			<param name="num"> Joystick number. </param> 
		</member>
		<member name="M:Unigine.ControlsJoystick.isAvailable">
			<summary>
			Checks if the joystick is available.
			</summary>  
			<returns>1 if the joystick is available; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getAxis(int)">
			<summary>
			Returns a state value of a given axis. It includes position of the joystick along the following axes: X, Y (two-axis joystick) and Z (three-axis joystick). When a joystick is in the center position, X and Y axes values are zero. Negative values indicate left or down; positive values indicate right or up.
			</summary> 
			<param name="axis"> Axis number. </param> 
			<returns>Value in range [-1; 1]. </returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getAxisName(int)">
			<summary>
			Returns the name of a given axis.
			</summary> 
			<param name="axis"> Axis number. </param> 
			<returns>Axis name.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getButton(int)">
			<summary>
			Returns a button state (pressed or not pressed).
			</summary> 
			<param name="button"> Button number. </param> 
			<returns>1 if the button is pressed; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getButtonName(int)">
			<summary>
			Returns the name of a given button.
			</summary> 
			<param name="button"> Button number. </param> 
			<returns>Button name.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.setFilter(float)">
			<summary>
			Sets a filter value used to correct the current state of the joystick axis relative to the previous one.
			</summary> 
			<param name="filter"> Filter value for interpolation between axis states. The provided value is clamped to a range [0;1].Filter value of 0 means there is no interpolation and the current value is not corrected.Filter value of 1 means the previous state is used instead of the current one. </param> 
		</member>
		<member name="M:Unigine.ControlsJoystick.getFilter">
			<summary>
			Returns a filter value used to correct the current state of the joystick axis relative to the previous one:											Filter value of 0 means there is no interpolation and the current value is not corrected.						Filter value of 1 means the previous state is used instead of the current one.
			</summary>  
			<returns>Filter value for interpolation between axis states.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getGuidProduct const">
			<summary>
			Returns the GUID supplied by the device's manufacturer. This can be very useful in case your application uses non-standard custom input devices to ensure proper configuration  (dead zones, inverse flags, correction curves, etc.).
			</summary>  
			<returns>GUID supplied by the device's manufacturer.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getGuidInstance const">
			<summary>
			Returns the GUID of the joystick device. This can be very useful in case your application uses non-standard custom input devices to ensure proper configuration  (dead zones, inverse flags, correction curves, etc.).
			</summary>  
			<returns>GUID of the joystick device.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getName">
			<summary>
			Returns the name of the joystick.
			</summary>  
			<returns>Joystick name.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getNumAxes">
			<summary>
			Returns the number of axes supported by the joystick.
			</summary>  
			<returns>The number of axes.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getNumber">
			<summary>
			Returns the joystick number.
			</summary>  
			<returns>Joystick number.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getNumButtons">
			<summary>
			Returns the number of buttons supported by the joystick.
			</summary>  
			<returns>The number of buttons.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getNumPovs">
			<summary>
			Returns the number of POV hat switches supported by the joystick.
			</summary>  
			<returns>The number of POV hats.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getPov(int)">
			<summary>
			Returns a POV hat switch state. POV hats support the following positions: left, right, up and down.
			</summary> 
			<param name="pov"> POV pad number. </param> 
			<returns>One of the following:-1  — not pressed 0  — pressed "up" 4500  — pressed "up" and "right" 9000  — pressed "right" 13500  — pressed "down" and "right" 18000  — pressed "down" 22500  — pressed "down" and "left" 27000  — pressed "left" 31500  — pressed "up" and "left" </returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getPovName(int)">
			<summary>
			Returns the name of a given POV hat switch.
			</summary> 
			<param name="pov"> POV hat number. </param> 
			<returns>POV hat name.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.setStateButton(int,int)">
			<summary>
			Sets a joystick button that switches a given state on or off.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables). </param>
			<param name="button"> Button number. </param> 
		</member>
		<member name="M:Unigine.ControlsJoystick.getStateButton(int)">
			<summary>
			Returns a game pad button that switches a given state on and off.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables). </param> 
			<returns>Button that switches the given state.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getStateEvent(int)">
			<summary>
			Lets the user assign a joystick button to a given state.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables), to which a button is going to be assigned. </param> 
		</member>
		<member name="M:Unigine.ControlsJoystick.isStateEvent">
			<summary>
			Returns a value indicating if a joystick button is successfully assigned to a state.
			</summary>  
			<returns>1 if a button is already assigned; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.getStateName(int)">
			<summary>
			Returns the name of a given state, that was assigned to one of controls.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables). </param> 
			<returns>State name.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.clearButton(int)">
			<summary>
			Returns a button state and clears it to 0 (not pressed).
			</summary> 
			<param name="button"> Button number. </param> 
			<returns>1 if the button is pressed, and this function was not called previously in the current frame; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.saveState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Saves ControlsJoystick settings into the stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the ControlsJoystick settings are saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores ControlsJoystick settings from the stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the ControlsJoystick settings are restored successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ControlsJoystick.updateEvents">
			<summary>
			Scans the joystick controls (synchronizes joystick button states with the controller itself). Should be called each frame.					On Windows, in case a joystick is not connected, this function can substantially increase per-frame update time. (This happens due to calling						IDirectInput8::EnumDevices() method.)
			</summary>  
			<returns>0 if a joystick is not found or updateEvents() already has been called for the frame; otherwise 1.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.#ctor(int)">
			<summary>
			Constructor. Creates a new Sixaxis controller.
			</summary> 
			<param name="num"> Sixaxis controller number. </param> 
		</member>
		<member name="M:Unigine.ControlsSixAxis.isAvailable">
			<summary>
			Checks if the Sixaxis controller is available.
			</summary>  
			<returns>1 if the Sixaxis controller is available; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getButton(int)">
			<summary>
			Returns a button state (pressed or not pressed).
			</summary> 
			<param name="button"> Button number. </param> 
			<returns>1 if the button is pressed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.setFilter(float)">
			<summary>
			Sets a filter value used to correct the current state of the analog sticks of the Sixaxis controller relative to the previous one. Axis states are interpolated for analog sticks.
			</summary> 
			<param name="filter"> Filter value for interpolation between axis states. The provided value is clamped to a range [0;1].Filter value of 0 means there is no interpolation and the current value is not corrected.Filter value of 1 means the previous state is used instead of the current one. </param> 
		</member>
		<member name="M:Unigine.ControlsSixAxis.getFilter">
			<summary>
			Returns a filter value used to correct the current state of the analog axis of the Sixaxis controller relative to the previous one:											Filter value of 0 means there is no interpolation and the current value is not corrected.						Filter value of 1 means the previous state is used instead of the current one.
			</summary>  
			<returns>Filter value for interpolation between axis states.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.setLargeMotor(float)">
			<summary>
			Sets the amount of vibration for the large motor.
			</summary> 
			<param name="speed"> Speed of motor rotation in range [0; 1] </param> 
		</member>
		<member name="M:Unigine.ControlsSixAxis.getLeftX">
			<summary>
			Returns a state value of the left analog stick along the X-axis. When the stick is in the center position, this value is zero. Negative values indicate left ; positive values indicate right.
			</summary>  
			<returns>Value in range [-1; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getLeftY">
			<summary>
			Returns a state value of the left analog stick along the Y-axis. When the stick is in the center position, this value is zero. Negative values indicate down ; positive values indicate up.
			</summary>  
			<returns>Value in range [-1; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getName">
			<summary>
			Returns the name of the Sixaxis controller.
			</summary>  
			<returns>Name of Sixaxis controller.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getNumber">
			<summary>
			Returns the number of Sixaxis controllers.
			</summary>  
			<returns>Number of controllers.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressCircle">
			<summary>
			Returns a state value of the circle button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressCross">
			<summary>
			Returns a state value of the cross button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressDown">
			<summary>
			Returns a state value of the down button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressL1">
			<summary>
			Returns a state value of the L1 button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressL2">
			<summary>
			Returns a state value of the L2 button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressLeft">
			<summary>
			Returns a state value of the left button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressR1">
			<summary>
			Returns a state value of the R1 button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressR2">
			<summary>
			Returns a state value of the R2 button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressRight">
			<summary>
			Returns a state value of the right button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressSquare">
			<summary>
			Returns a state value of the square button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressTriangle">
			<summary>
			Returns a state value of the triangle button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getPressUp">
			<summary>
			Returns a state value of the up button. 0 value means the button is not pressed; 1 means the button is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getRightX">
			<summary>
			Returns a state value of the right analog stick along the X-axis. When the stick is in the center position, this value is zero. Negative values indicate left ; positive values indicate right.
			</summary>  
			<returns>Value in range [-1; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getRightY">
			<summary>
			Returns a state value of the right analog stick along the Y-axis. When the stick is in the center position, this value is zero. Negative values indicate down ; positive values indicate up.
			</summary>  
			<returns>Value in range [-1; 1].</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getSensorG">
			<summary>
			Returns a state value of the G-sensor.
			</summary>  
		</member>
		<member name="M:Unigine.ControlsSixAxis.getSensorX">
			<summary>
			Returns a state value of the of the controller position along the X axis.
			</summary>  
			<returns>The value along the X axis.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getSensorY">
			<summary>
			Returns a state value of the of the controller position along the Y axis.
			</summary>  
			<returns>The value along the Y axis.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getSensorZ">
			<summary>
			Returns a state value of the of the controller position along the Z axis.
			</summary>  
			<returns>The value along the Z axis.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.setSmallMotor(float)">
			<summary>
			Sets the amount of vibration for the small motor.
			</summary> 
			<param name="speed"> Speed of motor rotation in range [0; 1] </param> 
		</member>
		<member name="M:Unigine.ControlsSixAxis.setStateButton(int,int)">
			<summary>
			Sets a Sixaxis controller button that switches a given state on and off.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables). </param>
			<param name="button"> Button that switches the state (one of the BUTTON_* variables). </param> 
		</member>
		<member name="M:Unigine.ControlsSixAxis.getStateButton(int)">
			<summary>
			Returns a Sixaxis controller button that switches a given state on and off.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables). </param> 
			<returns>Button that switches the state (one of the BUTTON_* variables)</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getStateEvent(int)">
			<summary>
			Lets the user assign a Sixaxis controller button to a given state.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_*) to which a button is going to be assigned. </param> 
		</member>
		<member name="M:Unigine.ControlsSixAxis.isStateEvent">
			<summary>
			Returns a value indicating if a Sixaxis controller button is successfully assigned to a state.
			</summary>  
			<returns>1 if a button is already assigned; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.getStateName(int)">
			<summary>
			Returns the name of a given state.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables). </param> 
		</member>
		<member name="M:Unigine.ControlsSixAxis.clearButton(int)">
			<summary>
			Returns a button state and clears it to 0 (not pressed).
			</summary> 
			<param name="button"> Button that switches the state (one of the BUTTON_* variables) </param> 
			<returns>1 if the button is pressed, and this function was not called previously in the current frame; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.saveState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Saves Sixaxis controller settings into the stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the Sixaxis controller settings are saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores Sixaxis controller settings from the stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the Sixaxis controller settings are restored successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ControlsSixAxis.updateEvents">
			<summary>
			Scans Sixaxis controller (synchronizes states of controller buttons with the controller). Should be called each frame
			</summary>  
			<returns>0 if a game pad is not found or updateEvents() already has been called for the frame; otherwise 1.</returns>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_CIRCLE">
			<summary>
			Circle button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_CROSS">
			<summary>
			Cross button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_DOWN">
			<summary>
			D-pad Down button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_L1">
			<summary>
			L1 button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_L2">
			<summary>
			L2 button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_L3">
			<summary>
			L3 button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_LEFT">
			<summary>
			D-pad Left button
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_R1">
			<summary>
			R1 button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_R2">
			<summary>
			R2 button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_R3">
			<summary>
			R3 button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_RIGHT">
			<summary>
			D-pad Right button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_SELECT">
			<summary>
			Select button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_SQUARE">
			<summary>
			Square button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_START">
			<summary>
			Start button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_TRIANGLE">
			<summary>
			Triangle button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.BUTTON_UP">
			<summary>
			D-pad Up button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsSixAxis.NUM_BUTTONS">
			<summary>
			Number of Sixasix controller buttons.
		</summary>
		</member>
		<member name="M:Unigine.ControlsXPad360.#ctor(int)">
			<summary>
			Constructor. Creates a new XBox 360 game pad.
			</summary> 
			<param name="num"> Game pad number (up to four game pads are supported). </param> 
		</member>
		<member name="M:Unigine.ControlsXPad360.isAvailable">
			<summary>
			Checks if the game pad is available.
			</summary>  
			<returns>1 if the game pad is available; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.getButton(int)">
			<summary>
			Returns a button state (pressed or not pressed).
			</summary> 
			<param name="button"> Button (one of the CONTROLS_XPAD360_BUTTON_* variables). </param> 
			<returns>1 if the button is pressed; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.setFilter(float)">
			<summary>
			Sets a filter value used to correct the current state of the analog axis relative to the previous one. Axis states are interpolated for thumbsticks and triggers.
			</summary> 
			<param name="filter"> Filter value for interpolation between axis states. The provided value is clamped to a range [0;1].Filter value of 0 means there is no interpolation and the current value is not corrected.Filter value of 1 means the previous state is used instead of the current one. </param> 
		</member>
		<member name="M:Unigine.ControlsXPad360.getFilter">
			<summary>
			Returns a filter value used to correct the current state of the analog axis (thumbsticks and triggers) relative to the previous one:											Filter value of 0 means there is no interpolation and the current value is not corrected.						Filter value of 1 means the previous state is used instead of the current one.
			</summary>  
			<returns>Filter value for interpolation between axis states.</returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.setLeftMotor(float)">
			<summary>
			Sets the amount of vibration for the left motor (a low-frequency motor).
			</summary> 
			<param name="speed"> Speed of motor rotation in range [0; 1].  </param> 
		</member>
		<member name="M:Unigine.ControlsXPad360.getLeftTrigger">
			<summary>
			Returns an axis state value (the position) of the left trigger. Zero means the trigger is not pressed; 1 means the trigger is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1]. </returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.getLeftX">
			<summary>
			Returns a state value of the left thumbstick along the X axis. When a thumbstick is in the center position, this value is zero. Negative values indicate left; positive values indicate right.
			</summary>  
			<returns>Value in range [-1; 1]. </returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.getLeftY">
			<summary>
			Returns a state value of the left thumbstick along the Y axis. When a thumbstick is in the center position, this value is zero. Negative values indicate down; positive values indicate up.
			</summary>  
			<returns>Value in range [-1; 1]. </returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.getName">
			<summary>
			Returns the name of the game pad.
			</summary>  
			<returns>One of the following:GamePadWheelArcade StickFlight StickDance PadGuitarDrum KitUnknown</returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.getNumber">
			<summary>
			Returns the game pad number (up to four game pads are supported).
			</summary>  
			<returns>Game pad number.</returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.setRightMotor(float)">
			<summary>
			Sets the amount of vibration for the right motor (a high-frequency motor).
			</summary> 
			<param name="speed"> Speed of motor rotation in range [0; 1].  </param> 
		</member>
		<member name="M:Unigine.ControlsXPad360.getRightTrigger">
			<summary>
			Returns an axis state value (the position) of the right trigger. Zero means the trigger is not pressed; 1 means the trigger is pressed to the maximum.
			</summary>  
			<returns>Value in range [0; 1]. </returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.getRightX">
			<summary>
			Returns a state value of the right thumbstick along the X axis. When a thumbstick is in the center position, this value is zero. Negative values indicate left; positive values indicate right.
			</summary>  
			<returns>Value in range [-1; 1]. </returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.getRightY">
			<summary>
			Returns a state value of the right thumbstick along the Y axis. When a thumbstick is in the center position, this value is zero. Negative values indicate down; positive values indicate up.
			</summary>  
			<returns>Value in range [-1; 1]. </returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.setStateButton(int,int)">
			<summary>
			Sets a game pad button that switches a given state on and off.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables). </param>
			<param name="button"> Button that switches the state (one of the CONTROLS_XPAD360_BUTTON_* variables). </param> 
		</member>
		<member name="M:Unigine.ControlsXPad360.getStateButton(int)">
			<summary>
			Returns a game pad button that switches a given state on and off.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables). </param> 
			<returns>Button that switches the state (one of the CONTROLS_XPAD360_BUTTON_* variables): BUTTON_A = 0BUTTON_BBUTTON_XBUTTON_YBUTTON_BACKBUTTON_STARTBUTTON_DPAD_UPBUTTON_DPAD_DOWNBUTTON_DPAD_LEFTBUTTON_DPAD_RIGHTBUTTON_THUMB_LEFTBUTTON_THUMB_RIGHTBUTTON_SHOULDER_LEFTBUTTON_SHOULDER_RIGHT</returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.getStateEvent(int)">
			<summary>
			Lets the user assign a game pad button to a given state.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables), to which a button is going to be assigned. </param> 
		</member>
		<member name="M:Unigine.ControlsXPad360.isStateEvent">
			<summary>
			Returns a value indicating if a game pad button is successfully assigned to a state.
			</summary>  
			<returns>1 if a button is already assigned; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.getStateName(int)">
			<summary>
			Returns the name of a given state.
			</summary> 
			<param name="state"> State (one of the CONTROLS_STATE_* variables). </param> 
			<returns>State name.</returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.clearButton(int)">
			<summary>
			Returns a button state and clears it to 0 (not pressed).
			</summary> 
			<param name="button"> Button (one of the CONTROLS_XPAD360_BUTTON_* variables). </param> 
			<returns>1 if the button is pressed, and this function was not called previously in the current frame; otherwise, 0. </returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.saveState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Saves XBox 360 game pad settings into the stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the XBox 360 game pad settings are saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores XBox 360 game pad settings from the stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if the XBox 360 game pad settings are restored successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.ControlsXPad360.updateEvents">
			<summary>
			Scans a game pad (synchronizes states of game pad buttons and thumbsticks with the controller itself). Should be called each frame.
			</summary>  
			<returns>0 if a game pad is not found or updateEvents() already has been called for the frame; otherwise 1.</returns>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_A">
			<summary>
			Button A.
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_B">
			<summary>
			Button B.
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_BACK">
			<summary>
			Button "Back".
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_DPAD_DOWN">
			<summary>
			Button "Down".
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_DPAD_LEFT">
			<summary>
			Button "Left".
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_DPAD_RIGHT">
			<summary>
			Button "Right".
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_DPAD_UP">
			<summary>
			Button "Up".
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_SHOULDER_LEFT">
			<summary>
			Left shoulder (bumper) button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_SHOULDER_RIGHT">
			<summary>
			Right shoulder (bumper) button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_START">
			<summary>
			Button "Start".
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_THUMB_LEFT">
			<summary>
			Left thumbstick button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_THUMB_RIGHT">
			<summary>
			Right thumbstick button.
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_X">
			<summary>
			Button X.
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.BUTTON_Y">
			<summary>
			Button Y.
		</summary>
		</member>
		<member name="F:Unigine.ControlsXPad360.NUM_BUTTONS">
			<summary>
			Number of buttons on Xbox 360 game pad.
		</summary>
		</member>
	</members>
</doc>