<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.BakeLighting.bake(Unigine.Vector{Unigine.Ptr{LightVoxelProbe},int,Unigine.VectorAllocator},Unigine.Vector{Unigine.Ptr{LightEnvironmentProbe},int,Unigine.VectorAllocator},Unigine.Vector{Unigine.Ptr{Light},int,Unigine.VectorAllocator},Unigine.Vector{Unigine.Ptr{ObjectMeshStatic},int,Unigine.VectorAllocator},Unigine.Vector{int,int,Unigine.VectorAllocator})">
			<summary>
			Starts the process of light baking for all voxel and environment probes, shadow baking for light sources in static light mode and lightmaps baking for surfaces of Mesh Static objects in the given list.
			</summary> 
			<param name="voxel_lights"> List of voxel probes for which the process of light baking is to be performed. The order of nodes added for baking is not important. </param>
			<param name="env_lights"> List of environment probes for which the process of light baking is to be performed. The order of nodes added for baking is not important. </param>
			<param name="shadow_lights"> List of light sources in static light mode for which the process of shadow baking is to be performed. The order of lights added for baking is not important. </param>
			<param name="objects"> List of Mesh Static objects for which the process of lightmaps baking is to be performed. </param>
			<param name="surfaces"> List of surfaces of Mesh Static objects for which the process of lightmaps baking is to be performed.The number of objects and surfaces added for baking must be equal. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.bakeAll(bool,bool,bool,bool)">
			<summary>
			Starts the process of light baking for all enabled voxel and environment probes, shadow baking for eanbled light sources in static light mode and lightmaps baking for enabled surfaces of Mesh Static objects in the scene.
			</summary> 
			<param name="voxel_probes"> 1 to enable light baking for voxel probes; otherwise, 0. </param>
			<param name="env_probes"> 1 to enable light baking for environment probes; otherwise, 0. </param>
			<param name="shadow"> 1 to enable shadow baking for light sources in static light mode; otherwise, 0. </param>
			<param name="lightmap"> 1 to enable lightmaps baking for surfaces of Mesh Static objects; otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.isBaking const">
			<summary>
			Returns a value indicating if the process of baking is being performed at the moment.
			</summary>  
			<returns>1 if lighting is being baked; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getCurrentBounce const">
			<summary>
			Returns a bounce being calculated at the moment.					If the process of baking is not being performed at the moment, 1 is returned.
			</summary>  
			<returns>Bounce number.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getBounces const">
			<summary>
			Returns number of all bounces.
			</summary>  
			<returns>Number of bounces.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getProgress const">
			<summary>
			Returns overall progress of light baking.					If the process of baking is not being performed at the moment, 0 is returned.
			</summary>  
			<returns>Overall baking progress, in percents.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getProgressBounce const">
			<summary>
			Returns a value showing progress of calculating current bounce.
			</summary>  
			<returns>Bounce calculating progress, in percents.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getVoxelSizeMultiplier const">
			<summary>
			Returns the value of the voxel size multiplier parameter. By default, it is equal to 1.0f.
			</summary>  
			<returns>Voxel size multiplier.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setBounces(int)">
			<summary>
			Sets number of bounces.
			</summary> 
			<param name="bounces"> Number of bounces within the [1, 32] range. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getProgressLight const">
			<summary>
			Returns progress of light baking for the current LightVoxelProbe at the moment.
			</summary>  
			<returns>LightVoxelProbe progress, in percents.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getTimer const">
			<summary>
			Returns the time elapsed from the start of the process of baking.
			</summary>  
			<returns>Elapsed time, in seconds.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setVoxelSizeMultiplier(float)">
			<summary>
			Sets the value of the voxel size multiplier parameter.
			</summary> 
			<param name="multiplier"> Voxel size multiplier within the [0.0f, 8.0f] range. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.stop(bool)">
			<summary>
			Interrupts the process of light baking, if it is in performing state.
			</summary> 
			<param name="save_results"> 1 to save the obtained result; 0 to restore the previous content. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getCurrentLight const">
			<summary>
			Returns an instance of the LightVoxelProbe being calculated at the moment.
			</summary>  
			<returns>Current LightVoxelProbe.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.addReadOnlyTexture(Unigine.UGUID)">
			<summary>
			Adds a read-only texture with the specified GUID.
			</summary> 
			<param name="guid"> GUID of the read-only texture to be added. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.removeReadOnlyTexture(Unigine.UGUID)">
			<summary>
			Removes the read-only texture with the specified GUID.
			</summary> 
			<param name="guid"> GUID of the read-only texture to be removed. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.setSamplesPerFrame(int)">
			<summary>
			Sets number of voxels for voxel probes and samples for environment probes, light sources and surfaces computed and visualized per single frame.
			</summary> 
			<param name="frame"> Number of samples per frame within the [1, 500] range. The default value is 1.High values cause longer user interface response. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getSamplesPerFrame const">
			<summary>
			Returns number of voxels for voxel probes and samples for environment probes, light sources and surfaces computed and visualized per single frame.
			</summary>  
			<returns>Number of samples.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setLightmapQuality(BakeLighting::LIGHTMAP_QUALITY)">
			<summary>
			Sets the global baking quality for lightmaps.
			</summary> 
			<param name="quality"> One of LIGHTMAP_QUALITY values. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getLightmapQuality const">
			<summary>
			Returns the current global baking quality for lightmaps.
			</summary>  
			<returns>LIGHTMAP_QUALITY preset.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setLightmapViewportMask(int)">
			<summary>
			Sets the viewport mask for the lightmapper. For a light or surface to contribute to static GI, their viewport masks should match the baking viewport mask.
			</summary> 
			<param name="mask"> Viewport mask (integer, each bit of which is used to represent a mask). </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getLightmapViewportMask const">
			<summary>
			Returns the current viewport mask set for lightmapper.
			</summary>  
			<returns>Viewport mask (integer, each bit of which is used to represent a mask).</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setLightmapZFar(float)">
			<summary>
			Sets the far clipping distance for light rays used when baking lightmaps.
			</summary> 
			<param name="zfar"> Far clipping distance. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getLightmapZFar const">
			<summary>
			Returns the far clipping distance for light rays.
			</summary>  
			<returns>Far clipping distance.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.setCacheDir(char)">
			<summary>
			Sets the path to the directory that stores temporary cache textures during lightmaps baking process. By default, the bin/unigine_bake_lighting_cache project's folder is set.It is recommended to specify a path to a non-existing folder to avoid losing files.
			</summary> 
			<param name="dir"> An absolute path or a relative path to the bin folder. </param> 
		</member>
		<member name="M:Unigine.BakeLighting.getCacheDir const">
			<summary>
			Returns the current path set for the directory that stores temporary cache textures during lightmaps baking process. By default, the bin/unigine_bake_lighting_cache project's folder is set.
			</summary>  
			<returns>Path to the cache folder.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getCurrentObject const">
			<summary>
			Returns the object currently being processed when baking lightmaps.
			</summary>  
			<returns>Object pointer during lightmaps baking; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.BakeLighting.getCurrentSurface const">
			<summary>
			Returns the index of the surface currently being processed when baking lightmaps.
			</summary>  
			<returns>Index of the surface during lightmaps baking; otherwise, -1.</returns>
		</member>
		<member name="F:Unigine.BakeLighting.LIGHTMAP_QUALITY_ULTRA">
			<summary>
			Ultra baking quality. Might be useful to get rid of even small inconsistencies. Intended for the release production.
		</summary>
		</member>
		<member name="F:Unigine.BakeLighting.LIGHTMAP_QUALITY_HIGH">
			<summary>
			Ultra baking quality. Corresponds to high sampling quality and number of light rays simulated intended for release production.
		</summary>
		</member>
		<member name="F:Unigine.BakeLighting.LIGHTMAP_QUALITY_MEDIUM">
			<summary>
			Ultra baking quality. Corresponds to stable quality level which is good for most cases.
		</summary>
		</member>
		<member name="F:Unigine.BakeLighting.LIGHTMAP_QUALITY_LOW">
			<summary>
			Ultra baking quality. Provides low sampling quality and number of light rays.
		</summary>
		</member>
		<member name="F:Unigine.BakeLighting.LIGHTMAP_QUALITY_DRAFT">
			<summary>
			Ultra baking quality. Provides the highest iterativity with the lowest sampling quality and number of rays.
		</summary>
		</member>
		<member name="M:Unigine.Render.beginDebugGroup(char)">
			<summary>
			Starts a GPU debug group with a specified name in Microprofiler.
			</summary> 
			<param name="name"> Name of debug group. </param> 
		</member>
		<member name="M:Unigine.Render.endDebugGroup">
			<summary>
			Ends a GPU debug group previously started via the beginDebugGroup() method.
			</summary>  
		</member>
		<member name="M:Unigine.Render.getMaxTextureBufferSize">
			<summary>
			Returns the maximum size of the texture buffer.
			</summary>  
			<returns>Maximum size of the texture buffer.</returns>
		</member>
		<member name="M:Unigine.Render.setAlphaFade(bool)">
			<summary>
			Enables or disables alpha-blend fading (dithering) for objects. Enabling the feature allows for objects LODs to be smoothly blended into each other over a fade distance.
			</summary> 
			<param name="fade"> 1 to enable alpha fading (dithering) for objects, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isAlphaFade const">
			<summary>
			Returns a value indicating if alpha-blend fading (dithering) is enabled for objects. When the feature is enabled, objects LODs are smoothly blended into each other over a fade distance.
			</summary>  
			<returns>1 if alpha fading is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setAnimationLeaf(float)">
			<summary>
								Sets the global scale for rotation angle of vegetation leaves.
			</summary> 
			<param name="leaf"> Global leaf rotation angle. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Render.getAnimationLeaf const">
			<summary>
								Returns the current scale for rotation angle of vegetation leaves.
			</summary>  
			<returns>Global leaf rotation angle.</returns>
		</member>
		<member name="M:Unigine.Render.getAnimationOldTime const">
			<summary>
			Returns the previous render animation time for vegetation.
			</summary>  
			<returns>Animation time in milliseconds.</returns>
		</member>
		<member name="M:Unigine.Render.setAnimationScale(float)">
			<summary>
								Sets the global scale for rotation speed of vegetation leaves.
			</summary> 
			<param name="scale"> Global leaf rotation speed. </param> 
		</member>
		<member name="M:Unigine.Render.getAnimationScale const">
			<summary>
								Returns the current global scale for rotation speed of vegetation leaves.
			</summary>  
			<returns>Global leaf rotation speed.</returns>
		</member>
		<member name="M:Unigine.Render.setAnimationStem(float)">
			<summary>
								Sets the global scale for movement amplitude of vegetation stems.
			</summary> 
			<param name="stem"> Global stem amplitude scale. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Render.getAnimationStem const">
			<summary>
								Returns the current global scale for movement amplitude of vegetation stems.
			</summary>  
			<returns>Global stem amplitude scale.</returns>
		</member>
		<member name="M:Unigine.Render.setAnimationTime(float)">
			<summary>
			Sets the render animation time for vegetation.
			</summary> 
			<param name="time"> Animation time in milliseconds. </param> 
		</member>
		<member name="M:Unigine.Render.getAnimationTime const">
			<summary>
			Returns the render animation time for vegetation.
			</summary>  
			<returns>Animation time in milliseconds.</returns>
		</member>
		<member name="M:Unigine.Render.setAnimationWind(Unigine.Math.vec3)">
			<summary>
			Sets the direction of wind for all vegetation (grass and trees). It is a multiplier for the stem offset (in grass, stem and leaves materials).
			</summary> 
			<param name="wind"> Offset for vegetation under wind by X, Y and Z axes. </param> 
		</member>
		<member name="M:Unigine.Render.getAnimationWind const">
			<summary>
			Returns the current direction of wind for all vegetation (grass and trees). It is a multiplier for the stem offset (in grass, stem and leaves materials).
			</summary>  
			<returns>Offset for vegetation under wind by X, Y and Z axes.</returns>
		</member>
		<member name="M:Unigine.Render.setBorder(Unigine.Math.vec2)">
			<summary>
			Sets width and height of the image border (in pixels), to be rendered outside the horizontal bounds of the screen to reduce artefacts of post effects.
			</summary> 
			<param name="border"> Vector with components representing border sizes: X - width, Y - height. </param> 
		</member>
		<member name="M:Unigine.Render.getBorder const">
			<summary>
			Returns current width and height of the image border (in pixels), to be rendered outside the horizontal bounds of the screen to reduce artefacts of post effects.
			</summary>  
			<returns>Vector with components representing border sizes: X - width, Y - height.</returns>
		</member>
		<member name="M:Unigine.Render.getAPI const">
			<summary>
			Returns the current Graphics API, or API_UNKNOWN if API cannot be identified.
			</summary>  
			<returns>The Graphics API flag (see API_* variables).</returns>
		</member>
		<member name="M:Unigine.Render.setAuxiliary(bool)">
			<summary>
			Enables or disables the auxiliary render buffer usage. The buffer should be enabled for render and post post-processes to work.
			</summary> 
			<param name="auxiliary"> 1 to use the auxiliary buffer, 0 not to use. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isAuxiliary const">
			<summary>
			Returns a value indicating if auxiliary render buffer is used. The buffer should be enabled for render and post post-processes to work.
			</summary>  
			<returns>1 if the auxiliary buffer is used; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setBackgroundColor(Unigine.Math.vec4)">
			<summary>
			Sets the background color by using given vector.
			</summary> 
			<param name="color"> A background color vector. </param> 
		</member>
		<member name="M:Unigine.Render.getBackgroundColor const">
			<summary>
			Returns the background color vector.
			</summary>  
			<returns>A background color vector.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalRayTracing(bool)">
			<summary>
			Enables or disables ray-traced bent normals calculation. The use of SSRTGI for bent normals allows for smooth ambient lighting.					Ray-traced bent normals calculation available only when the SSRTGI technique is enabled.
			</summary> 
			<param name="tracing"> 1 to enable ray-traced bent normals calculation, 0 to disable. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isBentNormalRayTracing const">
			<summary>
			Returns a value indicating if ray-traced bent normals calculation is enabled. The use of SSRTGI for bent normals allows for smooth ambient lighting.					Ray-traced bent normals calculation available only when the SSRTGI technique is enabled.
			</summary>  
			<returns>1 if ray-traced bent normals calculation is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalFixOverlitAreas(bool)">
			<summary>
			Enables or disables correction of overlit areas for bent normals calculation.																		This option may significantly affect performance, so disable it when it's not necessary.							Ray-traced bent normals calculation available only when the SSRTGI technique is enabled.											Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="areas"> 1 to enable correction of overlit areas for bent normals calculation, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isBentNormalFixOverlitAreas const">
			<summary>
			Returns a value indicating if correction of overlit areas for bent normals calculation is enabled.																		This option may significantly affect performance, so disable it when it's not necessary.							Ray-traced bent normals calculation available only when the SSRTGI technique is enabled.
			</summary>  
			<returns>1 if correction of overlit areas for bent normals calculation is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalRayTracingDenoise(bool)">
			<summary>
			Enables or disables noise reduction for ray-traced bent normals calculation. This option reduces noise by using the blur effect.					Ray-traced bent normals calculation available only when the SSRTGI technique is enabled.
			</summary> 
			<param name="denoise"> 1 to enable noise reduction for ray-traced bent normals calculation, 0 to disable. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isBentNormalRayTracingDenoise const">
			<summary>
			Returns a value indicating if noise reduction for ray-traced bent normals calculation is enabled. This option reduces noise by using blur effect.					Ray-traced bent normals calculation available only when the SSRTGI technique is enabled.
			</summary>  
			<returns>1 if noise reduction for ray-traced bent normals calculation is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalRayTracingThreshold(float)">
			<summary>
			Sets the threshold value for the ray-traced bent normals calculation.					Ray-traced bent normals calculation available only when the SSRTGI technique is enabled.
			</summary> 
			<param name="threshold"> Bent normals ray tracing threshold value. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getBentNormalRayTracingThreshold const">
			<summary>
			Returns the current threshold value for the ray-traced bent normals calculation.					Ray-traced bent normals calculation available only when the SSRTGI technique is enabled.
			</summary>  
			<returns>Bent normal ray tracing threshold value. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.getBlack2DArrayTexture const">
			<summary>
			Returns black 2D array texture.
			</summary>  
			<returns>Black 2D array texture.</returns>
		</member>
		<member name="M:Unigine.Render.getBlack2DTexture const">
			<summary>
			Returns black 2D texture.
			</summary>  
			<returns>Black 2D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getBlack3DTexture const">
			<summary>
			Returns black 3D texture.
			</summary>  
			<returns>Black 3D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getBlackCubeTexture const">
			<summary>
			Returns black Cube texture.
			</summary>  
			<returns>Black Cube texture.</returns>
		</member>
		<member name="M:Unigine.Render.setBloom(bool)">
			<summary>
			Enables or disables the bloom effect.
			</summary> 
			<param name="bloom"> 1 value to enable the bloom effect, 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Render.isBloom const">
			<summary>
			Returns a value indicating if the bloom effect is enabled.
			</summary>  
			<returns>1 if the bloom effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setBloomPasses(int)">
			<summary>
			Sets the number of passes for the bloom effect. During the pass a bloom texture is generating. Up to 8 bloom textures can be generated: each texture has lower resolution (original size, original size /2, original size /4, so forth) with bloom effect. After that, all these bloom textures with the different resolution are composed for the final bloom texture.
			</summary> 
			<param name="passes"> Number of bloom passes. The default value is 8. The higher the value the smoother is the effect. However, this option significantly affects performance. </param> 
		</member>
		<member name="M:Unigine.Render.getBloomPasses const">
			<summary>
			Returns the current number of passes for the bloom effect. During the pass a bloom texture is generating. Up to 8 bloom textures can be generated: each texture has lower resolution (original size, original size /2, original size /4, so forth) with bloom effect. After that, all these bloom textures with the different resolution are composed for the final bloom texture.
			</summary>  
			<returns>Number of bloom passes.</returns>
		</member>
		<member name="M:Unigine.Render.setBloomPower(float)">
			<summary>
			Sets the power of the bloom effect.											At the minimum value of 0.0f, the bloom effect is blurred.						At the maximum value of 1.0f, the bloom effect is more contrast.
			</summary> 
			<param name="power"> Bloom power value within the [0.0f; 1.0f] range. The default value is 0.7f. </param> 
		</member>
		<member name="M:Unigine.Render.getBloomPower const">
			<summary>
			Returns the power of the bloom effect.											At the minimum value of 0.0f, the bloom effect is blurred.						At the maximum value of 1.0f, the bloom effect is more contrast.
			</summary>  
			<returns>Bloom power value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.Render.setBloomResolution(int)">
			<summary>
			Sets the resolution of the bloom effect.
			</summary> 
			<param name="resolution"> Resolution of the bloom effect:0 - quarter resolution.1 - half resolution (by default).2 - full resolution. </param> 
		</member>
		<member name="M:Unigine.Render.getBloomResolution const">
			<summary>
			Returns the current resolution of the bloom effect.
			</summary>  
			<returns>Resolution of the bloom effect:0 - quarter resolution.1 - half resolution (by default).2 - full resolution.</returns>
		</member>
		<member name="M:Unigine.Render.setBloomScale(float)">
			<summary>
			Sets the scale of the bloom effect.
			</summary> 
			<param name="scale"> Bloom scale value within the [0.0f; 1.0f] range. The default value is 0.3f. </param> 
		</member>
		<member name="M:Unigine.Render.getBloomScale const">
			<summary>
			Returns the scale of the bloom effect.
			</summary>  
			<returns>Bloom scale value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.Render.setBudget(float)">
			<summary>
			Sets the render budget value, which limits the number of loaded/created graphics resources during a frame according to loading/creation time.
			</summary> 
			<param name="budget"> Budget value in seconds. The default value is 1/60. </param> 
		</member>
		<member name="M:Unigine.Render.getBudget const">
			<summary>
			Returns current render budget value, which limits the number of loaded/created graphics resources during a frame according to loading/creation time.
			</summary>  
			<returns>Budget value in seconds. The default value is 1/60.</returns>
		</member>
		<member name="M:Unigine.Render.setCameraEffectsThreshold(float)">
			<summary>
			Sets the threshold, which is used to detect if an object should be blurred in the HDR mode.
			</summary> 
			<param name="threshold"> HDR threshold. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Render.getCameraEffectsThreshold const">
			<summary>
			Returns the brightness threshold, which is used to detect if an object should be blurred in the HDR mode.
			</summary>  
			<returns>HDR threshold.</returns>
		</member>
		<member name="M:Unigine.Render.setClearBufferMask(int)">
			<summary>
			Sets the buffer cleanup mask. This mask determines which buffers are to be cleared next time the Engine::render() is called. Thus, you can determine the contents of which buffers is to be kept, avoiding situations, when necessary data is cleared.
			</summary> 
			<param name="mask"> Buffer mask: one of the RenderState::BUFFER_* variables. </param> 
		</member>
		<member name="M:Unigine.Render.getClearBufferMask const">
			<summary>
			Returns current buffer cleanup mask. This mask determines which buffers are to be cleared next time the Engine::render() is called. This method can be used to save current buffer cleanup mask to restore it later.
			</summary>  
			<returns>Buffer mask: one of the RenderState::BUFFER_* variables.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudDistortionTexture(int)">
			<summary>
			Sets a value indicating which texture type is to be used for clouds distortion.
			</summary> 
			<param name="texture"> One of the following values:0 - 2D Texture - more performance-friendly, but may cause an excessive vertical extrusion of clouds.1 - 3D Texture — ensures homogeneous detail distortion and better image quality, but at a higher performance cost. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudDistortionTexture const">
			<summary>
			Returns a value indicating which texture type is currently used for clouds distortion.
			</summary>  
			<returns>One of the following values:0 - 2D Texture - more performance-friendly, but may cause an excessive vertical extrusion of clouds.1 - 3D Texture — ensures homogeneous detail distortion and better image quality, but at a higher performance cost.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsAccurateLayersSorting(bool)">
			<summary>
			Sets a value indicating if correct sorting of intersecting cloud layers is enabled.
			</summary> 
			<param name="sorting"> true to enable correct sorting of intersecting cloud layers, false to disable it. The default value is false. </param> 
		</member>
		<member name="M:Unigine.Render.isCloudsAccurateLayersSorting const">
			<summary>
			Returns a value indicating if correct sorting of intersecting cloud layers is enabled. Enabling this feature may reduce raymarching quality as samples shall be distributed among all layers.
			</summary>  
			<returns>true if rendering of shadows from the clouds on the ground is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsStepAccuracy(float)">
			<summary>
			Sets the accuracy of ray marching steps. This parameter enables you to improve the visual look of clouds when viewed from inside a cloud layer. It reduces the noise of lighting and clouds shape for long ray marching distances, adds some noise-based blur to a sharp border at the bottom sphere of the cloud layer (rounded) and removes popping effect when leaving a rounded cloud layer.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="accuracy"> New accuracy of ray marching steps to be set in the [0.0f; 1.0f] range. Lower numbers gain more performance. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsStepAccuracy const">
			<summary>
			Returns the current accuracy of ray marching steps. This parameter enables you to improve the visual look of clouds when viewed from inside a cloud layer.
			</summary>  
			<returns>Current accuracy of ray marching steps in the [0.0f; 1.0f] range. The default value is 0.5f.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsDepthBasedReconstruction(bool)">
			<summary>
			Sets a value indicating if clouds ray-marched depth is to be used for upsampling the downsampled clouds without obscuring the geometry and reprojection depending on the cloud depth. Recommended for flying through clouds. 					Works only with clouds domnsampling rendering mode is set to half and/or clouds interleaved rendering mode is set to 2x2.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="reconstruction"> true to enable using clouds ray-marched depth for upsampling the downsampled clouds without obscuring the geometry and reprojection depending on the cloud depth; false - to disable. </param> 
		</member>
		<member name="M:Unigine.Render.isCloudsDepthBasedReconstruction const">
			<summary>
			Returns a value indicating if clouds ray-marched depth is used for upsampling the downsampled clouds without obscuring the geometry and reprojection depending on the cloud depth. Recommended for flying through clouds. 					Works only with clouds domnsampling rendering mode is set to half and/or clouds interleaved rendering mode is set to 2x2.
			</summary>  
			<returns>true if clouds ray-marched depth is used for upsampling the downsampled clouds without obscuring the geometry and reprojection depending on the cloud depth; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsDepthBasedReconstructionThreshold(float)">
			<summary>
			Sets depth threshold value for clouds depth-based reconstruction mode. This value defines the depth difference starting from which pixels are considered to be related to different surfaces.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> New depth threshold value to be set for clouds depth-based reconstruction mode. The default value is 100.0f </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsDepthBasedReconstructionThreshold const">
			<summary>
			Returnns the current depth threshold value for clouds depth-based reconstruction mode. This value defines the depth difference starting from which pixels are considered to be related to different surfaces.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current depth threshold value for clouds depth-based reconstruction mode. The default value is 100.0f</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsDownsamplingRendering(int)">
			<summary>
			Sets downsampling rendering for clouds. This parameter determines clouds resolution based on current screen resolution. It has a significant impact on performance.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="rendering"> One of the following values:0 - full.1 - half (by default).2 - quarter. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsDownsamplingRendering const">
			<summary>
			Returns current downsampling rendering setting for clouds. This parameter determines clouds resolution based on current screen resolution. It has a significant impact on performance.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>One of the following values:0 - full.1 - half (by default).2 - quarter.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsDynamicCoverageArea(float)">
			<summary>
			Sets dynamic coverage area for clouds. This parameter determines visibility distance for coverage of FieldWeather objects.					Increasing dynamic coverage area leads to reduction of quality of FieldWeather coverage texture and loss of details. This effect can be mitigated by increasing dynamic coverage resolution using setCloudsDynamicCoverageResolution() method.
			</summary> 
			<param name="area"> Dynamic coverage area, in units. The default value is 10 000. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsDynamicCoverageArea const">
			<summary>
			Returns current dynamic coverage area for clouds. This parameter determines visibility distance for coverage of FieldWeather objects.
			</summary>  
			<returns>Dynamic coverage area, in units.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsDynamicCoverageResolution(int)">
			<summary>
			Sets dynamic coverage resolution for clouds. This parameter determines the quality of dynamic coverage texture for FieldWeather objects. Higher values make it possible to preserve texture details at high distances.					Increased resolution significantly affects performance.
			</summary> 
			<param name="resolution"> One of the following values:0 - 128 x 128.1 - 256 x 256 (by default).2 - 512 x 512.3 - 1024 x 1024.4 - 2048 x 2048. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsDynamicCoverageResolution const">
			<summary>
			Returns current dynamic coverage resolution setting for clouds. This parameter determines the quality of dynamic coverage texture for FieldWeather objects. Higher values make it possible to preserve texture details at high distances.
			</summary>  
			<returns>One of the following values:0 - 128 x 128.1 - 256 x 256 (by default).2 - 512 x 512.3 - 1024 x 1024.4 - 2048 x 2048.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsGroundShadows(bool)">
			<summary>
			Enables or disables rendering of shadows from the clouds on the ground.
			</summary> 
			<param name="shadows"> true to enable rendering of shadows from the clouds on the ground, false to disable it. The default value is true. </param> 
		</member>
		<member name="M:Unigine.Render.isCloudsGroundShadows const">
			<summary>
			Returns a value indicating if rendering of shadows from the clouds on the ground is enabled.
			</summary>  
			<returns>true if rendering of shadows from the clouds on the ground is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsInterleavedRendering(int)">
			<summary>
			Enables or disables interleaved rendering mode for clouds.					In cases when clouds are viewed from the ground, or from above (at significant distance) and viewer's velocities are less than 200 units per second, this parameter can be used to provide a significant gain in performance.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="rendering"> Interleaved rendering mode for clouds:0 - disabled (by default).1 - 2 x 2.2 - 4 x 4.3 - 8 x 8. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsInterleavedRendering const">
			<summary>
			Returns the value indicating current interleaved rendering mode for clouds. This feature can be used to gain performance when enabled. See getCloudsInterleavedRendering().
			</summary>  
			<returns>One of the following values:0 - disabled (by default).1 - 2 x 2.2 - 4 x 4.3 - 8 x 8.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsInterleavedRenderingTemporal(bool)">
			<summary>
			Sets a value indicating if temporal accumulation of noises for interleaved sampling for clouds is enabled.					Works only when clouds interleaved rendering mode set to 2x2.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="temporal"> true to enable temporal accumulation of noises for interleaved sampling for clouds; false - to disable. </param> 
		</member>
		<member name="M:Unigine.Render.isCloudsInterleavedRenderingTemporal const">
			<summary>
			Returns a value indicating if temporal accumulation of noises for interleaved sampling for clouds is enabled.						Works only when clouds interleaved rendering mode set to 2x2.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>true if temporal accumulation of noises for interleaved sampling for clouds is enabled; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsLightingConeRadius(float)">
			<summary>
			Sets lighting cone sampling radius for clouds lighting.					Low values may result in unnatural behavior as the position of the sun changes.
			</summary> 
			<param name="radius"> Lighting cone radius in range [0.0f; 1.0f]. The default value is 0.3. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsLightingConeRadius const">
			<summary>
			Returns the current lighting cone sampling radius for clouds lighting.
			</summary>  
			<returns>Lighting cone radius in range [0.0f; 1.0f].</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsLightingQuality(int)">
			<summary>
			Sets lighting quality for clouds. This parameter determines the number of samples used to calculate lighting for clouds.					This parameter has a significant impact on performance. Therefore, it is recommended to use low settings, when possible.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="quality"> One of the following values:0 - 1 sample, low quality.1 - 3 samples, medium quality (by default).2 - 5 samples, high quality.3 - 6 samples, ultra quality. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsLightingQuality const">
			<summary>
			Returns the current lighting quality setting for clouds. This parameter determines the number of samples used to calculate lighting for clouds.
			</summary>  
			<returns>One of the following values:0 - 1 sample, low quality.1 - 3 samples, medium quality (by default).2 - 5 samples, high quality.3 - 6 samples, ultra quality.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsLightingTraceLength(float)">
			<summary>
			Sets the lighting trace length for clouds. This parameter determines the maximum length of a sun ray inside a cloud.
			</summary> 
			<param name="length"> Lighting trace length in range [1.0f; 2048.0f], in units. The default value is 230.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsLightingTraceLength const">
			<summary>
			Returns the current lighting trace length for clouds. This parameter determines the maximum length of a sun ray inside a cloud.
			</summary>  
			<returns>Lighting trace length, in units.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsNoiseIterations(float)">
			<summary>
			Sets the value of the noise iterations parameter for clouds. This parameter determines the amount of jitter, that is used to reduce banding effect due to insufficient number of steps.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="iterations"> New value of the noise iterations parameter for clouds. The default value is 0.1f. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsNoiseIterations const">
			<summary>
			Returns the current value of the noise iterations parameter for the clouds. This parameter determines the amount of jitter, that is used to reduce banding effect due to insufficient number of steps.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current value of the noise iterations parameter for clouds. The default value is 0.1f.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsNoiseLighting(float)">
			<summary>
			Sets the value of the noise lighting parameter for clouds. This parameter determines the amount of jitter for tracing steps of lighting calculation, that is used to reduce banding effect due to insufficient number of steps.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="lighting"> New value of the noise lighting parameter for clouds. The default value is 0.3f. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsNoiseLighting const">
			<summary>
			Returns the current value of the noise lighting parameter for the clouds. This parameter determines the amount of jitter for tracing steps of lighting calculation, that is used to reduce banding effect due to insufficient number of steps.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current value of the noise lighting parameter for clouds. The default value is 0.3f.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsNoiseStep(float)">
			<summary>
			Sets the value of the noise step parameter for clouds. This parameter determines the amount of jitter in the areas within clouds, that is used to reduce banding effect due to insufficient number of steps.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="step"> New value of the noise step parameter for clouds. The default value is 0.3f. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsNoiseStep const">
			<summary>
			Returns the current value of the noise step parameter for clouds. This parameter determines the amount of jitter in the areas within clouds, that is used to reduce banding effect due to insufficient number of steps.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current value of the noise step parameter for clouds. The default value is 0.3f.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsNoiseStepSkip(float)">
			<summary>
			Sets the value of the noise step skip parameter for clouds. This parameter determines the amount of jitter in the areas between clouds, that is used to reduce banding effect due to insufficient number of steps.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="skip"> New value of the noise step skip parameter for clouds. The default value is 0.3f. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsNoiseStepSkip const">
			<summary>
			Returns the current value of the noise step skip parameter for clouds. This parameter determines the amount of jitter in the areas between clouds, that is used to reduce banding effect due to insufficient number of steps.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current value of the noise step skip parameter for clouds. The default value is 0.3f.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsSamplesCount(int)">
			<summary>
			Sets the number of samples used for clouds rendering. The higher the value, the less noise in clouds rendering.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="count"> Number of samples:0 - low.1 - medium.2 - high (by default).3 - ultra. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsSamplesCount const">
			<summary>
			Returns the current number of samples used for clouds rendering. The higher the value, the less noise in clouds rendering.
			</summary>  
			<returns>One of the following values:0 - low.1 - medium.2 - high (by default).3 - ultra.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsSamplingQuality(int)">
			<summary>
			Sets sampling quality for clouds. This parameter sets the number of noise samples that affects the cloud shape processing quality. The higher the value, the less visual artifacts.					Visual difference between low and ultra quality is not significant. Therefore, it is recommended to use low settings, when possible, to gain performance.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="quality"> Sampling quality:0 - low quality (higher cloud density).1 - medium quality (by default).2 - high quality.3 - ultra quality (lower density, the clouds are softer). </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsSamplingQuality const">
			<summary>
			Returns the current sampling quality set for clouds. This parameter sets the number of noise samples that affects the cloud shape processing quality. The higher the value, the less visual artifacts.
			</summary>  
			<returns>Sampling quality:0 - low quality (higher cloud density).1 - medium quality (by default).2 - high quality.3 - ultra quality (lower density, the clouds are softer).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsSoftIntersection(float)">
			<summary>
			Sets the soft intersection distance for clouds.
			</summary> 
			<param name="intersection"> Soft intersection distance (in meters) within the [0.0f; 100000.0f] range. The default value is 100.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsSoftIntersection const">
			<summary>
			Returns the current soft intersection distance for clouds.
			</summary>  
			<returns>Soft intersection distance for clouds, in meters.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsTransparentOrder(int)">
			<summary>
			Sets rendering order for clouds relative to transparent objects (except water).
			</summary> 
			<param name="order"> Rendering order for clouds relative to transparent objects (except water) to be set. One of the following values:0 - render clouds before all transparent objects.1 - render clouds after all transparent objects.2 - enable rough sorting for transparent objects relative to clouds (below the lowest cloud layer base -&gt; inside the clouds -&gt; above the highest cloud layer top) </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsTransparentOrder const">
			<summary>
			Returns the current rendering order for clouds relative to transparent objects (except water).
			</summary>  
			<returns>Current rendering order for clouds relative to transparent objects (except water). One of the following values:0 - render clouds before all transparent objects.1 - render clouds after all transparent objects.2 - enable rough sorting for transparent objects relative to clouds (below the lowest cloud layer base -&gt; inside the clouds -&gt; above the highest cloud layer top)</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsQualityPreset(int)">
			<summary>
			Sets the Qlouds Quality preset as currently used.
			</summary> 
			<param name="preset"> Qlouds Quality preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsQualityPreset const">
			<summary>
			Returns the index of a currently set Qlouds Quality preset.
			</summary>  
			<returns>Bent Normal preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getCloudsQualityPresetNumNames const">
			<summary>
			Returns the number of Qlouds Quality presets.
			</summary>  
			<returns>Quantity of Qlouds Quality presets.</returns>
		</member>
		<member name="M:Unigine.Render.getCloudsQualityPresetName(int)">
			<summary>
			Returns the Qlouds Quality preset name by given index.
			</summary> 
			<param name="num"> Qlouds Quality preset index. </param> 
			<returns>Qlouds Quality preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsLightingSamplesDistribution(float)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Render.getCloudsLightingSamplesDistribution const">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Render.setClouds3dTextureHorizontalResolution(int)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Render.getClouds3dTextureHorizontalResolution const">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Render.setClouds3dTextureVerticalResolution(int)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Render.getClouds3dTextureVerticalResolution const">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Render.setColorCorrectionBrightness(float)">
			<summary>
			Sets the current brightness of the scene.
			</summary> 
			<param name="brightness"> Brightness. The provided value is saturated in the range [-1.0f; 1.0f]. </param> 
		</member>
		<member name="M:Unigine.Render.getColorCorrectionBrightness const">
			<summary>
			Returns the current overall brightness of the scene.
			</summary>  
			<returns>Current brightness.</returns>
		</member>
		<member name="M:Unigine.Render.setColorCorrectionContrast(float)">
			<summary>
			Sets the current contrast of the scene.
			</summary> 
			<param name="contrast"> Contrast. The provided value is saturated in the range [-1.0f; 1.0f]. </param> 
		</member>
		<member name="M:Unigine.Render.getColorCorrectionContrast const">
			<summary>
			Returns the current overall contrast of the scene.
			</summary>  
			<returns>Current contrast.</returns>
		</member>
		<member name="M:Unigine.Render.setColorCorrectionGamma(float)">
			<summary>
			Sets the current gamma of the scene.
			</summary> 
			<param name="gamma"> Gamma. The provided value is saturated in the range [0.5f; 1.5f]. </param> 
		</member>
		<member name="M:Unigine.Render.getColorCorrectionGamma const">
			<summary>
			Returns the current overall gamma of the scene.
			</summary>  
			<returns>Current gamma.</returns>
		</member>
		<member name="M:Unigine.Render.setColorCorrectionLUTImage(Unigine.Ptr{Unigine.Image})">
			<summary>
			Sets a new color transformation image (LUT). This function resets a LUT texture name to null if it has been previously set via setColorCorrectionLUTPath().
			</summary> 
			<param name="image"> Color transformation image. </param> 
			<returns>1 if the image is set successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.getColorCorrectionLUTImage(Unigine.Ptr{Unigine.Image}) const">
			<summary>
			Return the current color transformation image (LUT).
			</summary> 
			<param name="image"> Image to store the color transformation texture in. </param> 
			<returns>1 if an image is successfully received; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setColorCorrectionLUTPath(char)">
			<summary>
			Sets the name of a new color transformation texture (LUT).
			</summary> 
			<param name="path"> Name of the file with the texture. If NULL (0) is passed, the texture is cleared. </param> 
			<returns>1 if the texture is set or cleared successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.getColorCorrectionLUTPath const">
			<summary>
			Returns the name of the current color transformation texture (LUT).
			</summary>  
			<returns>Name of the current color transformation texture.</returns>
		</member>
		<member name="M:Unigine.Render.getColorCorrectionCurve const">
			<summary>
			Returns the current Color Correction curve texture.
			</summary>  
			<returns>An instance of the TextureCurve class with 4 channels:Channels 0, 1, 2 - the Red, Green and Blue channels of the Color Correction curve. Channel 3 - the Saturation Correction curve. </returns>
		</member>
		<member name="M:Unigine.Render.resetColorCorrectionCurve">
			<summary>
			Resets the Color Correction curve to the default value.
			</summary>  
		</member>
		<member name="M:Unigine.Render.resetColorCorrectionSaturationCurve">
			<summary>
			Resets the Saturation Correction curve to the default value.
			</summary>  
		</member>
		<member name="M:Unigine.Render.setColorCorrectionSaturation(Palette)">
			<summary>
			Sets the current saturation adjustment values.
			</summary> 
			<param name="saturation"> A set of color values in a Palette structure. </param> 
		</member>
		<member name="M:Unigine.Render.getColorCorrectionSaturation const">
			<summary>
			Returns the current saturation adjustment values.
			</summary>  
			<returns>A Palette structure.</returns>
		</member>
		<member name="M:Unigine.Render.setColorCorrectionPreserveSaturation(bool)">
			<summary>
			Sets a value indicating if initial scene color saturation is to be preserved after applying color correction.
			</summary> 
			<param name="saturation"> true to preserve initial scene color saturation after applying color correction; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.Render.isColorCorrectionPreserveSaturation const">
			<summary>
			Returns a value indicating if initial scene color saturation is to be preserved after applying color correction.
			</summary>  
			<returns>true if initial scene color saturation is to be preserved after applying color correction; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setColorCorrectionHueShift(Palette)">
			<summary>
			Sets the current hue adjustment values.
			</summary> 
			<param name="shift"> A set of color values in a Palette structure. </param> 
		</member>
		<member name="M:Unigine.Render.getColorCorrectionHueShift const">
			<summary>
			Returns the current hue adjustment values.
			</summary>  
			<returns>A Palette structure.</returns>
		</member>
		<member name="M:Unigine.Render.setColorCorrectionWhite(Unigine.Math.vec4)">
			<summary>
			Sets the current white balance of the scene.
			</summary> 
			<param name="white"> White balance. The provided value is saturated in the range [vec4_epsilon;vec4_one]. </param> 
		</member>
		<member name="M:Unigine.Render.getColorCorrectionWhite const">
			<summary>
			Returns the current white balance of the scene.
			</summary>  
			<returns>Current white balance.</returns>
		</member>
		<member name="M:Unigine.Render.setCompositeMaterial(char)">
			<summary>
			Sets a custom composite material that specifies a custom shader used for the final composition of the full-screen image instead of the default one.
			</summary> 
			<param name="material"> Composite material name. </param> 
		</member>
		<member name="M:Unigine.Render.getCompositeMaterial const">
			<summary>
			Returns a name of the current composite material that specifies a custom shader used for the final composition of the full-screen image instead of the default one.
			</summary>  
			<returns>Name of the current composite material.</returns>
		</member>
		<member name="M:Unigine.Render.setCross(bool)">
			<summary>
			Enables or disables cross flares.
			</summary> 
			<param name="cross"> 1 to enable cross flares, 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Render.isCross const">
			<summary>
			Returns a value indicating if cross flares are enabled.
			</summary>  
			<returns>1 if cross flares are enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setCrossAngle(float)">
			<summary>
			Sets the cross flares orientation angle.
			</summary> 
			<param name="angle"> Angle in degrees. </param> 
		</member>
		<member name="M:Unigine.Render.getCrossAngle const">
			<summary>
			Returns the cross flares orientation angle.
			</summary>  
			<returns>Angle between flare shafts in degrees.</returns>
		</member>
		<member name="M:Unigine.Render.setCrossColor(Unigine.Math.vec4)">
			<summary>
			Sets the color of the cross flares.
			</summary> 
			<param name="color"> Color of cross flares. </param> 
		</member>
		<member name="M:Unigine.Render.getCrossColor const">
			<summary>
			Returns the color of the cross flares.
			</summary>  
			<returns>Color of the cross flares.</returns>
		</member>
		<member name="M:Unigine.Render.setCrossLength(float)">
			<summary>
			Sets the length of a cross flare. Increasing this value also leads to fading of the shafts across their length.
			</summary> 
			<param name="length"> Length of a cross flare relative to the screen width. </param> 
		</member>
		<member name="M:Unigine.Render.getCrossLength const">
			<summary>
			Returns the length of a cross flare.
			</summary>  
			<returns>Length of a cross flare relative to the screen width.</returns>
		</member>
		<member name="M:Unigine.Render.setCrossScale(float)">
			<summary>
			Sets a multiplier for color of cross flares.
			</summary> 
			<param name="scale"> Cross color scale. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Render.getCrossScale const">
			<summary>
			Returns the current multiplier for color of cross flares.
			</summary>  
			<returns>Cross color scale.</returns>
		</member>
		<member name="M:Unigine.Render.setCrossShafts(int)">
			<summary>
			Sets the number of shafts in a cross flare.											The minimum number of shafts is 2.						The maximum number of shafts is 32 (high number of flares can cause FPS drop on low-performance hardware).
			</summary> 
			<param name="shafts"> The number of a cross flares. The provided value is saturated in the range [2; 32]. </param> 
		</member>
		<member name="M:Unigine.Render.getCrossShafts const">
			<summary>
			Returns the number of shafts in a cross flare.											The minimum number of shafts is 2.						The maximum number of shafts is 32 (high number of flares can cause FPS drop on low-performance hardware).
			</summary>  
			<returns>Number of cross flares.</returns>
		</member>
		<member name="M:Unigine.Render.setCrossThreshold(float)">
			<summary>
			Sets the brightness threshold for areas to produce flare: the higher the threshold value, the brighter the area should be to produce a flare.
			</summary> 
			<param name="threshold"> Cross flares threshold. </param> 
		</member>
		<member name="M:Unigine.Render.getCrossThreshold const">
			<summary>
			Returns the current brightness threshold for areas to produce flare.
			</summary>  
			<returns>Cross flares threshold.</returns>
		</member>
		<member name="M:Unigine.Render.setData(char)">
			<summary>
			Sets user data associated with the render. This string is written directly into a *.world file. Namely, into the data child tag of the render tag, for example:
			</summary> 
			<param name="data"> New user data. The data can contain an XML formatted string. </param> 
		</member>
		<member name="M:Unigine.Render.getData const">
			<summary>
			Returns user data associated with the render. This string is written directly into a *.world file. Namely, into the data child tag of the render tag, for example:
			</summary>  
			<returns>User data. The data can contain an XML formatted string.</returns>
		</member>
		<member name="M:Unigine.Render.setDebug(bool)">
			<summary>
			Enables or disables rendering of debug materials (the debug_materials material). Debug materials can be used for debugging of image generation stages. For example, you can render only SSR, or only cubemaps and so on.
			</summary> 
			<param name="debug"> 1 to enable rendering of debug materials, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isDebug const">
			<summary>
			Returns the value indicating whether debug materials (the debug_materials material) are rendered or not. Debug materials can be used for debugging of image generation stages.
			</summary>  
			<returns>1 if debug materials are rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setDebugMaterials(char)">
			<summary>
			Updates the list of debug materials to be rendered.					Rendering of debug materials must be enabled (see the setDebug() method).
			</summary> 
			<param name="materials"> List of debug materials (a comma separated string, e.g., "mat_1, mat_2, ... mat_n"). </param> 
		</member>
		<member name="M:Unigine.Render.getDebugMaterials const">
			<summary>
			Returns the list of debug materials to be rendered as a string constant.					Rendering of debug materials must be enabled (see the setDebug() method).
			</summary>  
			<returns>List of debug materials (a comma separated string, e.g., "mat_1, mat_2, ... mat_n").</returns>
		</member>
		<member name="M:Unigine.Render.setDecalDistance(float)">
			<summary>
			Sets the distance, at which (and farther) decals will not be rendered.
			</summary> 
			<param name="distance"> Distance in units. </param> 
		</member>
		<member name="M:Unigine.Render.getDecalDistance const">
			<summary>
			Returns the distance, at which (and farther) decals will not be rendered.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.Render.setDecals(bool)">
			<summary>
			Enables or disables rendering of decals.
			</summary> 
			<param name="decals"> 1 to enable rendering of decals, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isDecals const">
			<summary>
			Returns the value indicating if rendering of decals is enabled.
			</summary>  
			<returns>1 if rendering of decals is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setDeferredMaterial(char)">
			<summary>
			Updates the list of materials that will be used on the Deferred Composite stage of rendering sequence. A debug material can be put here in order to be added to the final image.
			</summary> 
			<param name="material"> List of composite deferred materials (a comma separated string, e.g., "mat_1, mat_2, ... mat_n"). </param> 
		</member>
		<member name="M:Unigine.Render.getDeferredMaterial const">
			<summary>
			Returns the list of materials that are used on the Deferred Composite stage of rendering sequence.
			</summary>  
			<returns>List of deferred materials (a comma separated string, e.g., "mat_1, mat_2, ... mat_n").</returns>
		</member>
		<member name="M:Unigine.Render.setDirtScale(float)">
			<summary>
			Sets the scale of lens dirt effect modulating the pattern of lens flares. For example, it can be used to create an effect of unclean optics when the camera looks at the sun.
			</summary> 
			<param name="scale"> Dirt scale value within the [0.0f; 1.0f] range. The default value is 0.5f. </param> 
		</member>
		<member name="M:Unigine.Render.getDirtScale const">
			<summary>
			Returns the scale of lens dirt effect modulating the pattern of lens flares.
			</summary>  
			<returns>Dirt scale value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.Render.setDirtTextureName(char)">
			<summary>
			Sets the texture that modulates the pattern of lens flares. For example, it can be used to create an effect of unclean optics when the camera looks at the sun.
			</summary> 
			<param name="name"> Name of the lens flares modulation texture. </param> 
		</member>
		<member name="M:Unigine.Render.getDirtTextureName const">
			<summary>
			Returns the name of the current texture that modulates the pattern of lens flares. For example, it can be used to create an effect of light reflections or unclean optics when the camera looks at the sun.
			</summary>  
			<returns>Name of the lens flares modulation texture.</returns>
		</member>
		<member name="M:Unigine.Render.setDistanceScale(float)">
			<summary>
			Sets the global distance scale for all distance parameters: shadow distance, light distance, LOD distances, etc.
			</summary> 
			<param name="scale"> Global distance scale. </param> 
		</member>
		<member name="M:Unigine.Render.getDistanceScale const">
			<summary>
			Returns the current global distance scale for all distance parameters: shadow distance, world lights shadows, LOD distances, etc.
			</summary>  
			<returns>Global distance scale.</returns>
		</member>
		<member name="M:Unigine.Render.setDOF(bool)">
			<summary>
			Enables or disables the DOF (Depth Of Field) effect.
			</summary> 
			<param name="dof"> 1 to enable the DOF effect, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isDOF const">
			<summary>
			Returns the value indicating if the DOF (Depth Of Field) effect is enabled.
			</summary>  
			<returns>1 if the DOF effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFBlur(float)">
			<summary>
			Sets the intensity of blur for the DOF (Depth Of Field) effect.
			</summary> 
			<param name="blur"> DOF blur intensity value. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getDOFBlur const">
			<summary>
			Returns the intensity of blur for the DOF (Depth Of Field) effect.
			</summary>  
			<returns>DoF blur intensity value.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFBokehMode(int)">
			<summary>
			Sets the shape of the Bokeh for the DOF effect. This parameter determines the way the lens renders out-of-focus points of light.					For the DOF effect, the Bokeh effect is enabled by default.
			</summary> 
			<param name="mode"> The Bokeh shape:0 - ring (by default).1 - circle. </param> 
		</member>
		<member name="M:Unigine.Render.getDOFBokehMode const">
			<summary>
			Returns the current shape of the Bokeh for the DOF effect. This parameter determines the way the lens renders out-of-focus points of light.					For the DOF effect, the Bokeh effect is enabled by default.
			</summary>  
			<returns>The Bokeh shape:0 - ring (by default).1 - circle.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFChromaticAberration(float)">
			<summary>
			Sets the intensity of chromatic aberration for the DOF (Depth Of Field) effect.
			</summary> 
			<param name="aberration"> DOF chromatic aberration intensity value. The default value is 0.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getDOFChromaticAberration const">
			<summary>
			Returns the intensity of chromatic aberration for the DOF (Depth Of Field) effect.
			</summary>  
			<returns>DOF chromatic aberration intensity value.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFFarDistance(float)">
			<summary>
			Sets the far DOF limit of the camera: the distance between the camera and the furthest element that is considered to be acceptably sharp. Black zone on the DOF mask means in-focus zone.
			</summary> 
			<param name="distance"> Far DOF limit value in units. </param> 
		</member>
		<member name="M:Unigine.Render.getDOFFarDistance const">
			<summary>
			Returns the far DOF limit of the camera: the distance between the camera and the furthest element that is considered to be acceptably sharp. Black zone on the DOF mask means in-focus zone.
			</summary>  
			<returns>Far DOF limit value in units.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFFarFocalOffset(float)">
			<summary>
			Sets the offset from the focal to the farthest blurred zone for the DOF effect. In other words, the distance when background (far) is in focus.
			</summary> 
			<param name="offset"> Far DOF focal offset value in units. </param> 
		</member>
		<member name="M:Unigine.Render.getDOFFarFocalOffset const">
			<summary>
			Returns the offset from the focal to the farthest blurred zone. In other words, the distance when background (far) is in focus.
			</summary>  
			<returns>Far DOF focal offset value in units.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFFocalDistance(float)">
			<summary>
			Sets the focal distance of the camera, i.e. a point where objects are in-focus and visible clearly.
			</summary> 
			<param name="distance"> Focal distance in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Render.getDOFFocalDistance const">
			<summary>
			Returns the focal distance of the camera, i.e. a point where objects are in-focus and visible clearly.
			</summary>  
			<returns>Focal distance in units.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFFocusImprovement(bool)">
			<summary>
			Enables or disables focus improvement for the DOF (Depth Of Field) effect. When enabled, transitions between the focused and unfocused parts of the scene become more accurate.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="improvement"> 1 to enable focus improvement for the DOF effect, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isDOFFocusImprovement const">
			<summary>
			Returns a value indicating if the focus improvement option is enabled for the DOF (Depth Of Field) effect. When enabled, transitions between the focused and unfocused parts of the scene become more accurate.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if focus improvement is enabled for the DOF effect; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFIncreasedAccuracy(bool)">
			<summary>
			Enables or disables increased accuracy for the DOF (Depth Of Field) effect. Enabling the parameter allows for increasing accuracy of focusing calculation.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="accuracy"> 1 to enable increased accuracy for the DOF effect, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isDOFIncreasedAccuracy const">
			<summary>
			Returns a value indicating if the increased accuracy option is enabled for the DOF (Depth Of Field) effect. When enabled, focusing calculation is performed with increased accuracy.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if increased accuracy is enabled for the DOF effect; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFNearDistance(float)">
			<summary>
			Sets the near DOF limit of the camera: the distance between the camera and the first element that is considered to be acceptably sharp. Black zone on the DOF mask means in-focus zone.
			</summary> 
			<param name="distance"> Near DOF limit value in units. </param> 
		</member>
		<member name="M:Unigine.Render.getDOFNearDistance const">
			<summary>
			Returns the near DOF limit of the camera: the distance between the camera and the first element that is considered to be acceptably sharp. Black zone on the DOF mask means in-focus zone.
			</summary>  
			<returns>Near DOF limit value in units.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFNearFocalOffset(float)">
			<summary>
			Sets the offset from the focal to the nearest blurred zone. In other words, the distance when foreground (far) is in focus.
			</summary> 
			<param name="offset"> Near DOF focal offset value in units. </param> 
		</member>
		<member name="M:Unigine.Render.getDOFNearFocalOffset const">
			<summary>
			Returns the offset from the focal to the nearest blurred zone. In other words, the distance when foreground (far) is in focus.
			</summary>  
			<returns>Near DOF focal offset value in units.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFQuality(int)">
			<summary>
			Sets the quality of the DOF (Depth Of Field) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="quality"> The value indicating quality of the DOF effect:0 - low quality.1 - medium quality (by default).2 - high quality.3 - ultra quality. </param> 
		</member>
		<member name="M:Unigine.Render.getDOFQuality const">
			<summary>
			Returns the value indicating the quality of the DOF (Depth Of Field) effect.
			</summary>  
			<returns>The value indicating quality of the DOF effect:0 - low quality.1 - medium quality (by default).2 - high quality.3 - ultra quality.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).</returns>
		</member>
		<member name="M:Unigine.Render.setDOFResolution(int)">
			<summary>
			Sets the resolution of the DOF (Depth Of Field) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="resolution"> Resolution of the DOF effect:0 - quarter resolution.1 - half resolution.2 - full resolution (by default). </param> 
		</member>
		<member name="M:Unigine.Render.getDOFResolution const">
			<summary>
			Returns the resolution of the DOF (Depth Of Field) effect.
			</summary>  
			<returns>Resolution of the DOF effect:0 - quarter resolution.1 - half resolution.2 - full resolution (by default).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).</returns>
		</member>
		<member name="M:Unigine.Render.setEnabled(int) const">
			<summary>
			Enables or disables the render.
			</summary> 
			<param name="arg1"> 1 to enable the render, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isEnabled const">
			<summary>
			Returns a value indicating if the render is enabled.
			</summary>  
			<returns>1 if the render is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setEnvironment(bool)">
			<summary>
			Enables or disables rendering of environment of the scene.
			</summary> 
			<param name="environment"> 1 to enable rendering of environment, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isEnvironment const">
			<summary>
			Returns the value indicating if rendering of environment of the scene is enabled.
			</summary>  
			<returns>1 rendering of environment is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setEnvironmentCubemapBlendMode(int)">
			<summary>
			Sets the environment cubemap blending mode.
			</summary> 
			<param name="mode"> Cubemap blending mode:0 - alpha blend (by default).1 - additive blend.2 - multiply.3 - overlay. </param> 
		</member>
		<member name="M:Unigine.Render.getEnvironmentCubemapBlendMode const">
			<summary>
			Returns the current environment cubemap blending mode.
			</summary>  
			<returns>Cubemap blending mode:0 - alpha blend (by default).1 - additive blend.2 - multiply.3 - overlay.</returns>
		</member>
		<member name="M:Unigine.Render.setEnvironmentHazeMode(int)">
			<summary>
			Sets the mode for the haze effect.
			</summary> 
			<param name="mode"> Haze mode: one of the HAZE_* variables. </param> 
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazeMode const">
			<summary>
			Returns the current mode set for the haze effect.
			</summary>  
			<returns>Haze mode: one of the HAZE_*  variables.</returns>
		</member>
		<member name="M:Unigine.Render.setExposure(float)">
			<summary>
			Sets the camera exposure (a multiplier of the scene luminance and brightness). It determines the resulting amount of luminance:											By the minimum value of 0.0f, the image is rendered black.						The higher the value, the more luminance and the brighter the scene lit.
			</summary> 
			<param name="exposure"> Multiplier of the scene luminance and brightness. </param> 
		</member>
		<member name="M:Unigine.Render.getExposure const">
			<summary>
			Returns the current camera exposure (a multiplier of the scene luminance and brightness.). It determines the resulting amount of luminance:											By the minimum value of 0.0f, the image is rendered black.						The higher the value, the more luminance and the brighter the scene lit.
			</summary>  
			<returns>Current multiplier of the scene luminance and brightness.</returns>
		</member>
		<member name="M:Unigine.Render.setExposureAdaptation(float)">
			<summary>
			Sets the time for the camera to adjust exposure. If 0.0f is set, instant adaptation will be used.
			</summary> 
			<param name="adaptation"> Period of exposure adaptation in seconds. If a too small or even negative value is provided, 1E-6 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Render.getExposureAdaptation const">
			<summary>
			Returns the current the time set for the camera to adjust exposure. If the 0.0f is returned, it means that instant adaptation is used.
			</summary>  
			<returns>Period of exposure adaptation in seconds.</returns>
		</member>
		<member name="M:Unigine.Render.setExposureMaxLuminance(float)">
			<summary>
			Sets the maximum luminance offset relative to the default luminance of the scene used for rendering of adaptive exposure effect: the lower the value, the brighter the adapted image will be. The parameter can take on negative values.					If the specified value is less than the current minimum luminance, the minimum luminance value will be changed to the specified maximum luminance so that they are equal.
			</summary> 
			<param name="luminance"> Maximum luminance. The provided value is saturated in the range [-10.0f; 10.0f]. </param> 
		</member>
		<member name="M:Unigine.Render.getExposureMaxLuminance const">
			<summary>
			Returns the maximum luminance offset relative to the default luminance of the scene used for rendering of adaptive exposure effect: the lower the value, the brighter the adapted image is.
			</summary>  
			<returns>Maximum luminance.</returns>
		</member>
		<member name="M:Unigine.Render.setExposureMinLuminance(float)">
			<summary>
			Sets the minimum luminance offset relative to the default luminance of the scene used for rendering of adaptive exposure effect: the higher the value, the darker the adapted image will be. The parameter can take on negative values.					If the specified value is greater than the current maximum luminance, the maximum luminance value will be changed to the specified minimum luminance so that they are equal.
			</summary> 
			<param name="luminance"> Minimum luminance. The provided value is clamped to the range [-10.0f; 10.0f]. </param> 
		</member>
		<member name="M:Unigine.Render.getExposureMinLuminance const">
			<summary>
			Returns the minimum luminance offset relative to the default luminance of the scene used for rendering of adaptive exposure effect: the higher the value, the darker the adapted image is.
			</summary>  
			<returns>Minimum luminance.</returns>
		</member>
		<member name="M:Unigine.Render.setExposureMode(int)">
			<summary>
			Sets the mode of the adaptive exposure effect.
			</summary> 
			<param name="mode"> The value indicating the exposure mode:0 - a static exposure. The amount of luminance is determined by the setExposure().1 - adaptive logarithmic mapping technique.2 - adaptive quadratic mapping technique. </param> 
		</member>
		<member name="M:Unigine.Render.getExposureMode const">
			<summary>
			Returns current adaptive exposure mode:											0 - a static exposure. The amount of luminance is determined by the setExposure().						1 - adaptive logarithmic mapping technique.						2 - adaptive quadratic mapping technique.
			</summary>  
			<returns>The type of the exposure mode.</returns>
		</member>
		<member name="M:Unigine.Render.setFadeColor(Unigine.Math.vec4)">
			<summary>
			Sets the current fade color for the scene on the screen. By gradually changing this value it is possible to create "fade in" and "fade out" effects depending on the w component of the given vector. For example, when the following vectors are passed the result will be:											vec4(1,1,1,1) - a fully white screen. Positive w results in additive blending.						vec4(0.5,0.5,0.5,1) - light colors on the screen.						vec4(1,0,0,1) - R channel for all screen colors is to its maximum; G and B without changes.						vec4(0,0,0,0) - there is no fading (no color alterations are done to the screen).						vec4(1,1,1,-1) - a fully black screen. Negative w results in scene colors * (1 - RGB), where RGB is the first three components of the passed vector.						vec4(0.5,0.5,0.5,-1) - dark colors on the screen.
			</summary> 
			<param name="color"> Fade color for the scene on the screen. The provided vector represents RGB channel values (first three components) and a fading coefficient (w component). All components are saturated in the range [-1; 1]. </param> 
		</member>
		<member name="M:Unigine.Render.getFadeColor const">
			<summary>
			Returns the current fade color of the scene.
			</summary>  
			<returns>The current fade color.</returns>
		</member>
		<member name="M:Unigine.Render.setFieldDistance(float)">
			<summary>
			Sets the distance, at which (and farther) Field nodes will not be rendered.
			</summary> 
			<param name="distance"> Distance in units. </param> 
		</member>
		<member name="M:Unigine.Render.getFieldDistance const">
			<summary>
			Returns the distance, at which (and farther) Field nodes will not be rendered.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.Render.setFieldHeightResolution(int)">
			<summary>
			Sets the resolution of the FieldHeight.
			</summary> 
			<param name="resolution"> One of the following values:0 - 128 x 128.1 - 256 x 256.2 - 512 x 512 (by default).3 - 1024 x 1024.4 - 2048 x 2048.5 - 4096 x 4096.6 - 8192 x 8192. </param> 
		</member>
		<member name="M:Unigine.Render.getFieldHeightResolution const">
			<summary>
			Returns the value indicating the resolution of the FieldHeight.
			</summary>  
			<returns>One of the following values:0 - 128 x 128.1 - 256 x 256.2 - 512 x 512 (by default).3 - 1024 x 1024.4 - 2048 x 2048.5 - 4096 x 4096.6 - 8192 x 8192.</returns>
		</member>
		<member name="M:Unigine.Render.setFieldPrecision(bool)">
			<summary>
			Sets the precision of textures used for field objects.
			</summary> 
			<param name="precision"> Textures' precision:0 - 16-bit precision R16 texture (by default).1 - 32-bit precision R32F texture. </param> 
		</member>
		<member name="M:Unigine.Render.isFieldPrecision const">
			<summary>
			Returns the value indicating the current precision of textures used for field objects.
			</summary>  
			<returns>Textures' precision:0 - 16-bit precision R16 texture (by default).1 - 32-bit precision R32F texture.</returns>
		</member>
		<member name="M:Unigine.Render.setFieldShorelineResolution(int)">
			<summary>
			Set resolution of the texture into which all textures set for all FieldShoreline objects are rendered.
			</summary> 
			<param name="resolution"> General FieldShoreline texture resolution:0 - 128 x 128 (by default).1 - 256 x 256.2 - 512 x 512.3 - 1024 x 1024.4 - 2048 x 2048.5 - 4096 x 4096.6 - 8192 x 8192. </param> 
		</member>
		<member name="M:Unigine.Render.getFieldShorelineResolution const">
			<summary>
			Returns resolution of the texture into which all textures set for all FieldShoreline objects are rendered.
			</summary>  
			<returns>General FieldShoreline texture resolution:0 - 128 x 128 (by default).1 - 256 x 256.2 - 512 x 512.3 - 1024 x 1024.4 - 2048 x 2048.5 - 4096 x 4096.6 - 8192 x 8192.</returns>
		</member>
		<member name="M:Unigine.Render.setFilmic(bool)">
			<summary>
			Enables or disables the filmic tonemapping effect.
			</summary> 
			<param name="filmic"> 1 to enable the filmic tonemapping effect, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isFilmic const">
			<summary>
			Returns a value indicating if the filmic tonemapping effect is enabled.
			</summary>  
			<returns>1 if the filmic tonemapping effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setFilmicLinearAngle(float)">
			<summary>
			Sets the Linear Angle filmic tonemapping parameter value. This parameter controls the slope of the linear part of the tone mapping curve.
			</summary> 
			<param name="angle"> Linear Angle value. </param> 
		</member>
		<member name="M:Unigine.Render.getFilmicLinearAngle const">
			<summary>
			Returns the current Linear Angle filmic tone mapping parameter value. This parameter controls the slope of the linear part of the tone mapping curve.
			</summary>  
			<returns>Linear Angle value.</returns>
		</member>
		<member name="M:Unigine.Render.setFilmicLinearScale(float)">
			<summary>
			Sets the Linear Strength filmic tonemapping parameter value  that is used to change gray values. The Linear Scale controls the length of the tone mapping curve linear part.
			</summary> 
			<param name="scale"> Linear Strength value. </param> 
		</member>
		<member name="M:Unigine.Render.getFilmicLinearScale const">
			<summary>
			Returns the current Linear Strength filmic tone mapping parameter value that is used to change gray values. The Linear Scale controls the length of the tone mapping curve linear part.
			</summary>  
			<returns>Linear Strength value.</returns>
		</member>
		<member name="M:Unigine.Render.setFilmicShoulderScale(float)">
			<summary>
			Sets the Shoulder Strength filmic tonemapping parameter value that is used to change bright values.
			</summary> 
			<param name="scale"> Shoulder Strength value. </param> 
		</member>
		<member name="M:Unigine.Render.getFilmicShoulderScale const">
			<summary>
			Returns the current Shoulder Strength filmic tonemapping parameter value that is used to change bright values.
			</summary>  
			<returns>Shoulder Strength value.</returns>
		</member>
		<member name="M:Unigine.Render.setFilmicToeDenominator(float)">
			<summary>
			Sets the Toe Denominator filmic tonemapping parameter value.
			</summary> 
			<param name="denominator"> Toe Denominator value. </param> 
		</member>
		<member name="M:Unigine.Render.getFilmicToeDenominator const">
			<summary>
			Returns the current Toe Denominator filmic tonemapping parameter value.
			</summary>  
			<returns>Toe Denominator value.</returns>
		</member>
		<member name="M:Unigine.Render.setFilmicToeNumerator(float)">
			<summary>
			Sets the Toe Numerator filmic tonemapping parameter value.
			</summary> 
			<param name="numerator"> Toe Numerator value. </param> 
		</member>
		<member name="M:Unigine.Render.getFilmicToeNumerator const">
			<summary>
			Sets the Toe Numerator filmic tonemapping parameter value.
			</summary>  
			<returns>Toe Numerator value.</returns>
		</member>
		<member name="M:Unigine.Render.setFilmicToeScale(float)">
			<summary>
			Sets the Toe Scale filmic tonemapping parameter value that is used to change dark values. The Toe Scale controls the slope of the tone mapping curve toe (the area of underexposure).
			</summary> 
			<param name="scale"> Toe scale value. </param> 
		</member>
		<member name="M:Unigine.Render.getFilmicToeScale const">
			<summary>
			Returns the current Toe Scale filmic tonemapping parameter value that is used to change dark values. The Toe Scale controls the slope of the tone mapping curve toe (the area of underexposure).
			</summary>  
			<returns>Toe scale value.</returns>
		</member>
		<member name="M:Unigine.Render.setFilmicWhiteLevel(float)">
			<summary>
			Sets the Linear White Point filmic tonemapping parameter value, which is mapped as pure white in the resulted image.
			</summary> 
			<param name="level"> Linear White Point value. </param> 
		</member>
		<member name="M:Unigine.Render.getFilmicWhiteLevel const">
			<summary>
			Returns the current Linear White Point filmic tonemapping parameter value.
			</summary>  
			<returns>Linear White Point value.</returns>
		</member>
		<member name="M:Unigine.Render.setFilmicSaturationRecovery(float)">
			<summary>
			Sets the color saturation recovery value for the filmic tonemapper.
			</summary> 
			<param name="recovery"> Color saturation recovery value to be set, in the [0.0f, 1.0f] range. The default value is 0.75f.0.0f - standard filmic tonemapping, no saturation recovery is performed.1.0f - color saturation is recovered to the full extent.When the 1.0f value is set specular highlights appear too saturated, so the recommended value is 0.75f </param> 
		</member>
		<member name="M:Unigine.Render.getFilmicSaturationRecovery const">
			<summary>
			Returns the current color saturation recovery value value for the filmic tonemapper.
			</summary>  
			<returns>Current color saturation recovery value in the [0.0f, 1.0f] range. The default value is 0.75f.0.0f - standard filmic tonemapping, no saturation recovery is performed.1.0f - color saturation is recovered to the full extent.When the 1.0f value is set specular highlights appear too saturated, so the recommended value is 0.75f</returns>
		</member>
		<member name="M:Unigine.Render.setFirstFrame(bool)">
			<summary>
			Sets a value indicating if the first frame should be enabled over the current frame.
			</summary> 
			<param name="frame"> 1 to enable the first frame flag, 0 - to disable. </param> 
		</member>
		<member name="M:Unigine.Render.isFirstFrame const">
			<summary>
			Returns a value indicating if the first frame is enabled over the current frame.
			</summary>  
			<returns>1 if the first frame flag is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.isFlipped const">
			<summary>
			Checks render orientation.
			</summary>  
			<returns>1 if the render is flipped; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setFXAAIntensity(float)">
			<summary>
			Sets the intensity of the FXAA. Intensity specifies the sample offset of FXAA fragment. The higher the value, the more blurred image will be.
			</summary> 
			<param name="intensity"> Intensity value of the FXAA to be set. </param> 
		</member>
		<member name="M:Unigine.Render.getFXAAIntensity const">
			<summary>
			Returns the intensity value of the FXAA. Intensity specifies the sample offset of FXAA fragment.
			</summary>  
			<returns>Intensity value of the FXAA</returns>
		</member>
		<member name="M:Unigine.Render.setGbufferLightmap(bool)">
			<summary>
			Enables or disables storing lightmap data in the GBuffer.
			</summary> 
			<param name="lightmap"> 1 to enable storing lightmap data in the GBuffer, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isGbufferLightmap const">
			<summary>
			Returns a value indicating if lightmap data is stored in the GBuffer.
			</summary>  
			<returns>1 if lightmap data is stored in the GBuffer; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.getGPUMemory const">
			<summary>
			Returns an amount of memory provided by the current GPU.
			</summary>  
			<returns>Amount of memory in Mbytes.</returns>
		</member>
		<member name="M:Unigine.Render.getGPUName const">
			<summary>
			Returns the name of the current GPU.
			</summary>  
			<returns>GPU name flag.</returns>
		</member>
		<member name="M:Unigine.Render.getGray2DArrayTexture const">
			<summary>
			Returns gray 2D array texture.
			</summary>  
			<returns>Gray 2D array texture.</returns>
		</member>
		<member name="M:Unigine.Render.getGray2DTexture const">
			<summary>
			Returns gray 2D texture.
			</summary>  
			<returns>Gray 2D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getGray3DTexture const">
			<summary>
			Returns gray 3D texture.
			</summary>  
			<returns>Gray 3D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getGrayCubeTexture const">
			<summary>
			Returns gray Cube texture.
			</summary>  
			<returns>Gray Cube texture.</returns>
		</member>
		<member name="M:Unigine.Render.setLens(bool)">
			<summary>
			Enables or disables lens flares.
			</summary> 
			<param name="lens"> Positive integer to enable lens flares, 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Render.isLens const">
			<summary>
			Returns a value indicating if lens flares are enabled.
			</summary>  
			<returns>Positive integer if lens flares are enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setLensColor(Unigine.Math.vec4)">
			<summary>
			Sets the color of a lens flares.
			</summary> 
			<param name="color"> Color of lens flares. </param> 
		</member>
		<member name="M:Unigine.Render.getLensColor const">
			<summary>
			Returns the color of a lens flare.
			</summary>  
			<returns>Color of a lens flare.</returns>
		</member>
		<member name="M:Unigine.Render.setLensDispersion(Unigine.Math.vec3)">
			<summary>
			Sets the color displacement for red, green, and blue channels of the lens flares. Can be used to create light dispersion (chromatic aberrations).
			</summary> 
			<param name="dispersion"> Lens dispersion displacement per channel. If a negative value is set for a channel, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Render.getLensDispersion const">
			<summary>
			Returns the current color displacement for red, green and blue channels of the lens flares. Can be used to create light dispersion (chromatic aberrations).
			</summary>  
			<returns>Lens dispersion displacement per channel.</returns>
		</member>
		<member name="M:Unigine.Render.setLensLength(float)">
			<summary>
			Sets a length indicating if the whole radial lens flare is rendered on the screen or only a part of it. This option controls how lens flares pattern is distributed.
			</summary> 
			<param name="length"> Length of the radial lens flare. The provided value is saturated in the range [0.0f; 1.0f]. </param> 
		</member>
		<member name="M:Unigine.Render.getLensLength const">
			<summary>
			Returns the current length indicating if the whole radial lens flare is rendered on the screen or only a part of it. This option controls how lens flares pattern is distributed.
			</summary>  
			<returns>Length of the lens flare.</returns>
		</member>
		<member name="M:Unigine.Render.setLensRadius(float)">
			<summary>
			Sets a radius of the spherical lens flares on the screen.
			</summary> 
			<param name="radius"> Radius of the spherical lens flares. The provided value is saturated in the range [0.0f; 1.0f], where 1.0f is a screen-wide radius (a lens flare is not visible). </param> 
		</member>
		<member name="M:Unigine.Render.getLensRadius const">
			<summary>
			Returns the current radius of the spherical lens flares on the screen.
			</summary>  
			<returns>Radius of the spherical lens flares.</returns>
		</member>
		<member name="M:Unigine.Render.setLensScale(float)">
			<summary>
			Sets the multiplier for color of HDR lens flares.
			</summary> 
			<param name="scale"> Lens color scale. If a negative value is provided, 0.0f will be used instead. </param> 
		</member>
		<member name="M:Unigine.Render.getLensScale const">
			<summary>
			Returns the current multiplier for color of HDR lens flares.
			</summary>  
			<returns>Lens color scale.</returns>
		</member>
		<member name="M:Unigine.Render.setLensThreshold(float)">
			<summary>
			Sets the brightness threshold for lens flares.
			</summary> 
			<param name="threshold"> Lens flares threshold. </param> 
		</member>
		<member name="M:Unigine.Render.getLensThreshold const">
			<summary>
			Returns the current brightness threshold for lens flares.
			</summary>  
			<returns>Lens flares threshold.</returns>
		</member>
		<member name="M:Unigine.Render.setLightDistance(float)">
			<summary>
			Sets the distance, at which (and farther) dynamic lights will not be rendered.
			</summary> 
			<param name="distance"> Distance in units. </param> 
		</member>
		<member name="M:Unigine.Render.getLightDistance const">
			<summary>
			Returns the distance, at which (and farther) dynamic lights will not be rendered.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.Render.setLightsForwardPerObjectEnv(int)">
			<summary>
			Sets the maximum number of environment probes per object (available only for materials rendered in the forward rendering pass). You should set the nonzero value to increase performance: it is recommended to use not more than 4 environment probes per object.
			</summary> 
			<param name="env"> Maximum number of environment probes per object within the [0; 128] range. The default value is 4. </param> 
		</member>
		<member name="M:Unigine.Render.getLightsForwardPerObjectEnv const">
			<summary>
			Returns the current maximum number of environment probes per object (available only for materials rendered in the forward rendering pass).
			</summary>  
			<returns>Maximum number of environment probes per object within the [0; 128] range.</returns>
		</member>
		<member name="M:Unigine.Render.setLightsForwardPerObjectOmni(int)">
			<summary>
			Sets the maximum number of omni lights per object (available only for materials rendered in the forward rendering pass). You should set the nonzero value to increase performance: it is recommended to use not more than 4 omni lights per object.
			</summary> 
			<param name="omni"> Maximum number of omni lights per object within the [0; 128] range. The default value is 4. </param> 
		</member>
		<member name="M:Unigine.Render.getLightsForwardPerObjectOmni const">
			<summary>
			Returns the current maximum number of omni lights per object (available only for materials rendered in the forward rendering pass).
			</summary>  
			<returns>Maximum number of omni lights per object within the [0; 128] range.</returns>
		</member>
		<member name="M:Unigine.Render.setLightsForwardPerObjectProj(int)">
			<summary>
			Sets the maximum number of projected lights per object (available only for materials rendered in the forward rendering pass). You should set the nonzero value to increase performance: it is recommended to use not more than 4 projected lights per object.
			</summary> 
			<param name="proj"> Maximum number of projected lights per object within the [0; 128] range. The default value is 4. </param> 
		</member>
		<member name="M:Unigine.Render.getLightsForwardPerObjectProj const">
			<summary>
			Returns the current maximum number of projected lights per object (available only for materials rendered in the forward rendering pass).
			</summary>  
			<returns>Maximum number of projected lights per object within the [0; 128] range.</returns>
		</member>
		<member name="M:Unigine.Render.setLightsForwardPerObjectVoxel(int)">
			<summary>
			Sets the maximum number of voxel probes per object (available only for materials rendered in the forward rendering pass). You should set the nonzero value to increase performance: it is recommended to use not more than 4 projected lights per object.
			</summary> 
			<param name="voxel"> Maximum number of voxel probes per object within the [0; 128] range. </param> 
		</member>
		<member name="M:Unigine.Render.getLightsForwardPerObjectVoxel const">
			<summary>
			Returns the current maximum number of voxel probes per object (available only for materials rendered in the forward rendering pass).
			</summary>  
			<returns>Maximum number of voxel probes per object within the [0; 128] range.</returns>
		</member>
		<member name="M:Unigine.Render.setLightsForwardPerObjectWorld(int)">
			<summary>
			Sets the maximum number of world lights per object (available only for materials rendered in the forward rendering pass).  You should set the nonzero value to increase performance: it is recommended to use not more than 4 world lights per object.
			</summary> 
			<param name="world"> Maximum number of world lights per object within the [0; 128] range. The default value is 4. </param> 
		</member>
		<member name="M:Unigine.Render.getLightsForwardPerObjectWorld const">
			<summary>
			Returns the current maximum number of world lights per object (available only for materials rendered in the forward rendering pass).
			</summary>  
			<returns>Maximum number of world lights per object within the [0; 128] range.</returns>
		</member>
		<member name="M:Unigine.Render.setLightsInterleaved(bool)">
			<summary>
			Sets a value indicating if interleaved mode for rendering lights during the deferred pass is enabled. When enabled, lights are rendered in half resolution with subsequent reconstruction of neighboring pixels using the data from previous frames. This mode requires a high framerate (60+ FPS), otherwise anti-aliasing quality reduces and ghosting effect becomes more pronounced. Recommended for relatively static scenes which contain a lot of light sources and do not have a lot of reflective surfaces (in case of small number of light sources may reduce performance).
			</summary> 
			<param name="interleaved"> 1 to enable interleaved lights rendering mode, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isLightsInterleaved const">
			<summary>
			Returns a value indicating if interleaved mode for rendering lights during the deferred pass is enabled.
			</summary>  
			<returns>1 if interleaved lights rendering mode is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setLightsInterleavedCatmullResampling(bool)">
			<summary>
			Sets a value indicating if the Catmull-Rom resampling for interleaved lights rendering mode is enabled. This mode allows you to reduce image blurring when the camera moves forward/backward.
			</summary> 
			<param name="resampling"> 1 to enable the Catmull-Rom resampling for interleaved lights rendering mode, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isLightsInterleavedCatmullResampling const">
			<summary>
			Returns a value indicating if the Catmull-Rom resampling for interleaved lights rendering mode is enabled.
			</summary>  
			<returns>1 if the Catmull-Rom resampling for interleaved lights rendering mode is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setLightsInterleavedColorClamping(int)">
			<summary>
			Sets the color clamping mode to be used for interleaved lights rendering mode. This mode is used to reduce ghosting effect: higher values increase clamping intensity but may cause flickering on rippled reflective surfaces (as this mode is not so good at object's edges). When disabled, shadows and reflections have a lag as they are several frames behind.
			</summary> 
			<param name="clamping"> Color clamping mode to be used, one of the following values:0 - color clamping is disabled1 - low clamping2 - medium clamping3 - high clamping </param> 
		</member>
		<member name="M:Unigine.Render.getLightsInterleavedColorClamping const">
			<summary>
			Returns the current color clamping mode used for interleaved lights rendering mode.
			</summary>  
			<returns>Current color clamping mode, one of the following values:0 - color clamping is disabled1 - low clamping2 - medium clamping3 - high clamping</returns>
		</member>
		<member name="M:Unigine.Render.setLightsLensFlares(bool)">
			<summary>
			Enables or disables rendering of per-light lens flares.
			</summary> 
			<param name="flares"> 1 to enable rendering of per-light lens flares, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isLightsLensFlares const">
			<summary>
			Returns the value indicating if rendering of per-light lens flares is enabled.
			</summary>  
			<returns>1 if rendering of per-light lens flares is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setLightsMaxPerBatch(int)">
			<summary>
			Sets the maximum number of lights rendered by a tile per batch call. 				With lights batching optimization, omni lights divided into tiles are rendered in batches: each tile renders the specified number of lights per batch. It allows decreasing the number of DIP calls and increasing performance. The optimization works only for omni lights with point shape and without shadows.
			</summary> 
			<param name="batch"> Maximum number of lights per batch within the [0; 1024] range. The default value is 1024.0 disables batching optimization. </param> 
		</member>
		<member name="M:Unigine.Render.getLightsMaxPerBatch const">
			<summary>
			Returns the current maximum number of lights rendered by a tile per batch call. With lights batching optimization, omni lights divided into tiles are rendered in batches: each tile renders the specified number of lights per batch. It allows decreasing the number of DIP calls and increasing performance. The optimization works only for omni lights with point shape and without shadows.
			</summary>  
			<returns>Maximum number of lights per batch within the [0; 1024] range.0 means batching optimization is disabled.</returns>
		</member>
		<member name="M:Unigine.Render.setLightsTileGridSize(int)">
			<summary>
			Sets the number of grid tiles per axis for tiled rendering optimization. During this optimization, the screen space is divided into tiles that render lights in batches. The optimization works only for omni lights with point shape and without shadows.
			</summary> 
			<param name="size"> Number of grid tiles per axis within the [1; 32] range. The default value is 8. </param> 
		</member>
		<member name="M:Unigine.Render.getLightsTileGridSize const">
			<summary>
			Returns the current number of grid tiles per axis for tiled rendering optimization. During this optimization, the screen space is divided into tiles that render lights in batches. The optimization works only for omni lights with point shape and without shadows.
			</summary>  
			<returns>Number of grid tiles per axis within the [1; 32] range.</returns>
		</member>
		<member name="M:Unigine.Render.getMaxFieldAnimations const">
			<summary>
			Returns the maximum limit of FieldAnimation nodes allowed to be used in shaders.
			</summary>  
			<returns>Maximum number of FieldAnimation nodes allowed.Higher values will affect shader compilation time and performance</returns>
		</member>
		<member name="M:Unigine.Render.getMaxFieldHeights const">
			<summary>
			Returns the maximum limit of FieldHeight nodes allowed to be used in shaders.
			</summary>  
			<returns>Maximum number of FieldHeight nodes allowed.Higher values will affect shader compilation time and performance</returns>
		</member>
		<member name="M:Unigine.Render.getMaxFieldShorelines const">
			<summary>
			Returns the maximum limit of FieldShoreline nodes allowed to be used in shaders.
			</summary>  
			<returns>Maximum number of FieldShoreline nodes allowed.Higher values will affect shader compilation time and performance</returns>
		</member>
		<member name="M:Unigine.Render.getMaxFieldSpacers const">
			<summary>
			Returns the maximum limit of FieldSpacer nodes allowed to be used in shaders.
			</summary>  
			<returns>Maximum number of FieldSpacer nodes allowed.Higher values will affect shader compilation time and performance</returns>
		</member>
		<member name="M:Unigine.Render.setMotionBlur(bool)">
			<summary>
			Enables or disables the motion blur effect.
			</summary> 
			<param name="blur"> 1 to enable the motion blur effect, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isMotionBlur const">
			<summary>
			Returns a value indicating if the motion blur effect is enabled.
			</summary>  
			<returns>1 if the motion blur effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setMotionBlurCameraVelocity(bool)">
			<summary>
			Sets a value indicating if camera velocity contributes to the motion blur effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="velocity"> 1 to take camera velocity into account in the motion blur effect; 0 to take into account velocities of objects only. </param> 
		</member>
		<member name="M:Unigine.Render.isMotionBlurCameraVelocity const">
			<summary>
			Returns a value indicating if camera velocity contributes to the motion blur effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 camera velocity contributes to the motion blur effect; 0 only velocities of objects are taken into account in the motion blur effect.</returns>
		</member>
		<member name="M:Unigine.Render.setMotionBlurMaxVelocity(float)">
			<summary>
			Sets the maximum possible amount of motion blur for moving physical objects. When their body velocity exceeds the set value, they will be blurred as if they have the maximum velocity set by the parameter.				This parameter should be used:											To avoid excessive blurring of fast moving objects.						To save performance, as increasing the object's velocity leads increasing the radius of the motion blur effect that drops performance at too high values.					Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="velocity"> Maximum scaled velocity of moving physical bodies used for the motion blur effect. </param> 
		</member>
		<member name="M:Unigine.Render.getMotionBlurMaxVelocity const">
			<summary>
			Returns the current maximum possible amount of motion blur for moving physical objects.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Maximum scaled velocity of moving physical bodies used for the motion blur effect.</returns>
		</member>
		<member name="M:Unigine.Render.setMotionBlurNeatSilhouettes(bool)">
			<summary>
			Enables or disables the neat silhouettes option for motion blur. This option keeps contours of objects in front of the camera unblurred.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="silhouettes"> 1 to enable the neat silhouettes option for motion blur, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isMotionBlurNeatSilhouettes const">
			<summary>
			Returns a value indicating if neat silhouettes option for motion blur is enabled. This option keeps contours of objects in front of the camera unblurred.
			</summary>  
			<returns>1 if the neat silhouettes option is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setMotionBlurNoiseIntensity(float)">
			<summary>
			Sets the intensity of the noise used in the motion blur.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> Noise intensity value within the [0.0f; 1.0f] range. The default value is 0.25f. </param> 
		</member>
		<member name="M:Unigine.Render.getMotionBlurNoiseIntensity const">
			<summary>
			Returns the current intensity of the noise used in the motion blur.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Noise intensity.</returns>
		</member>
		<member name="M:Unigine.Render.setMotionBlurNumSteps(int)">
			<summary>
			Sets the number of steps used in the motion blur. The higher the value, the more correct the motion blur effect is. At low values, moving objects may look doubled, however, performance will increase.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="steps"> Number of steps in range [2;64]. The default value is 4. </param> 
		</member>
		<member name="M:Unigine.Render.getMotionBlurNumSteps const">
			<summary>
			Returns the current number of steps used in the motion blur. The higher the value, the more correct the motion blur effect is. At low values, moving objects may look doubled, however, performance will increase.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Number of steps.</returns>
		</member>
		<member name="M:Unigine.Render.setMotionBlurVelocityScale(float)">
			<summary>
			Sets amount of motion blur for moving physical bodies. The higher the value, the more blurred the objects will appear when moving.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="scale"> Scale of bodies' linear and angular velocities used for the motion blur. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Render.getMotionBlurVelocityScale const">
			<summary>
			Returns the current amount of motion blur for moving physical bodies. The higher the value, the more blurred the objects will appear when moving.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Scale of bodies' linear and angular velocities used for the motion blur.</returns>
		</member>
		<member name="M:Unigine.Render.getNumDecals const">
			<summary>
			Returns the number of rendered per frame decals that can be currently seen in the viewport (during all of the rendering passes).
			</summary>  
			<returns>The number of decals.</returns>
		</member>
		<member name="M:Unigine.Render.getNumDips const">
			<summary>
			Returns the number of draw calls used in the current scene. See Rendering Profiler article for details.
			</summary>  
			<returns>The number of draw calls.</returns>
		</member>
		<member name="M:Unigine.Render.getNumInstances const">
			<summary>
			Returns the maximum number of instances that can be rendered for each of the following node types:											Field Animation						Field Height						Field Shoreline						Field Spacer										Returned value depends on the graphics API used.
			</summary>  
			<returns>Maximum number of instances that can be rendered.</returns>
		</member>
		<member name="M:Unigine.Render.getNumLights const">
			<summary>
			Returns the number of light passes rendered per frame. It means that the value contains the number of all light sources that are currently seen illuminating something in the viewport and also includes additional passes for rendering lights in the reflecting surfaces (if dynamical reflections are used). See Rendering Profiler article for details.
			</summary>  
			<returns>The number of light passes.</returns>
		</member>
		<member name="M:Unigine.Render.getNumMaterials const">
			<summary>
			Returns the number of materials set per frame (during all of the rendering passes) in the current scene.
			</summary>  
			<returns>The number of materials.</returns>
		</member>
		<member name="M:Unigine.Render.getNumPrimitives const">
			<summary>
			Returns the number of geometric rendered per frame primitives that can be currently seen in the viewport. See Rendering Profiler article for details.
			</summary>  
			<returns>The number of primitives.</returns>
		</member>
		<member name="M:Unigine.Render.getNumProcedurals const">
			<summary>
			Returns the number of procedurals that can be currently seen in the viewport.
			</summary>  
			<returns>The number of procedurals.</returns>
		</member>
		<member name="M:Unigine.Render.getNumReflections const">
			<summary>
			Returns the number of reflections drawn per frame that can be currently seen in the viewport. In case of cubemap reflections, if all six faces are updated, six reflections are rendered per each frame.
			</summary>  
			<returns>The number of reflections.</returns>
		</member>
		<member name="M:Unigine.Render.getNumShaders const">
			<summary>
			Returns the number of shaders set per frame. See Rendering Profiler article for details.
			</summary>  
			<returns>The number of shaders.</returns>
		</member>
		<member name="M:Unigine.Render.getNumShadows const">
			<summary>
			Returns the number of shadow passes rendered per frame. See Rendering Profiler article for details.
			</summary>  
			<returns>The number of shadow passes.</returns>
		</member>
		<member name="M:Unigine.Render.getNumSurfaces const">
			<summary>
			Returns the number of rendered per frame surfaces that can be currently seen in the viewport (in all rendering passes). See Rendering Profiler article for details.
			</summary>  
			<returns>Number of surfaces.</returns>
		</member>
		<member name="M:Unigine.Render.getNumTriangles const">
			<summary>
			Returns the number of rendered per frame triangles that can be currently seen in the viewport. See Rendering Profiler article for details.
			</summary>  
			<returns>Number of triangles.</returns>
		</member>
		<member name="M:Unigine.Render.setObjectDistance(float)">
			<summary>
			Sets the distance, at which (and farther) objects will not be rendered.
			</summary> 
			<param name="distance"> Distance in units. </param> 
		</member>
		<member name="M:Unigine.Render.getObjectDistance const">
			<summary>
			Returns a distance, at which (and farther) objects will not be rendered.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.Render.setOccluders(bool)">
			<summary>
			Enables or disables rendering of occluders.
			</summary> 
			<param name="occluders"> 1 to enable rendering of occluders, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isOccluders const">
			<summary>
			Returns a value indicating if rendering of occluders is enabled.
			</summary>  
			<returns>1 if rendering of occluders is enabled; otherwise, 0. The default value is 1.</returns>
		</member>
		<member name="M:Unigine.Render.setOccludersResolution(Unigine.Math.vec2)">
			<summary>
			Sets the resolution of the texture, to which occluders are rendered.
			</summary> 
			<param name="resolution"> Texture resolution (X, Y), in pixels. Available values are from (1, 1) to (1024, 1024). The default value is (128, 64). </param> 
		</member>
		<member name="M:Unigine.Render.getOccludersResolution const">
			<summary>
			Returns the current resolution of the texture, to which occluders are rendered.
			</summary>  
			<returns>Texture resolution (X, Y), in pixels. Available values are from (1, 1) to (1024, 1024). The default value is (128, 64).</returns>
		</member>
		<member name="M:Unigine.Render.setOccludersShadows(bool)">
			<summary>
			Sets the value indicating whether rendering of occluders for shadows is enabled.
			</summary> 
			<param name="shadows"> 1 to enable rendering of occluders for shadows, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isOccludersShadows const">
			<summary>
			Returns the value indicating whether rendering of occluders for shadows is enabled.
			</summary>  
			<returns>1 if rendering of occluders for shadows is enabled; otherwise, 0. The default value is 0.</returns>
		</member>
		<member name="M:Unigine.Render.setOccludersShadowsResolution(Unigine.Math.vec2)">
			<summary>
			Sets the resolution of the texture, to which occluders for shadows are rendered.
			</summary> 
			<param name="resolution"> Texture resolution (X, Y), in pixels. Available values are from (1, 1) to (1024, 1024). The default value is (512, 512). </param> 
		</member>
		<member name="M:Unigine.Render.getOccludersShadowsResolution const">
			<summary>
			Returns the current resolution of the texture, to which occluders for shadows are rendered.
			</summary>  
			<returns>Texture resolution (X, Y), in pixels. Available values are from (1, 1) to (1024, 1024). The default value is (512, 512).</returns>
		</member>
		<member name="M:Unigine.Render.setOcclusionQueries(bool)">
			<summary>
			Enables or disables additional hardware occlusion query test before sending data to GPU.
			</summary> 
			<param name="queries"> 1 to enable  additional hardware occlusion query test, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isOcclusionQueries const">
			<summary>
			Returns a value indicating if additional hardware occlusion query test before sending data to GPU is enabled.
			</summary>  
			<returns>1 if if additional hardware occlusion query test is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setOcclusionQueriesNumFrames(int)">
			<summary>
			Sets the number of frames for additional hardware occlusion query test performed before sending data to GPU.
			</summary> 
			<param name="frames"> Number of frames. The value within the [0; 1024] range. The default value is 5. </param> 
		</member>
		<member name="M:Unigine.Render.getOcclusionQueriesNumFrames const">
			<summary>
			Returns the current number of frames for additional hardware occlusion query test performed before sending data to GPU.
			</summary>  
			<returns>Number of frames. The value within the [0; 1024] range.</returns>
		</member>
		<member name="M:Unigine.Render.setPostMaterials(char)">
			<summary>
								Sets post postprocess materials that are applied after all other postprocess (such as HDR, DoF, etc.) are rendered. Materials are applied in the order of listing.					They are used together with Player::setPostMaterials(), if any.
			</summary> 
			<param name="materials"> Comma-separated list of post postprocess material names. </param> 
		</member>
		<member name="M:Unigine.Render.getPostMaterials const">
			<summary>
			Returns names of the current post postprocess materials that are applied after all other postprocess (such as HDR, DoF, etc.) are rendered. Materials are applied in the order of listing.					They are used together with Player::getPostMaterials(), if any.
			</summary>  
			<returns>Comma-separated list of current post postprocess material names.</returns>
		</member>
		<member name="M:Unigine.Render.setReflectionDistance(float)">
			<summary>
			Sets the distance, at which (and farther) reflections will not be rendered.
			</summary> 
			<param name="distance"> Distance in units. </param> 
		</member>
		<member name="M:Unigine.Render.getReflectionDistance const">
			<summary>
			Returns the distance, at which (and farther) reflections will not be rendered.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.Render.setReflectionDynamic(bool)">
			<summary>
			Enables or disables dynamic reflections for materials.
			</summary> 
			<param name="dynamic"> 1 to enable dynamic reflections for materials, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isReflectionDynamic const">
			<summary>
			Returns a value indicating if dynamic reflections for materials are enabled.
			</summary>  
			<returns>1 if dynamic reflections for materials are enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setReflectionLods(bool)">
			<summary>
			Enables or disables reduction of resolution of dynamic reflections when the camera moves away.
			</summary> 
			<param name="lods"> 1 to enable reduction of resolution of dynamic reflections when the camera moves away, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isReflectionLods const">
			<summary>
			Returns a value indicating if reduction of resolution of dynamic reflections when the camera moves away is enabled.
			</summary>  
			<returns>1 if reduction of resolution of dynamic reflections when the camera moves away is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setRefraction(bool)">
			<summary>
			Enables or disables refraction.
			</summary> 
			<param name="refraction"> 1 to enable refraction, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isRefraction const">
			<summary>
			Returns a value indicating if refraction is enabled.
			</summary>  
			<returns>1 if refraction is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setRefractionDispersion(Unigine.Math.vec3)">
			<summary>
			Sets the refraction displacement for red, green and blue channels (according to refraction texture of refractive materials). Can be used to create light dispersion (chromatic aberrations).
			</summary> 
			<param name="dispersion"> Dispersion displacement per channel. If a negative value is set for a channel, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Render.getRefractionDispersion const">
			<summary>
			Returns the refraction displacement for red, green and blue channels (according to the refraction texture of refractive materials). It can be used to create light dispersion (chromatic aberrations).
			</summary>  
			<returns>Dispersion displacement.</returns>
		</member>
		<member name="M:Unigine.Render.setPrePostMaterials(char)">
			<summary>
			Sets pre-post materials that are applied before all other postprocess (such as HDR, DoF, etc.) are rendered. Materials are applied in the order of listing.
			</summary> 
			<param name="materials"> List of comma-separated pre-post material names. </param> 
		</member>
		<member name="M:Unigine.Render.getPrePostMaterials const">
			<summary>
			Returns names of the current pre-post materials that are applied before all other postprocess (such as HDR, DoF, etc.) are rendered. Materials are applied in the order of listing.
			</summary>  
			<returns>Names of the current pre-post materials.</returns>
		</member>
		<member name="M:Unigine.Render.setScreenPrecision(bool)">
			<summary>
			Sets screen precision. This parameter determines the texture format used for screen HDR buffers.
			</summary> 
			<param name="precision"> One of the following values:0 - RG11B10F.1 - RGBA16F (by default). </param> 
		</member>
		<member name="M:Unigine.Render.isScreenPrecision const">
			<summary>
			Returns a value indicating the current screen precision. This parameter determines the texture format used for screen HDR buffers.
			</summary>  
			<returns>One of the following values:0 - RG11B10F.1 - RGBA16F (by default).</returns>
		</member>
		<member name="M:Unigine.Render.setShaderDefines(char)">
			<summary>
			Set additional shader defines.
			</summary> 
			<param name="defines"> Additional shader defines. </param> 
		</member>
		<member name="M:Unigine.Render.getShaderDefines const">
			<summary>
			Returns additional shader defines.
			</summary>  
			<returns>Additional shader defines.</returns>
		</member>
		<member name="M:Unigine.Render.setShadowDistance(float)">
			<summary>
			Sets the distance, at which (and farther) shadows will not be rendered.
			</summary> 
			<param name="distance"> Distance in units. </param> 
		</member>
		<member name="M:Unigine.Render.getShadowDistance const">
			<summary>
			Returns the distance, at which (and farther) shadows will not be rendered.
			</summary>  
			<returns>Distance in units.</returns>
		</member>
		<member name="M:Unigine.Render.setShadows(bool)">
			<summary>
			Enables or disables shadows rendering.
			</summary> 
			<param name="shadows"> 1 to enable shadows rendering, 0 to skip it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isShadows const">
			<summary>
			Returns a value indicating whether shadows are rendered or not.
			</summary>  
			<returns>1 if shadows are rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShadowsAlphaTest(bool)">
			<summary>
			Enables or disables alpha test for shadows.
			</summary> 
			<param name="test"> 1 to enable alpha test for shadows, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isShadowsAlphaTest const">
			<summary>
			Returns a value indicating if alpha test is enabled for shadows.
			</summary>  
			<returns>1 if alpha test is enabled for shadows; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShadowShafts(bool)">
			<summary>
			Enables or disables volumetric shadows.
			</summary> 
			<param name="shafts"> 1 to enable volumetric shadows, 0 to disable. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShadowShafts const">
			<summary>
			Returns a value indicating if volumetric shadows are enabled.
			</summary>  
			<returns>1 if volumetric shadows are enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShadowShaftsExposure(float)">
			<summary>
			Sets the contrast used for volumetric shadows.
			</summary> 
			<param name="exposure"> Shadow contrast. The provided value will be saturated in the range [0.0f; 1.0f]. 0.0f means that the shadows are not seen at all. </param> 
		</member>
		<member name="M:Unigine.Render.getShadowShaftsExposure const">
			<summary>
			Returns the contrast used for volumetric shadows.
			</summary>  
			<returns>Shadow contrast.</returns>
		</member>
		<member name="M:Unigine.Render.setShadowShaftsLength(float)">
			<summary>
			Sets the length of volumetric shadows.
			</summary> 
			<param name="length"> Shadow length. The provided value will be saturated in the range [0.0f; 1.0f]. 0.0f means that there are no shadows. 1 means that the shadows are long enough to occupy the whole screen. </param> 
		</member>
		<member name="M:Unigine.Render.getShadowShaftsLength const">
			<summary>
			Returns the length of volumetric shadows.
			</summary>  
			<returns>Shadow length.</returns>
		</member>
		<member name="M:Unigine.Render.setShadowsScreenSpace(bool)">
			<summary>
			Enables or disables screen space shadows. They provide high-quality penumbra, per-light work, per-pixel detail at any zoom level and infinite visibility distance (when enabled, distant objects can cast shadows next to the horizon). Supports depth cutout parallax. Screen space shadows can be mixed with regular ones.
			</summary> 
			<param name="space"> 1 to enable screen space shadows, 0 to disable. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isShadowsScreenSpace const">
			<summary>
			Returns the value indicating if screen space shadows are enabled. They provide high-quality penumbra, per-light work, per-pixel detail at any zoom level and infinite visibility distance (when enabled, distant objects can cast shadows next to the horizon). Supports depth cutout parallax. Screen space shadows can be mixed with regular ones.
			</summary>  
			<returns>1 if screen space shadows are enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShadowsPenumbraMode(int)">
			<summary>
			Sets the global quality mode to be used for rendering penumbra from all light sources by default. This mode enables simulation of real-world shadows by keeping sharp contact shadows closer to the base and softening the farther the shadow stretches away. Higher values produce softer shadows.					You can set penumbra quality mode or disable penumbra rendering for each light source individually.
			</summary> 
			<param name="mode"> Global quality mode to be used for rendering penumbra from all light sources:0 - penumbra rendering is disabled, shadow edges are crisp and sharp (no shadow softness at all).1 — low quality2 — medium quality3 — high quality4 — ultra quality </param> 
		</member>
		<member name="M:Unigine.Render.getShadowsPenumbraMode const">
			<summary>
			Returns the global quality mode currently used for rendering penumbra from all light sources by default. This mode enables simulation of real-world shadows by keeping sharp contact shadows closer to the base and softening the farther the shadow stretches away. Higher values produce softer shadows.					You can set penumbra quality mode or disable penumbra rendering for each light source individually.
			</summary>  
			<returns>Global quality mode currently used for rendering penumbra from all light sources:0 - penumbra rendering is disabled, shadow edges are crisp and sharp (no shadow softness at all).1 — low quality2 — medium quality3 — high quality4 — ultra quality</returns>
		</member>
		<member name="M:Unigine.Render.setShadowsPenumbraNoise(bool)">
			<summary>
			Enables or disables noise for penumbra rendering. This noise is used for smoothing.
			</summary> 
			<param name="noise"> 1 to enable noise for penumbra rendering, 0 to disable. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isShadowsPenumbraNoise const">
			<summary>
			Returns a value indicating if noise for penumbra rendering is enabled. This noise is used for smoothing.
			</summary>  
			<returns>1 if noise for penumbra rendering is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShadowsFilterMode(int)">
			<summary>
			Sets the global filtering mode to be used for shadows from all light sources by default. This mode determines quality of soft shadows. Higher quality produces smoother shadow edges.					You can set filtering mode or disable filtering for each light source individually.
			</summary> 
			<param name="mode"> Global filtering mode to be used for shadows from all light sources:0 - filtering for shadows is disabled, the stair-step effect is clearly seen at the edges of shadows.1 — low quality2 — medium quality3 — high quality4 — ultra quality </param> 
		</member>
		<member name="M:Unigine.Render.getShadowsFilterMode const">
			<summary>
			Returns the global filtering mode currently used for shadows from all light sources by default. This mode determines quality of soft shadows, it is used to reduce the stair-step effect making the edges smoother. Higher quality produces smoother shadow edges.					You can set filtering mode or disable filtering for each light source individually.
			</summary>  
			<returns>Global filtering mode currently used for shadows from all light sources:0 - filtering for shadows is disabled, the stair-step effect is clearly seen at the edges of shadows.1 — low quality2 — medium quality3 — high quality4 — ultra quality</returns>
		</member>
		<member name="M:Unigine.Render.setShadowsFilterNoise(bool)">
			<summary>
			Enables or disables noise for shadow filtering. This noise is used for smoothing.
			</summary> 
			<param name="noise"> 1 to enable noise for shadow filtering, 0 to disable. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isShadowsFilterNoise const">
			<summary>
			Returns a value indicating if noise for shadow filtering is enabled. This noise is used for smoothing.
			</summary>  
			<returns>1 if noise for shadow filtering is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShadowsTranslucentDepth(float)">
			<summary>
			Sets the global translucence depth value defining how deep the light goes through translucent objects shifting the shadow.
			</summary> 
			<param name="depth"> Global translucence depth to be used. The higher the value, the deeper the light penetrates translucent objects shifting the shadow. </param> 
		</member>
		<member name="M:Unigine.Render.getShadowsTranslucentDepth const">
			<summary>
			Returns the global translucence depth value defining how deep the light goes through translucent objects shifting the shadow.
			</summary>  
			<returns>Current global translucence depth value. The higher the value, the deeper the light penetrates translucent objects shifting the shadow.</returns>
		</member>
		<member name="M:Unigine.Render.setShadowsWorldLerpCascades(bool)">
			<summary>
			Enables or disables shadows cascades lerp.
			</summary> 
			<param name="cascades"> 1 to enable shadows cascades lerp, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isShadowsWorldLerpCascades const">
			<summary>
			Returns the value indicating if shadows cascades lerp is enabled.
			</summary>  
			<returns>1 if shadows cascades lerp is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSharpen(bool)">
			<summary>
			Enables or disables the sharpening post-processing effect.
			</summary> 
			<param name="sharpen"> 1 to enable the sharpening post-processing effect, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isSharpen const">
			<summary>
			Returns a value indicating if the sharpening post-processing effect is enabled.
			</summary>  
			<returns>1 if the sharpening post-processing effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSharpenIntensity(float)">
			<summary>
			Sets intensity of the sharpening effect.
			</summary> 
			<param name="intensity"> Intensity of the sharpening effect. </param> 
		</member>
		<member name="M:Unigine.Render.getSharpenIntensity const">
			<summary>
			Returns intensity of the sharpening effect.
			</summary>  
			<returns>Intensity of the sharpening effect.</returns>
		</member>
		<member name="M:Unigine.Render.setShowAlphaTest(bool)">
			<summary>
			Displays or hides the visualizer for transparent objects using alpha test.
			</summary> 
			<param name="test"> 1 to display the visualizer for transparent objects using alpha test, 0 to hide it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShowAlphaTest const">
			<summary>
			Returns a value indicating whether the visualizer is displayed for transparent objects using alpha test or not.
			</summary>  
			<returns>1 if visualizer for transparent objects using alpha test is displayed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShowAmbient(bool)">
			<summary>
			Enables or disables displaying the ambient pass buffer.
			</summary> 
			<param name="ambient"> 1 to display the ambient pass buffer, 0 to hide it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShowAmbient const">
			<summary>
			Returns a value indicating whether the ambient pass buffer is displayed or not.
			</summary>  
			<returns>1 if the ambient pass buffer is displayed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShowCascades(bool)">
			<summary>
			Displays or hides world shadow cascades.
			</summary> 
			<param name="cascades"> 1 to display world shadow cascades, 0 to hide them. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShowCascades const">
			<summary>
			Returns a value indicating whether world shadow cascades are displayed or not.
			</summary>  
			<returns>1 if world shadow cascades are displayed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShowDecals(bool)">
			<summary>
			Displays or hides the visualizer for decals.
			</summary> 
			<param name="decals"> 1 to display the visualizer for decals, 0 to hide it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShowDecals const">
			<summary>
			Returns a value indicating whether the visualizer is displayed for decals or not.
			</summary>  
			<returns>1 if visualizer for decals is displayed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShowDynamic(bool)">
			<summary>
			Displays or hides the visualizer for dynamic objects.
			</summary> 
			<param name="dynamic"> true to display the visualizer for dynamic objects, false to hide it. The default value is false. </param> 
		</member>
		<member name="M:Unigine.Render.isShowDynamic const">
			<summary>
			Returns a value indicating whether the visualizer is displayed for dynamic objects or not.
			</summary>  
			<returns>true if visualizer for dynamic objects is displayed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setShowGeodeticPivot(bool)">
			<summary>
			Displays or hides geodetic pivots.
			</summary> 
			<param name="pivot"> 1 to display geodetic pivots, 0 to hide them. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShowGeodeticPivot const">
			<summary>
			Returns a value indicating whether geodetic pivots are displayed or not.
			</summary>  
			<returns>1 if geodetic pivots are displayed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShowMipmaps(bool)">
			<summary>
			Displays or hides texture mipmap levels.
			</summary> 
			<param name="mipmaps"> 1 to display texture mipmap levels, 0 to hide them. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShowMipmaps const">
			<summary>
			Returns a value indicating whether texture mipmap levels are displayed or not.
			</summary>  
			<returns>1 if texture mipmap levels are displayed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShowOccluder(bool)">
			<summary>
			Displays or hides the buffer used for occluders.
			</summary> 
			<param name="occluder"> 1 to display the buffer used for occluders, 0 to hide it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShowOccluder const">
			<summary>
			Returns a value indicating whether the buffer used for occluders is displayed in the viewport or not.
			</summary>  
			<returns>1 if the buffer used for occluders is displayed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShowQueries(bool)">
			<summary>
			Displays or hides occlusion query boxes.
			</summary> 
			<param name="queries"> 1 to display occlusion query boxes, 0 to hide them. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShowQueries const">
			<summary>
			Returns a value indicating whether occlusion query boxes are displayed in the viewport or not.
			</summary>  
			<returns>1 if occlusion query boxes are displayed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShowScissors(bool)">
			<summary>
			Displays or hides scissor rectangles.
			</summary> 
			<param name="scissors"> 1 to display scissor rectangles, 0 to hide them. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShowScissors const">
			<summary>
			Returns a value indicating if scissor rectangles are displayed.
			</summary>  
			<returns>1 if scissor rectangles are displayed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShowTextures(int)">
			<summary>
			Sets the display mode for buffers used by the renderer.
			</summary> 
			<param name="textures"> One of the following values:0 - hide all buffers (by default).1 - display render textures in a compact view.2 - display render textures in a full view. </param> 
		</member>
		<member name="M:Unigine.Render.getShowTextures const">
			<summary>
			Returns the current display mode for buffers used by the renderer.
			</summary>  
			<returns>One of the following values:0 - all buffers are hidden (by default).1 - render textures are displayed in a compact view.2 - render textures are displayed in a full view.</returns>
		</member>
		<member name="M:Unigine.Render.setShowTexturesNumber(int)">
			<summary>
			Sets the number of buffers in a row displayed in the full view mode (see setShowTextures(2)).
			</summary> 
			<param name="number"> Number of buffers in a row. Value within the [1; 16] range. The default value is 7. </param> 
		</member>
		<member name="M:Unigine.Render.getShowTexturesNumber const">
			<summary>
			Returns the current number of buffers in a row displayed in the full view mode (see setShowTextures(2)).
			</summary>  
			<returns>Number of buffers in a row.</returns>
		</member>
		<member name="M:Unigine.Render.setShowTexturesOffset(int)">
			<summary>
			Sets the number of the buffer to start displaying from in the full view mode (see setShowTextures(2)).
			</summary> 
			<param name="offset"> Number of the buffer to start displaying from. Value within the [0; 52] range. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.getShowTexturesOffset const">
			<summary>
			Returns the current number of the buffer to start displaying from in the full view mode (see setShowTextures(2)).
			</summary>  
			<returns>Number of the buffer to start displaying from. Value within the [0; 52] range.</returns>
		</member>
		<member name="M:Unigine.Render.setShowTransparent(bool)">
			<summary>
			Displays or hides the visualizer for transparent objects.
			</summary> 
			<param name="transparent"> 1 to display the visualizer for transparent objects, 0 to hide it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShowTransparent const">
			<summary>
			Returns a value indicating whether the visualizer is displayed for transparent objects or not.
			</summary>  
			<returns>1 if visualizer for transparent objects is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setShowTriangles(int)">
			<summary>
			Sets the wireframe mode for scene triangles.
			</summary> 
			<param name="triangles"> One of the following values:0 - triangles are hidden (by default).1 - front faces with the depth test are shown.2 - front faces without the depth test are shown.3 - front and back faces without the depth test are shown. </param> 
		</member>
		<member name="M:Unigine.Render.getShowTriangles const">
			<summary>
			Returns the current wireframe mode for scene triangles.
			</summary>  
			<returns>One of the following values:0 - triangles are hidden (by default).1 - front faces with the depth test are shown.2 - front faces without the depth test are shown.3 - front and back faces without the depth test are shown.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsEnabled(bool)">
			<summary>
			Enables or disables clouds rendering.
			</summary> 
			<param name="enabled"> 0 to skip rendering of clouds, 1 to render clouds. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isCloudsEnabled const">
			<summary>
			Returns a value indicating if rendering of clouds is enabled.
			</summary>  
			<returns>1 if rendering of clouds is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setLightsEnabled(bool)">
			<summary>
			Enables or disables lights rendering.
			</summary> 
			<param name="enabled"> 0 to skip rendering of lights, 1 to render lights. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isLightsEnabled const">
			<summary>
			Returns a value indicating if rendering of lights is enabled.
			</summary>  
			<returns>1 if rendering of lights is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterEnabled(bool)">
			<summary>
			Enables or disables water rendering.
			</summary> 
			<param name="enabled"> 0 to skip rendering of water, 1 to render water. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isWaterEnabled const">
			<summary>
			Returns a value indicating if rendering of water is enabled.
			</summary>  
			<returns>1 if rendering of water is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setScreenSpaceEffects(bool)">
			<summary>
			Enables or disables rendering of screen-space effects.
			</summary> 
			<param name="effects"> 1 to enable rendering of screen-space effects, 1 to skip them. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isScreenSpaceEffects const">
			<summary>
			Returns a value indicating if rendering of screen-space effects is enabled.
			</summary>  
			<returns>1 if rendering of screen-space effects is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setPrePostMaterialsEnabled(bool)">
			<summary>
			Enables or disables rendering of pre-post materials (post-process materials applied before all other Unigine post-processes).
			</summary> 
			<param name="enabled"> 1 to render pre-post materials, 0 to skip them. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isPrePostMaterialsEnabled const">
			<summary>
			Returns a value indicating if rendering of pre-post materials (post-process materials applied before all other Unigine post-processes) is enabled.
			</summary>  
			<returns>1 if rendering of pre-post materials is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTransparentEnabled(bool)">
			<summary>
			Enables or disables rendering of the transparent pass.
			</summary> 
			<param name="enabled"> 1 to render the transparent pass, 0 to skip it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isTransparentEnabled const">
			<summary>
			Returns a value indicating if the transparent pass is rendered.
			</summary>  
			<returns>1 if the transparent pass is rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTransparentAmbient(bool)">
			<summary>
			Enables or disables rendering of the transparent ambient pass.
			</summary> 
			<param name="ambient"> 1 to render the transparent ambient pass, 0 to skip it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isTransparentAmbient const">
			<summary>
			Returns a value indicating if the transparent ambient pass is rendered.
			</summary>  
			<returns>1 if the transparent ambient pass is rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTransparentDeferred(bool)">
			<summary>
			Enables or disables rendering of the transparent deferred pass.
			</summary> 
			<param name="deferred"> 1 to render the transparent deferred pass, 0 to skip it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isTransparentDeferred const">
			<summary>
			Returns a value indicating if the transparent deferred pass is rendered.
			</summary>  
			<returns>1 if the transparent deferred pass is rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTransparentLight(bool)">
			<summary>
			Enables or disables rendering of the transparent light pass.
			</summary> 
			<param name="light"> 1 to render the transparent light pass, 0 to skip it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isTransparentLight const">
			<summary>
			Returns a value indicating if the transparent light pass is rendered.
			</summary>  
			<returns>1 if the transparent light pass is rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTransparentMultipleEnvProbes(bool)">
			<summary>
			Enables or disables rendering of the transparent multiple environment probes pass.
			</summary> 
			<param name="probes"> 1 to render the transparent multiple environment probes pass, 0 to skip it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isTransparentMultipleEnvProbes const">
			<summary>
			Returns a value indicating if the transparent multiple environment probes pass is rendered.
			</summary>  
			<returns>1 if the transparent multiple environment probes pass is rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSkyRotation(Unigine.Math.quat)">
			<summary>
			Sets sky rotation.
			</summary> 
			<param name="rotation"> Sky rotation quaternion. </param> 
		</member>
		<member name="M:Unigine.Render.getSkyRotation const">
			<summary>
			Returns sky rotation.
			</summary>  
			<returns>Sky rotation quaternion.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAO(bool)">
			<summary>
			Enables or disables the SSAO (Screen Space Ambient Occlusion) effect.
			</summary> 
			<param name="ssao"> 1 to enable the SSAO effect, 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Render.isSSAO const">
			<summary>
			Returns the value indicating if the SSAO (Screen Space Ambient Occlusion) effect is enabled.
			</summary>  
			<returns>1 if the SSAO effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOCavity(bool)">
			<summary>
			Enables or disables the cavity option for the SSAO (Screen Space Ambient Occlusion) effect. This option improves (sharpens) the look of junction contours at low resolutions, so it should be used for detail enhancement (small stones, bolts and so on).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="cavity"> 1 to enable the cavity option for the SSAO effect, 0 to disable. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isSSAOCavity const">
			<summary>
			Returns the value indicating if the cavity option for the SSAO (Screen Space Ambient Occlusion) effect is enabled. This option improves (sharpens) the look of junction contours at low resolutions, so it should be used for detail enhancement (small stones, bolts and so on).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if the cavity option for the SSAO effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOCavityIntensity(float)">
			<summary>
			Sets the intensity of sharpening of contours for the cavity option (see the setSSAOCavity() method).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> Sharpening intensity value. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAOCavityIntensity const">
			<summary>
			Returns the intensity of sharpening of contours for the cavity option (see the setSSAOCavity() method).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Sharpening intensity value. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOCavityRadius(float)">
			<summary>
			Sets the size of junction contours area for the cavity option (see the setSSAOCavity() method).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="radius"> Size of junction contours area. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAOCavityRadius const">
			<summary>
			Returns the size of junction contours area for the cavity option (see the setSSAOCavity() method).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Size of junction contours area. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOIntensity(float)">
			<summary>
			Sets the intensity of the SSAO (Screen Space Ambient Occlusion) for the scene. The intensity value affects brightness of shadows:											By the minimum value of 0.0f, the ambient occlusion shadowing is the lightest.					Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> Intensity value of the SSAO (Screen Space Ambient Occlusion) for the scene. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAOIntensity const">
			<summary>
			Returns the intensity of the SSAO (Screen Space Ambient Occlusion) for the scene. The intensity value affects brightness of shadows:											By the minimum value of 0.0f, the ambient occlusion shadowing is the lightest.					When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>SSAO intensity value. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOIntensityLightedSide(float)">
			<summary>
			Sets the intensity of the SSAO (Screen Space Ambient Occlusion) for the scene object's lighted side.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="side"> SSAO intensity value for the scene object's lighted side. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAOIntensityLightedSide const">
			<summary>
			Returns the intensity of SSAO(Screen Space Ambient Occlusion) for the scene objects' lighted side.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>SSAO intensity value for the scene object's lighted side. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOIntensityReflection(float)">
			<summary>
			Sets the intensity of SSAO (Screen Space Ambient Occlusion) on reflections.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="reflection"> SSAO intensity value for reflections. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAOIntensityReflection const">
			<summary>
			Returns the intensity of SSAO (Screen Space Ambient Occlusion) on reflections.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>SSAO intensity value for reflections. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAONoise(bool)">
			<summary>
			Enables or disables noise for the SSAO (Screen Space Ambient Occlusion) effect. This option reduces banding effect.					It is recommended to use noise with TAA enabled.
			</summary> 
			<param name="noise"> 1 to enable SSAO noise, 0 to disable. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isSSAONoise const">
			<summary>
			Returns the value indicating if noise for the SSAO (Screen Space Ambient Occlusion) effect is enabled. This option reduces banding effect.					It is recommended to use noise with TAA enabled.
			</summary>  
			<returns>1 if SSAO noise is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOQuality(int)">
			<summary>
			Sets the quality of SSAO(Screen Space Ambient Occlusion).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="quality"> Quality of SSAO:0 - low quality.1 - medium quality (by default).2 - high quality.3 - ultra quality. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAOQuality const">
			<summary>
			Returns the quality of SSAO (Screen Space Ambient Occlusion).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Quality of SSAO:0 - low quality.1 - medium quality (by default).2 - high quality.3 - ultra quality.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAORadius(float)">
			<summary>
			Sets the radius of SSAO (Screen Space Ambient Occlusion).The radius is the distance for each of the points in the world space, up to which they can shadow their neighboring points:											By low values, each point can cast shadows only on the points in the close range.						By high values, each point casts shadows on points at more distant locations.					Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="radius"> SSAO radius value. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAORadius const">
			<summary>
			Returns the radius of SSAO (Screen Space Ambient Occlusion).The radius is the distance for each of the points in the world space, up to which they can shadow their neighboring points:											By low values, each point can cast shadows only on the points in the close range.						By high values, each point casts shadows on points at more distant locations.					When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>SSAO radius value.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOThreshold(float)">
			<summary>
			Sets the threshold value for the SSAO (Screen Space Ambient Occlusion) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> SSAO threshold value in the range [0.0f; 1.0f]. The default value is 0.5f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAOThreshold const">
			<summary>
			Returns the current threshold value for the SSAO (Screen Space Ambient Occlusion) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current SSAO threshold value.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAORayTracing(bool)">
			<summary>
			Enables or disables ray tracing for SSAO (Screen Space Ambient Occlusion) calculation. When enabled, SSAO provides more realistic shadows between the objects.					Ray-traced SSAO calculation available only when the SSRTGI technique is enabled.
			</summary> 
			<param name="tracing"> 1 to enable ray tracing for SSAO calculation, 0 to disable. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isSSAORayTracing const">
			<summary>
			Returns a value indicating if ray tracing is used for SSAO (Screen Space Ambient Occlusion) calculation. When enabled, SSAO provides more realistic shadows between the objects.					Ray-traced SSAO calculation available only when the SSRTGI technique is enabled.
			</summary>  
			<returns>1 if ray tracing is used for SSAO calculation; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAORayTracingDenoise(bool)">
			<summary>
			Enables or disables noise reduction for the ray-traced SSAO (Screen Space Ambient Occlusion). This option reduces noise by using blur effect.					Ray-traced SSAO calculation available only when the SSRTGI technique is enabled.
			</summary> 
			<param name="denoise"> 1 to enable noise reduction for the ray-traced SSAO, 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Render.isSSAORayTracingDenoise const">
			<summary>
			Returns the value indicating if noise reduction for the ray-traced SSAO (Screen Space Ambient Occlusion) is enabled. This option reduces noise by using blur effect.					Ray-traced SSAO calculation available only when the SSRTGI technique is enabled.
			</summary>  
			<returns>1 if noise reduction for the ray-traced SSAO is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAORayTracingThreshold(float)">
			<summary>
			Sets the threshold value for the ray-traced SSAO (Screen Space Ambient Occlusion).					Ray-traced SSAO calculation available only when the SSRTGI technique is enabled.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> SSAO ray tracing threshold value. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAORayTracingThreshold const">
			<summary>
			Returns the current threshold value for the ray-traced SSAO (Screen Space Ambient Occlusion).					Ray-traced SSAO calculation available only when the SSRTGI technique is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>SSAO ray tracing threshold value. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOResolution(int)">
			<summary>
			Sets the resolution of SSAO (Screen Space Ambient Occlusion).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="resolution"> Resolution of SSAO:0 - quarter resolution.1 - half resolution (by default).2 - full resolution. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAOResolution const">
			<summary>
			Returns the resolution of SSAO (Screen Space Ambient Occlusion).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Resolution of SSAO:0 - quarter resolution.1 - half resolution (by default).2 - full resolution.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGI(bool)">
			<summary>
			Enables or disables the SSGI (Screen Space Global Illumination) effect.
			</summary> 
			<param name="ssgi"> 1 to enable the SSGI effect, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isSSGI const">
			<summary>
			Returns the value indicating if the SSGI (Screen Space Global Illumination) effect is enabled.
			</summary>  
			<returns>1 if the SSGI effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGIIntensity(float)">
			<summary>
			Sets the intensity of the SSGI (Screen Space Global Illumination) for the scene.											By the minimum value of 0.0f, the global illumination is the darkest.					Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> SSGI intensity value. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIIntensity const">
			<summary>
			Returns the intensity of the SSGI (Screen Space Global Illumination) for the scene.											By the minimum value of 0.0f, the global illumination is the darkest.					When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>SSGI intensity value. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGIRadius(float)">
			<summary>
			Sets the radius of the SSGI (Screen Space Global Illumination). The radius determines the size of the region surrounding a particular sampling point:											By low values, each point affects only the points in the close range.						By high values, each point affects farther positioned points.
			</summary> 
			<param name="radius"> SSGI radius value. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIRadius const">
			<summary>
			Returns the radius of the SSGI (Screen Space Global Illumination). The radius determines the size of the region surrounding a particular sampling point:											By low values, each point affects only the points in the close range.						By high values, each point affects farther positioned points.
			</summary>  
			<returns>SSGI radius value. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGIDenoise(bool)">
			<summary>
			Enables or disables noise reduction for the ray-traced SSGI (Screen Space Global Illumination). This option reduces noise by using blur effect.					Ray-traced SSGI calculation available only when the SSRTGI technique is enabled.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="denoise"> true to enable noise reduction for the ray-traced SSGI, false to disable. </param> 
		</member>
		<member name="M:Unigine.Render.isSSGIDenoise const">
			<summary>
			Returns a value indicating if noise reduction for the ray-traced SSGI (Screen Space Global Illumination) is enabled. This option reduces noise by using blur effect.					Ray-traced SSGI calculation available only when the SSRTGI technique is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>true if noise reduction for the ray-traced SSGI is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGIThreshold(float)">
			<summary>
			Sets the threshold value for the ray-traced SSGI (Screen Space Global Illumination).					Ray-traced SSGI calculation available only when the SSRTGI technique is enabled.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> SSGI ray tracing threshold value. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIThreshold const">
			<summary>
			Returns the current threshold value for the ray-traced SSGI (Screen Space Global Illumination).					Ray-traced SSGI calculation available only when the SSRTGI technique is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>SSGI ray tracing threshold value. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGIResolutionColor(int)">
			<summary>
			Sets the resolution of the color buffer used for SSGI (Screen Space Global Illumination) calculation. This option significantly affects performance.
			</summary> 
			<param name="color"> One of the following values:0 - quarter resolution.1 - half resolution (by default).2 - full resolution. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIResolutionColor const">
			<summary>
			Returns the resolution of the color buffer used for SSGI (Screen Space Global Illumination) calculation.
			</summary>  
			<returns>One of the following values:0 - quarter resolution.1 - half resolution (by default).2 - full resolution.</returns>
		</member>
		<member name="M:Unigine.Render.setSSR(bool)">
			<summary>
			Enables or disables the SSR (Screen Space Reflections) effect.
			</summary> 
			<param name="ssr"> 1 to enable the SSR effect, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSSR const">
			<summary>
			Returns the value indicating if the SSR (Screen Space Reflections) effect is enabled.
			</summary>  
			<returns>1 if the SSR effect is enabled; otherwise, 0. The default value is 1.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRDenoise(bool)">
			<summary>
			Enables or disables noise reduction for the SSR (Screen Space Reflections) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="denoise"> 1 to enable noise reduction for the SSR effect, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSSRDenoise const">
			<summary>
			Returns the value indicating if noise reduction for the SSR (Screen Space Reflections) effect is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if noise reduction for the SSR effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRFastTracing(bool)">
			<summary>
			Enables or disables fast tracing for the SSR (Screen Space Reflections) effect. This mode makes it possible to obtain distant reflections using low number of steps while keeping performance high. However, tiny objects may not be reflected. Disabling this mode improves quality but significantly drops performance.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="tracing"> 1 to enable SSR fast tracing, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isSSRFastTracing const">
			<summary>
			Returns the value indicating if fast tracing for the SSR (Screen Space Reflections) effect is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if SSR fast tracing is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRIncreasedAccuracy(bool)">
			<summary>
			Enables or disables increased accuracy for the SSR (Screen Space Reflections). This option reduces visual artifacts around objects, which can appear at resolution lower than full, by increasing accuracy of the last step.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="accuracy"> 1 to enable increased accuracy for the SSR, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isSSRIncreasedAccuracy const">
			<summary>
			Returns a value indicating if increased accuracy option is enabled for the SSR (Screen Space Reflections). This option reduces visual artifacts around objects, which can appear at resolution lower than full, by increasing accuracy of the last step.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if increased accuracy is enabled for the SSR; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRNoiseRay(float)">
			<summary>
			Sets the intensity of the ray noise used for SSR (Screen Space Reflections) calculation. This parameter is used to reduce the banding effect on rough reflections by using the noise.					Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="ray"> Ray noise intensity in range [0.0f;1.0f]. The default value is 0.5f. The higher is the value, the less pronounced is the banding effect. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRNoiseRay const">
			<summary>
			Returns the intensity of the ray noise used for SSR (Screen Space Reflections) calculation. This parameter is used to reduce the banding effect on rough reflections by using the noise.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Ray noise intensity.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRNoiseStep(float)">
			<summary>
			Sets the intensity of the step noise used for SSR (Screen Space Reflections) calculation. This parameter is used to reduce the banding effect of tracing by using the noise.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="step"> Step noise intensity. The default value is 0.3f. The higher is the value, the less pronounced is the banding effect. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRNoiseStep const">
			<summary>
			Returns the intensity of the step noise used for SSR (Screen Space Reflections) calculation.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Step noise intensity.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRNumRays(int)">
			<summary>
			Sets the number of rays of SSR (Screen Space Reflections) per pixel that are used to calculate rough refrections. Using more rays provides more precise SSR roughness calculation, however, it is more expensive.					Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="rays"> Number of rays per pixel within the [1; 64] range. The default value is 4. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRNumRays const">
			<summary>
			Returns the number of rays of SSR (Screen Space Reflections) per pixel that are used to calculate rough refrections.					When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Number of rays per pixel within the [1; 64] range.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRNumSteps(int)">
			<summary>
			Sets the number of steps of SSR (Screen Space Reflections) per ray that are used for trace calculation. Defines accuracy of reflections and causes a reasonable performance impact. The higher the value, the more accurate obstacles between objects are accounted.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="steps"> Number of steps per ray within the [1; 64] range. The default value is 16. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRNumSteps const">
			<summary>
			Returns the number of steps of SSR (Screen Space Reflections) per ray that are used for trace calculation. The number of steps defines accuracy of reflections and causes a reasonable performance impact. The higher the value, the more accurate obstacles between objects are accounted.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Number of steps per ray within the [1; 64] range.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRResolution(int)">
			<summary>
			Sets the resolution of SSR (Screen Space Reflections).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="resolution"> SSR resolution:0 - quarter resolution.1 - half resolution (by default).2 - full resolution. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRResolution const">
			<summary>
			Returns the resolution of SSR (Screen Space Reflections).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>One of the following values:0 - quarter resolution.1 - half resolution (by default).2 - full resolution.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRResolutionColor(int)">
			<summary>
			Sets the resolution of the color buffer used for SSR (Screen Space Reflections) calculation. This option significantly affects performance.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="color"> Color buffer resolution:0 - quarter resolution (by default).1 - half resolution.2 - full resolution. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRResolutionColor const">
			<summary>
			Returns the resolution of the color buffer used for SSR (Screen Space Reflections) calculation.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Color buffer resolution:0 - quarter resolution (by default).1 - half resolution.2 - full resolution.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRResolutionDepth(int)">
			<summary>
			Sets the resolution of the depth buffer used for SSR (Screen Space Reflections) calculation. This option affects detailing of reflections of tiny objects.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="depth"> Depth buffer resolution:0 - quarter resolution (by default).1 - half resolution.2 - full resolution.To gain performance, this option can be set to lower values while enabling increased accuracy. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRResolutionDepth const">
			<summary>
			Returns the resolution of the depth buffer used for SSR (Screen Space Reflections) calculation.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Depth buffer resolution:0 - quarter resolution (by default).1 - half resolution.2 - full resolution.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRStepSize(float)">
			<summary>
			Sets the size of the trace step used for SSR (Screen Space Reflections) calculation. The higher the value, the longer the trace. However, tiny objects may be missed. The lower the value, the more detailed will be reflections of the tiny objects.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="size"> Step size. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRStepSize const">
			<summary>
			Returns the size of the trace step used for SSR (Screen Space Reflections) calculation.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Step size.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGI(bool)">
			<summary>
			Enables or disables the SSRTGI (Screen Space Ray-Traced Global Illumination) effect.
			</summary> 
			<param name="ssrtgi"> 1 to enable the SSRTGI effect, 0 to disable.  The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isSSRTGI const">
			<summary>
			Returns a value indicating if the SSRTGI (Screen Space Ray-Traced Global Illumination) effect is enabled.
			</summary>  
			<returns>1 if the SSRTGI effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGIFastTracing(bool)">
			<summary>
			Enables or disables fast tracing for the SSRTGI (Screen Space Ray-Traced Global Illumination). This option dynamically changes step size to obtain indirect illumination bounces using low number of steps while keeping performance high. Disabling this option improves quality, but significantly reduces performance. The SSRTGI effect must be enabled (see the setSSRTGI() method).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="tracing"> 1 to enable fast tracing for the SSRTGI, 0 to disable. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isSSRTGIFastTracing const">
			<summary>
			Returns a value indicating if fast tracing is enabled for the SSRTGI (Screen Space Ray-Traced Global Illumination).
			</summary>  
			<returns>1 if the SSRTGI fast tracing is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGIIncreasedAccuracy(bool)">
			<summary>
			Enables or disables increased accuracy for the SSRTGI (Screen Space Ray-Traced Global Illumination). This option reduces visual artifacts by increasing accuracy of the last step. The SSRTGI effect must be enabled (see the setSSRTGI() method).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="accuracy"> 1 to enable increased accuracy for the SSRTGI, 0 to disable. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isSSRTGIIncreasedAccuracy const">
			<summary>
			Returns a value indicating if increased accuracy option is enabled for the SSRTGI (Screen Space Ray-Traced Global Illumination).
			</summary>  
			<returns>1 if increased accuracy is enabled for the SSRTGI; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGINoiseRay(float)">
			<summary>
			Sets the intensity of the ray noise used for SSRTGI calculation. This parameter is used to reduce the banding effect on the final image by using the noise: the higher is the value, the less pronounced is the banding effect. The SSRTGI effect must be enabled (see the setSSRTGI() method).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="ray"> Ray noise intensity in range [0.0f;1.0f]. The default value is 0.5f. The higher is the value, the less pronounced is the banding effect. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRTGINoiseRay const">
			<summary>
			Returns the intensity of the ray noise used for SSRTGI calculation.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Ray noise intensity in range [0.0f;1.0f].</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGINoiseStep(float)">
			<summary>
			Sets the intensity of the step noise used for SSRTGI calculation. This parameter is used to reduce the banding effect of tracing by using the noise: the higher is the value, the less pronounced is the banding effect. The SSRTGI effect must be enabled (see the setSSRTGI() method).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="step"> Step noise intensity in range [0.0f;1.0f]. The default value is 0.5f. The higher is the value, the less pronounced is the banding effect. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRTGINoiseStep const">
			<summary>
			Returns the intensity of the step noise used for SSRTGI calculation.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Step noise intensity in range [0.0f;1.0f].</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGINumRays(int)">
			<summary>
			Sets the number of rays of SSRTGI per pixel that are to calculate the final image. Using more rays provides more precise SSRTGI calculation, however, it is more expensive. The SSRTGI effect must be enabled (see the setSSRTGI() method).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="rays"> Number of rays per pixel in range [1;1024]. The default value is 8. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRTGINumRays const">
			<summary>
			Returns the number of rays of SSRTGI per pixel that are to calculate the final image in range [1;1024].When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Number of rays.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGINumSteps(int)">
			<summary>
			Sets the number of steps of SSRTGI per ray that are used for trace calculation. The higher the value, the more accurate obstacles between objects are accounted. However, this option significantly affects performance. The SSRTGI effect must be enabled (see the setSSRTGI() method).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="steps"> Number of steps in range [1;256]. The default value is 8. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRTGINumSteps const">
			<summary>
			Returns the number of steps of SSRTGI per ray that are used for trace calculation.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Number of steps in range [1;256].</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGIResolution(int)">
			<summary>
			Sets the resolution of SSRTGI (Screen Space Ray-Traced Global Illumination). This option significantly affects performance. The SSRTGI effect must be enabled (see the setSSRTGI() method).
			</summary> 
			<param name="resolution"> SSRTGI resolution:0 - quarter resolution.1 - half resolution (by default).2 - full resolution. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRTGIResolution const">
			<summary>
			Returns the resolution of SSRTGI (Screen Space Ray-Traced Global Illumination).
			</summary>  
			<returns>SSRTGI resolution:0 - quarter resolution.1 - half resolution (by default).2 - full resolution.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGIResolutionDepth(int)">
			<summary>
			Sets the resolution of the depth buffer used for SSRTGI (Screen Space Ray-Traced Global Illumination) calculation. This option significantly affects performance. The SSRTGI effect must be enabled (see the setSSRTGI() method).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="depth"> Depth buffer resolution:0 - quarter resolution (by default).1 - half resolution.2 - full resolution.To gain performance this option can be set to lower values while enabling the increased accuracy. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRTGIResolutionDepth const">
			<summary>
			Returns the resolution of the depth buffer used for SSRTGI (Screen Space Ray-Traced Global Illumination) calculation.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Depth buffer resolution:0 - quarter resolution (by default).1 - half resolution.2 - full resolution.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGIStepSize(float)">
			<summary>
			Sets the size of the trace step used for SSRTGI calculation. The higher the value, the longer the trace. However, tiny objects may be missed. The lower the value, the more detailed will be the tiny objects. The SSRTGI effect must be enabled (see the setSSRTGI() method).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="size"> Step size. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRTGIStepSize const">
			<summary>
			Returns the size of the trace step used for SSRTGI calculation.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Step size.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGIUpscaling(bool)">
			<summary>
			Enables or disables upscaling for the SSRTGI (Screen Space Ray-Traced Global Illumination). This option makes the quality of edges in half and quarter resolution look closer to full. The SSRTGI effect must be enabled (see the setSSRTGI() method).
			</summary> 
			<param name="upscaling"> 1 to enable upscaling for the SSRTGI, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isSSRTGIUpscaling const">
			<summary>
			Returns a value indicating if the upscaling option is enabled for the SSRTGI (Screen Space Ray-Traced Global Illumination).
			</summary>  
			<returns>1 if the SSRTGI upscaling is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRThreshold(float)">
			<summary>
			Sets the threshold used for SSR (Screen Space Reflections) calculation. The threshold limits imitation of reflections in areas where SSR cannot get information. The higher the value, the less this effect is.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> SSR threshold value. The default value is 1.0f </param> 
		</member>
		<member name="M:Unigine.Render.getSSRThreshold const">
			<summary>
			Returns the threshold used for SSR (Screen Space Reflections) calculation. The threshold limits imitation of reflections in areas where SSR cannot get information. The higher the value, the less this effect is.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>SSR threshold.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRThresholdOcclusion(float)">
			<summary>
			Sets the occlusion threshold value. The occlusion threshold limits imitation of environment cubemap occlusion in areas where SSR cannot get information. The higher the value, the less this effect is. This parameter is mainly used for indoor environment to correct false reflections on occluded areas (false reflections are replaced with black color). For outdoor environment higher values of this parameter are recommended.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="occlusion"> SSR threshold occlusion. The default value is 1.0f </param> 
			<returns>Occlusion threshold value.</returns>
		</member>
		<member name="M:Unigine.Render.getSSRThresholdOcclusion const">
			<summary>
			Returns the current occlusion threshold value. The occlusion threshold limits imitation of environment cubemap occlusion in areas where SSR cannot get information. The higher the value, the less this effect is. This parameter is mainly used for indoor environment to correct false reflections on occluded areas (false reflections are replaced with black color). For outdoor environment higher values of this parameter are recommended.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>SSR threshold occlusion.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRVisibilityRoughnessMax(float)">
			<summary>
			Sets the maximum roughness value, starting from which the SSR (Screen Space Reflections) effect is not rendered.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="val"> Maximum roughness value within the [0.0f; 1.0f] range. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRVisibilityRoughnessMax const">
			<summary>
			Returns the maximum roughness value, starting from which the SSR (Screen Space Reflections) effect is not rendered.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Maximum roughness value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRVisibilityRoughnessMin(float)">
			<summary>
			Sets the minimum roughness value, starting from which the SSR (Screen Space Reflections) effect begins to fade out.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="val"> Minimum roughness value within the [0.0f; 1.0f] range. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRVisibilityRoughnessMin const">
			<summary>
			Returns the minimum roughness value, starting from which the SSR (Screen Space Reflections) effect begins to fade out.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Minimum roughness value within the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSS(bool)">
			<summary>
			Enables or disables the SSSSS (screen-space subsurface scattering) effect.
			</summary> 
			<param name="sssss"> 1 to enable the SSSSS effect, 0 to disable. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isSSSSS const">
			<summary>
			Returns a value indicating if the SSSSS (screen-space subsurface scattering) effect is enabled.
			</summary>  
			<returns>1 if the SSS effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSColor(Unigine.Math.vec4)">
			<summary>
			Sets a subsurface scattering color used to simulate the subsurface component of skin lighting, i.e. the light that bounces inside of the subsurface tissue layers (epidermis and dermis) before exiting. For skin, subsurface color is reddish, due to blood circulating in skin tissues.
			</summary> 
			<param name="color"> Subsurface scattering color. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSColor const">
			<summary>
			Returns the current subsurface scattering color.
			</summary>  
			<returns>Subsurface scattering color.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSQuality(int)">
			<summary>
			Sets the quality of the SSSSS (screen-space subsurface scattering) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="quality"> SSS quality:0 - low quality.1 - medium quality (by default).2 - high quality.3 - ultra quality. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSQuality const">
			<summary>
			Returns the quality of the SSSSS (screen-space subsurface scattering) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>SSS quality:0 - low quality.1 - medium quality (by default).2 - high quality.3 - ultra quality.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSRadius(float)">
			<summary>
			Sets the subsurface scattering radius: distance in the screen space, within which colors will be sampled. It controls how much wrinkles, pores and cavities will be blurred and highlighted. The higher the value, the farther subsurface scattering reaches. Too high values result in the ghosting effect. By the minimum value of 0, no subsurface scattering is rendered.
			</summary> 
			<param name="radius"> Subsurface scattering radius. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSRadius const">
			<summary>
			Returns the current subsurface scattering radius.
			</summary>  
			<returns>Subsurface scattering radius value.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSResolution(int)">
			<summary>
			Sets the resolution of the SSSSS (screen-space subsurface scattering) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="resolution"> SSS resolution:0 - half resolution (by default).1 - full resolution. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSResolution const">
			<summary>
			Returns the resolution of the SSSSS (screen-space subsurface scattering) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>SSS resolution:0 - half resolution (by default).1 - full resolution.</returns>
		</member>
		<member name="M:Unigine.Render.setViewportMode(Render::VIEWPORT_MODE)">
			<summary>
			Sets a new viewport rendering mode (default, stereo, or panoramic).
			</summary> 
			<param name="mode"> New viewport mode to be set. One of the VIEWPORT_MODE_* values. </param> 
		</member>
		<member name="M:Unigine.Render.getViewportMode const">
			<summary>
			Returns the current viewport rendering mode (default, stereo, or panoramic).
			</summary>  
			<returns>Current viewport mode. One of the VIEWPORT_MODE_* values.</returns>
		</member>
		<member name="M:Unigine.Render.isViewportModeStereo(Render::VIEWPORT_MODE)">
			<summary>
			Returns a value indicating if the specified mode is one of the stereo rendering modes.
			</summary> 
			<param name="mode"> Viewport mode to be checked. One of the VIEWPORT_MODE_* values. </param> 
			<returns>true if the specified mode is one of the stereo rendering modes; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Render.isViewportModePanorama(Render::VIEWPORT_MODE)">
			<summary>
			Returns a value indicating if the specified mode is one of the panorama rendering modes.
			</summary> 
			<param name="mode"> Viewport mode to be checked. One of the VIEWPORT_MODE_* values. </param> 
			<returns>true if the specified mode is one of the panorama rendering modes; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Render.setStereoDistance(float)">
			<summary>
			Sets the focal distance for stereo rendering (distance in the world space to the point where two views line up, i.e. to the zero parallax plane).
			</summary> 
			<param name="distance"> Focal distance for stereo rendering, in units. </param> 
		</member>
		<member name="M:Unigine.Render.getStereoDistance const">
			<summary>
			Returns the focal distance for stereo rendering (distance in the world space to the point where two views line up).
			</summary>  
			<returns>Focal distance for stereo rendering, in units.</returns>
		</member>
		<member name="M:Unigine.Render.setStereoOffset(float)">
			<summary>
			Sets the virtual camera offset (an offset after the perspective projection).
			</summary> 
			<param name="offset"> Virtual camera offset in units. </param> 
		</member>
		<member name="M:Unigine.Render.getStereoOffset const">
			<summary>
			Returns the virtual camera offset (an offset after the perspective projection).
			</summary>  
			<returns>Virtual camera offset in units.</returns>
		</member>
		<member name="M:Unigine.Render.setStereoRadius(float)">
			<summary>
			Sets the radius for stereo (the half of the separation distance between the cameras).
			</summary> 
			<param name="radius"> Stereo radius, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Render.getStereoRadius const">
			<summary>
			Returns the current radius for stereo (the half of the separation distance between the cameras).
			</summary>  
			<returns>Stereo radius, in units.</returns>
		</member>
		<member name="M:Unigine.Render.setSupersampling(float)">
			<summary>
			Sets the number of samples per pixel used for supersampling.
			</summary> 
			<param name="supersampling"> Number of samples per pixel within the range [1e-6f; 8.0f]. The default value is 1.0f </param> 
		</member>
		<member name="M:Unigine.Render.getSupersampling const">
			<summary>
			Returns the number of samples per pixel used for supersampling.
			</summary>  
			<returns>Number of samples per pixel.</returns>
		</member>
		<member name="M:Unigine.Render.setTAAFramesByColor(bool)">
			<summary>
			Enables or disables the TAA color clamping option. When enabled, the pixel color of the current and the previous frames is clamped. The image becomes more sharp, however, flickering can appear. Clamping is available only when TAA is enabled.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="color"> 1 to enable the TAA color clamping option, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isTAAFramesByColor const">
			<summary>
			Returns a value indicating if the TAA color clamping option is enabled. When enabled, the pixel color of the current and the previous frames is clamped. Clamping is available only when TAA is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if TAA color clamping is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTAADiagonalNeighbors(bool)">
			<summary>
			Sets a value indicating if diagonally neighboring pixels are to be taken into account in the process of color clamping for TAA. This mode can be used for relatively static scenes when improved antialiasing is required. In case of a dynamic scene, blurring artefacts near the screen borders may appear.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="neighbors"> 1 to take diagonally neighboring pixels into account in the process of color clamping for TAA, 0 to ignore them. </param> 
		</member>
		<member name="M:Unigine.Render.isTAADiagonalNeighbors const">
			<summary>
			Returns a value indicating if diagonally neighboring pixels are to be taken into account in the process of color clamping for TAA. This mode can be used for relatively static scenes when improved antialiasing is required. In case of a dynamic scene, blurring artefacts near the screen borders may appear.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if diagonally neighboring pixels are to be taken into account in the process of color clamping for TAA; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTAAFixFlicker(bool)">
			<summary>
			Enables or disables the TAA fix flicker option. This option fixes flickering edges caused by TAA: it removes bright pixels by using the pixel brightness information from the previous frame. It is recommended to enable the option for bright thin ropes, wires and lines. The option is available only when TAA is enabled.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="flicker"> 1 to enable the TAA fix flicker option, 0 to disable it.  The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isTAAFixFlicker const">
			<summary>
			Returns a value indicating if the TAA fix flicker option is enabled. This option fixes flickering edges caused by TAA: it removes bright pixels by using the pixel brightness information from the previous frame. It is recommended to enable the option for bright thin ropes, wires and lines. The option is available only when TAA is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if the TAA fix flicker option is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTAAFrameCount(float)">
			<summary>
			Sets the frame count of TAA (Temporal Anti-Aliasing). Specifies the number of frames combined for pixels. The higher the value, the more frames are combined into the final image and the better anti-aliasing.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="count"> TAA frame count value. The default value is 30.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getTAAFrameCount const">
			<summary>
			Returns the frame count of TAA (Temporal Anti-Aliasing). Specifies the number of frames combined for pixels. The higher the value, the more frames are combined into the final image and the better anti-aliasing.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>TAA frame count value.</returns>
		</member>
		<member name="M:Unigine.Render.setTAAMaxFramesByVelocity(float)">
			<summary>
			Sets the maximum frame count of TAA (Temporal Anti-Aliasing). Specifies the maximum number of frames combined for pixels that don't move relative to the screen space.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="velocity"> Maximum TAA frame count value. The default value is 60.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getTAAMaxFramesByVelocity const">
			<summary>
			Returns the maximum frame count of TAA (Temporal Anti-Aliasing). Specifies the maximum number of frames combined for pixels that don't move relative to the screen space.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Maximum TAA frame count value.</returns>
		</member>
		<member name="M:Unigine.Render.setTAAMinFramesByVelocity(float)">
			<summary>
			Sets the minimum frame count of TAA (Temporal Anti-Aliasing). Specifies the minimum number of frames combined for fast moving pixels on the screen.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="velocity"> Minimum TAA frame count value. The default value is 4.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getTAAMinFramesByVelocity const">
			<summary>
			Returns the minimum frame count of TAA (Temporal Anti-Aliasing). Specifies the minimum number of frames combined for fast moving pixels on the screen.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Minimum TAA frame count value.</returns>
		</member>
		<member name="M:Unigine.Render.setTAAPreserveDetails(float)">
			<summary>
			Sets the detail level of TAA (Temporal Anti-Aliasing). The higher the value, the more detailed the image is. Can produce additional flickering.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="details"> TAA detail level value. The default value is 1.5f. </param> 
		</member>
		<member name="M:Unigine.Render.getTAAPreserveDetails const">
			<summary>
			Returns the detail level of TAA (Temporal Anti-Aliasing). The higher the value, the more detailed the image is. Can produce additional flickering.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>TAA detail level value.</returns>
		</member>
		<member name="M:Unigine.Render.setTAAFramesByVelocity(bool)">
			<summary>
			Enables or disables the TAA velocity clamping option. This option controls the number of frames combined for pixels depending on the velocity in the fragment: the number of frames is clamped to the [Min frame count;Max frame count]. It reduces blurring in dynamic scenes with a lot of moving objects.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="velocity"> 1 to enable the TAA velocity clamping option, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isTAAFramesByVelocity const">
			<summary>
			Returns a value indicating if the TAA velocity clamping option is enabled. T This option controls the number of frames combined for pixels depending on the velocity in the fragment: the number of frames is clamped to the [Min frame count;Max frame count]. It reduces blurring in dynamic scenes with a lot of moving objects.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if TAA velocity clamping is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTAAFramesVelocityThreshold(float)">
			<summary>
			Sets the velocity threshold of TAA (Temporal Anti-Aliasing), at which pixels are treated as fast moving ones.
			</summary> 
			<param name="threshold"> TAA velocity threshold value. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getTAAFramesVelocityThreshold const">
			<summary>
			Returns the velocity threshold of TAA (Temporal Anti-Aliasing), at which pixels are treated as fast moving ones.
			</summary>  
			<returns>TAA velocity threshold value.</returns>
		</member>
		<member name="M:Unigine.Render.setTerrainGlobalAnisotropy(int)">
			<summary>
			Sets the global terrain texture anisotropy level (degree of anisotropic filtering). Anisotropy for the global terrain has a huge impact for the performance if terrain has a lot of tiled detail materials as anisotropy filtering for the terrain is much slower than for the other objects.
			</summary> 
			<param name="anisotropy"> Anisotropy level:0 - anisotropy level 1.1 - anisotropy level 2.2 - anisotropy level 4 (by default).3 - anisotropy level 8.4 - anisotropy level 16. </param> 
		</member>
		<member name="M:Unigine.Render.getTerrainGlobalAnisotropy const">
			<summary>
			Returns the current global terrain texture anisotropy level (degree of anisotropic filtering). Anisotropy for the global terrain has a big impact for the performance if terrain has a lot of tiled detail materials.
			</summary>  
			<returns>Anisotropy level:0 - anisotropy level 1.1 - anisotropy level 2.2 - anisotropy level 4 (by default).3 - anisotropy level 8.4 - anisotropy level 16.</returns>
		</member>
		<member name="M:Unigine.Render.setTerrainGlobalDisplacement(bool)">
			<summary>
			Enables or disables displacement mapping for the global terrain.
			</summary> 
			<param name="displacement"> true to enable displacement mapping for the global terrain; false to disable it. The default value is true. </param> 
		</member>
		<member name="M:Unigine.Render.isTerrainGlobalDisplacement const">
			<summary>
			Returns a value indicating if displacement mapping is enabled for the global terrain.
			</summary>  
			<returns>true if displacement mapping is enabled for the global terrain; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setTerrainGlobalDisplacementNormal(bool)">
			<summary>
			Enables or disables use of normals in displacement mapping for global terrain rendering.
			</summary> 
			<param name="normal"> true to enable displacement mapping for the global terrain; false to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isTerrainGlobalDisplacementNormal const">
			<summary>
			Returns a value indicating if displacement mapping for global terrain rendering uses normals.
			</summary>  
			<returns>true if displacement mapping for global terrain rendering uses normals; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setTerrainGlobalHoles(bool)">
			<summary>
			Sets a value indicating if decal-based holes for the global terrain are enabled.
			</summary> 
			<param name="holes"> true to enable decal-based holes for the global terrain; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.Render.isTerrainGlobalHoles const">
			<summary>
			Returns a value indicating if decal-based holes for the global terrain are enabled.
			</summary>  
			<returns>true if decal-based holes for the global terrain are enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setTerrainGlobalTriplanar(bool)">
			<summary>
			Enables or disables triplanar texture mapping for the global terrain.
			</summary> 
			<param name="triplanar"> true to enable triplanar texture mapping for the global terrain; false to use planar UV mapping instead. </param> 
		</member>
		<member name="M:Unigine.Render.isTerrainGlobalTriplanar const">
			<summary>
			Returns a value indicating if triplanar texture mapping is enabled for the global terrain.
			</summary>  
			<returns>true if triplanar texture mapping is enabled for the global terrain; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setTexturesAnisotropy(int)">
			<summary>
			Sets the anisotropy level for textures (degree of anisotropic filtering).
			</summary> 
			<param name="anisotropy"> Anisotropy level:0 - anisotropy level 1.1 - anisotropy level 2.2 - anisotropy level 4.3 - anisotropy level 8 (by default).4 - anisotropy level 16. </param> 
		</member>
		<member name="M:Unigine.Render.getTexturesAnisotropy const">
			<summary>
			Returns current anisotropy level for textures (degree of anisotropic filtering).
			</summary>  
			<returns>Anisotropy level:0 - anisotropy level 1.1 - anisotropy level 2.2 - anisotropy level 4.3 - anisotropy level 8 (by default).4 - anisotropy level 16.</returns>
		</member>
		<member name="M:Unigine.Render.setTexturesFilter(int)">
			<summary>
			Sets the texture filtering mode.
			</summary> 
			<param name="filter"> Texture filtering mode:0 - bilinear filtering.1 - trilinear filtering (by default). </param> 
		</member>
		<member name="M:Unigine.Render.getTexturesFilter const">
			<summary>
			Returns the current texture filtering mode.
			</summary>  
			<returns>Texture filtering mode:0 - bilinear filtering.1 - trilinear filtering (by default).</returns>
		</member>
		<member name="M:Unigine.Render.setTexturesMaxResolution(int)">
			<summary>
			Sets the maximum resolution of all textures. The engine doesn't compress existing textures: it uses specified mipmaps of *.dds textures.
			</summary> 
			<param name="resolution"> Maximum resolution:0 - 128 x 128.1 - 256 x 256.2 - 512 x 512.3 - 1024 x 1024.4 - 2048 x 2048.5 - 4096 x 4096.6 - 8192 x 8192 (by default).7 - 16384 x 16384. </param> 
		</member>
		<member name="M:Unigine.Render.getTexturesMaxResolution const">
			<summary>
			Returns the current maximum resolution of all textures. The engine doesn't compress existing textures: it uses specified mipmaps of *.dds textures.
			</summary>  
			<returns>Maximum resolution:0 - 128 x 128.1 - 256 x 256.2 - 512 x 512.3 - 1024 x 1024.4 - 2048 x 2048.5 - 4096 x 4096.6 - 8192 x 8192 (by default).7 - 16384 x 16384.</returns>
		</member>
		<member name="M:Unigine.Render.setTexturesMinResolution(int)">
			<summary>
			Sets the minimum resolution of all textures. The engine doesn't compress existing textures: it uses specified mip maps of *.dds textures.
			</summary> 
			<param name="resolution"> Minimum resolution:0 - 128 x 128 (by default).1 - 256 x 256.2 - 512 x 512.3 - 1024 x 1024.4 - 2048 x 2048.5 - 4096 x 4096.6 - 8192 x 8192.7 - 16384 x 16384. </param> 
		</member>
		<member name="M:Unigine.Render.getTexturesMinResolution const">
			<summary>
			Returns the current minimum resolution of all textures. The engine doesn't compress existing textures: it uses specified mipmaps of *.dds textures.
			</summary>  
			<returns>Minimum resolution:0 - 128 x 128 (by default).1 - 256 x 256.2 - 512 x 512.3 - 1024 x 1024.4 - 2048 x 2048.5 - 4096 x 4096.6 - 8192 x 8192.7 - 16384 x 16384.</returns>
		</member>
		<member name="M:Unigine.Render.setTexturesQuality(int)">
			<summary>
			Sets the resolution of textures.
			</summary> 
			<param name="quality"> One of the QUALITY_* pre-defined variables. </param> 
		</member>
		<member name="M:Unigine.Render.getTexturesQuality const">
			<summary>
			Returns the current resolution of textures.
			</summary>  
			<returns>One of the QUALITY_* pre-defined variables.</returns>
		</member>
		<member name="M:Unigine.Render.setTransparentBlur(bool)">
			<summary>
			Enables or disables transparent blur for materials. This option makes it possible to render matte transparent materials like matte glass.
			</summary> 
			<param name="blur"> 1 to enable transparent blur for materials, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isTransparentBlur const">
			<summary>
			Returns a value indicating if transparent blur is enabled for materials. This option makes it possible to render matte transparent materials like matte glass.
			</summary>  
			<returns>1 if transparent blur is enabled for materials; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setViewport(Unigine.Ptr{Viewport})">
			<summary>
			Sets a viewport for a main application window.
			</summary> 
			<param name="viewport"> Pointer to Viewport. </param> 
		</member>
		<member name="M:Unigine.Render.getViewport const">
			<summary>
			Returns a main application window viewport.
			</summary>  
			<returns>Pointer to Viewport.</returns>
		</member>
		<member name="M:Unigine.Render.setVirtualResolution(Unigine.Math.vec2)">
			<summary>
			Sets virtual screen resolution. This option can be used to render video with high resolution (e.g. 8K) regardless of monitor's resolution.
			</summary> 
			<param name="resolution"> Virtual screen resolution (X, Y), in pixels. The default value is (-1, -1). </param> 
		</member>
		<member name="M:Unigine.Render.getVirtualResolution const">
			<summary>
			Returns the current virtual screen resolution.
			</summary>  
			<returns>Virtual screen resolution (X, Y), in pixels.</returns>
		</member>
		<member name="M:Unigine.Render.setVREmulation(int)">
			<summary>
			Sets the VR-emulation mode.
			</summary> 
			<param name="emulation"> VR-emulation mode:0 - disabled (by default).1 - HTC Vive emulation.2 - HTC Vive Pro emulation.3 - Oculus Rift emulation. </param> 
		</member>
		<member name="M:Unigine.Render.getVREmulation const">
			<summary>
			Returns the value indicating the current VR-emulation mode.
			</summary>  
			<returns>VR-emulation mode:0 - disabled (by default).1 - HTC Vive emulation.2 - HTC Vive Pro emulation.3 - Oculus Rift emulation.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterAnisotropy(int)">
			<summary>
			Sets water texture anisotropy level.
			</summary> 
			<param name="anisotropy"> Anisotropy level:0 - anisotropy level 1.1 - anisotropy level 2 (by default).2 - anisotropy level 4.3 - anisotropy level 8.4 - anisotropy level 16. </param> 
		</member>
		<member name="M:Unigine.Render.getWaterAnisotropy const">
			<summary>
			Returns current water texture anisotropy level.
			</summary>  
			<returns>Anisotropy level:0 - anisotropy level 1.1 - anisotropy level 2 (by default).2 - anisotropy level 4.3 - anisotropy level 8.4 - anisotropy level 16.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterEnvironmentProbes(bool)">
			<summary>
			Enables or disables rendering of environment probes on the water surface.
			</summary> 
			<param name="probes"> 1 to enable rendering of environment probes on the water surface, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isWaterEnvironmentProbes const">
			<summary>
			Returns a value indicating if rendering of environment probes on the water surface is enabled.
			</summary>  
			<returns>1 if rendering of environment probes on the water surface is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterVoxelProbes(bool)">
			<summary>
			Enables or disables voxel probes for water rendering.
			</summary> 
			<param name="probes"> 1 to enable voxel probes for water rendering, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isWaterVoxelProbes const">
			<summary>
			Returns a value indicating if voxel probes are enabled for water rendering.
			</summary>  
			<returns>1 if voxel probes are enabled for water rendering; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterLights(bool)">
			<summary>
			Enables or disables rendering of lights on the water surface.
			</summary> 
			<param name="lights"> 1 to enable rendering of lights on the water surface, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isWaterLights const">
			<summary>
			Returns a value indicating if rendering of lights on the water surface is enabled.
			</summary>  
			<returns>1 if rendering of lights on the water surface is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterOpacityDepth(bool)">
			<summary>
			Enables or disables writing depth data for water to the opacity buffer.
			</summary> 
			<param name="depth"> 1 to enable writing depth data for water to the opacity buffer, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isWaterOpacityDepth const">
			<summary>
			Returns a value indicating if depth data for water is written to the opacity buffer.
			</summary>  
			<returns>1 if depth data for water is written to the opacity buffer; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterRefractionQuality(int)">
			<summary>
			Sets the quality of water refraction.
			</summary> 
			<param name="quality"> Refraction quality:0 - low quality.1 - medium quality.2 - high quality (by default).3 - ultra quality. </param> 
		</member>
		<member name="M:Unigine.Render.getWaterRefractionQuality const">
			<summary>
			Returns current quality of water refraction.
			</summary>  
			<returns>Refraction quality:0 - low quality.1 - medium quality.2 - high quality (by default).3 - ultra quality.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterShafts(bool)">
			<summary>
			Enables or disables rendering of underwater shafts.
			</summary> 
			<param name="shafts"> 1 to enable rendering of underwater shafts, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isWaterShafts const">
			<summary>
			Returns a value indicating if rendering of underwater shafts is enabled.
			</summary>  
			<returns>1 if rendering of underwater shafts is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterShorelineWetness(bool)">
			<summary>
			Enables or disables the wetness effect for objects near the shoreline.
			</summary> 
			<param name="wetness"> 1 to enable shoreline wetness, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isWaterShorelineWetness const">
			<summary>
			Returns a value indicating if the wetness effect for objects near the shoreline is enabled.
			</summary>  
			<returns>1 if shoreline wetness is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterSSR(bool)">
			<summary>
			Enables or disables the SSR (Screen Space Reflections) effect for water.
			</summary> 
			<param name="waterssr"> 1 to enable the SSR effect for water, 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Render.isWaterSSR const">
			<summary>
			Returns the value indicating if the SSR (Screen Space Reflections) effect is enabled for water.
			</summary>  
			<returns>1 if the SSR effect is enabled for water; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterSSRIncreasedAccuracy(bool)">
			<summary>
			Enables or disables increased accuracy for the water SSR (Screen Space Reflections). This option reduces visual artifacts by increasing accuracy of the last step.
			</summary> 
			<param name="accuracy"> 1 to enable increased accuracy for the water SSR, 0 to disable. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isWaterSSRIncreasedAccuracy const">
			<summary>
			Returns a value indicating if increased accuracy option is enabled for the water SSR (Screen Space Reflections).
			</summary>  
			<returns>1 if increased accuracy is enabled for the water SSR; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setWaterSSRQuality(int)">
			<summary>
			Sets the resolution of water SSR (Screen Space Reflections).
			</summary> 
			<param name="quality"> Water SSR quality:0 - low quality.1 - medium quality (by default).2 - high quality.3 - ultra quality. </param> 
		</member>
		<member name="M:Unigine.Render.getWaterSSRQuality const">
			<summary>
			Returns the resolution of water SSR (Screen Space Reflections).
			</summary>  
			<returns>Water SSR quality:0 - low quality.1 - medium quality (by default).2 - high quality.3 - ultra quality.</returns>
		</member>
		<member name="M:Unigine.Render.getWhite2DArrayTexture const">
			<summary>
			Returns white 2D array texture.
			</summary>  
			<returns>White 2D array texture.</returns>
		</member>
		<member name="M:Unigine.Render.getWhite2DTexture const">
			<summary>
			Returns white 2D texture.
			</summary>  
			<returns>White 2D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getWhite3DTexture const">
			<summary>
			Returns white 3D texture.
			</summary>  
			<returns>White 3D texture.</returns>
		</member>
		<member name="M:Unigine.Render.getWhiteCubeTexture const">
			<summary>
			Returns white Cube texture.
			</summary>  
			<returns>White Cube texture.</returns>
		</member>
		<member name="M:Unigine.Render.setWireframeColor(Unigine.Math.vec4)">
			<summary>
			Sets the color for the wireframe.
			</summary> 
			<param name="color"> Wireframe color to be set. </param> 
		</member>
		<member name="M:Unigine.Render.getWireframeColor const">
			<summary>
			Returns the color of the wireframe.
			</summary>  
			<returns>Wireframe color.</returns>
		</member>
		<member name="M:Unigine.Render.compressImage(Unigine.Ptr{Unigine.Image},int,int,int)">
			<summary>
			Converts the image to a specified compressed format. If compression by the GPU is not supported, the Image::compress() method will be called instead.
			</summary> 
			<param name="image"> Image to compress. </param>
			<param name="quality"> Compression quality:0 - fast compression, low compressed image quality.1 - high compressed image quality, slow compression (by default). </param>
			<param name="new_image_format"> Compressed texture format: one of the Texture::FORMAT_* variables. This is an optional argument. If no format is specified, default conversion will be performed (depending on the type of the source image). </param>
			<param name="use_mip_maps"> Flag indicating whether texture mipmaps should be generated for the compressed image: 1 to generate mipmaps, 0 not to generate. This is an optional argument. If no value is specified, mipmaps will be generated only if the source image has the mipmaps. </param> 
			<returns>1 if the image has been compressed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.compressTexture(Unigine.Ptr{Unigine.Texture},Unigine.Ptr{Unigine.Image},int,int,int)">
			<summary>
			Compresses the given texture to the specified format.					Only 2d and 2d array textures can be compressed.
			</summary> 
			<param name="texture"> Source texture to compress. </param>
			<param name="destination"> Image into which the compressed texture will be saved. </param>
			<param name="quality"> Compression quality:0 - fast compression, low compressed image quality.1 - high compressed image quality, slow compression (by default). </param>
			<param name="new_texture_format"> Compressed texture format: one of the Texture::FORMAT_*  variables. This is an optional argument. If no format is specified, default conversion will be performed (depending on the type of the source image). </param>
			<param name="use_mip_maps"> Flag indicating whether texture mipmaps should be generated for the compressed image: 1 to generate mipmaps, 0 not to generate. This is an optional argument. If no value is specified, mipmaps will be generated only if the source image has the mipmaps. </param> 
			<returns>1 if the texture has been compressed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.convertColorSpecularToMetalness(Unigine.Math.vec4,Unigine.Math.vec4,Unigine.Math.vec4,Unigine.Math.vec4)">
			<summary>
			Performs color conversion from the specular workflow (diffuse, specular) to the metalness workflow (albedo, shading).
			</summary> 
			<param name="diffuse"> Input diffuse color. </param>
			<param name="specular"> Input specular color. </param>
			<param name="albedo"> Output albedo color. </param>
			<param name="shading"> Output shading color. </param> 
		</member>
		<member name="M:Unigine.Render.convertImageSpecularToMetalness(Unigine.Ptr{Unigine.Image},Unigine.Ptr{Unigine.Image},Unigine.Ptr{Unigine.Image},Unigine.Ptr{Unigine.Image})">
			<summary>
			Performs texture conversion from the specular workflow (diffuse, specular) to the metalness workflow (albedo, shading).
			</summary> 
			<param name="diffuse"> Input diffuse texture. </param>
			<param name="specular"> Input specular texture. </param>
			<param name="albedo"> Output albedo texture. </param>
			<param name="shading"> Output shading texture. </param> 
		</member>
		<member name="M:Unigine.Render.createMipmapsCubeGGX(Unigine.Ptr{Unigine.Image},float)">
			<summary>
			Generates mipmaps for a cubemap using GGX BRDF microfacet model.
			</summary> 
			<param name="image"> Cubemap image. IMAGE_CUBE or IMAGE_CUBE_ARRAY types are accepted. </param>
			<param name="quality"> Quality value within the [0.0f; 1.0f] range. </param> 
		</member>
		<member name="M:Unigine.Render.createShorelineDistanceField(Unigine.Ptr{Unigine.Image},Unigine.Ptr{Unigine.Image},int,int,int)">
			<summary>
			Grabs a shoreline distance field texture with the specified parameters.
			</summary> 
			<param name="image"> Image to grab a shoreline texture to. </param>
			<param name="mask"> An R16 mask texture Image. Each pixel of the mask has the following color value:0 if water level at this point of the grid is above the terrain level; otherwise, 65535. </param>
			<param name="shoreline_radius"> Shoreline radius value within the [4; 128] range. Padding distance (from the shore to the beginning of swash zone). </param>
			<param name="blur_radius"> Blur radius value within the [0; 32] range. Higher values make shoreline smoother. </param>
			<param name="downsample_resolution"> Texture resolution value, can be one of the following: 16, 32, 64, 128, 256, 512, 1024, 2048. </param> 
			<returns>1 if the shoreline distance field texture is grabbed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.loadSettings(char,bool)">
			<summary>
			Loads render settings from a given file.
			</summary> 
			<param name="file"> Path to an XML file with desired settings. </param>
			<param name="clear"> Clear flag. Set true to clear settings before loading (new settings shall be applied right after loading them), or false not to clear. </param> 
			<returns>1 if the settings are loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.loadWorld(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Loads render state from the Xml.
			</summary> 
			<param name="xml"> Xml smart pointer. </param> 
			<returns>1 if the state is loaded successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.renderComputeMaterial(Render::PASS,Unigine.Ptr{Unigine.Material},int,int,int)">
			<summary>
			Sets up a material and dispatches to compute shader. The material must have a post shader associated with it.
			</summary> 
			<param name="pass"> Rendering pass number in range [0;NUM_PASSES) (one of the PASS_* variables). </param>
			<param name="material"> Smart pointer to the material. </param>
			<param name="width"> Local X work-group size of the compute shader. </param>
			<param name="height"> Local Y work-group size of the compute shader. </param>
			<param name="depth"> Local Z work-group size of the compute shader. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.renderImage2D(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Image},int)">
			<summary>
			Renders the scene into a 2D image in accordance with the specified parameters. The viewport position is taken from the camera created via Camera class.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="skip_flags"> Skip the effects:VIEWPORT_SKIP_SHADOWSVIEWPORT_SKIP_VISUALIZERVIEWPORT_SKIP_SRGBVIEWPORT_SKIP_POSTEFFECTSVIEWPORT_SKIP_VELOCITYVIEWPORT_SKIP_DYNAMIC_REFLECTIONS0 enables all the effects. </param> 
		</member>
		<member name="M:Unigine.Render.renderImage2D(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Image},int,int,int,int)">
			<summary>
			Renders the scene into a 2D image of the given size in accordance with the specified parameters. The viewport position is taken from the camera created via Camera class.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="width"> Width of the projected image, in units. </param>
			<param name="height"> Height of the projected image, in units. </param>
			<param name="hdr"> 1 - enable HDR, 0 - disable HDR. </param>
			<param name="skip_flags"> Skip the effects:VIEWPORT_SKIP_SHADOWSVIEWPORT_SKIP_VISUALIZERVIEWPORT_SKIP_SRGBVIEWPORT_SKIP_POSTEFFECTSVIEWPORT_SKIP_VELOCITYVIEWPORT_SKIP_DYNAMIC_REFLECTIONS0 enables all the effects. </param> 
		</member>
		<member name="M:Unigine.Render.renderImageCube(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Image},int)">
			<summary>
			Renders the scene into a cube map image in accordance with the specified parameters.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="skip_flags"> Skip the effects:VIEWPORT_SKIP_SHADOWSVIEWPORT_SKIP_VISUALIZERVIEWPORT_SKIP_SRGBVIEWPORT_SKIP_POSTEFFECTSVIEWPORT_SKIP_VELOCITYVIEWPORT_SKIP_DYNAMIC_REFLECTIONS0 enables all the effects. </param> 
		</member>
		<member name="M:Unigine.Render.renderImageCube(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Image},int,int,int,bool)">
			<summary>
			Renders the scene into a cube map in accordance with the specified parameters. The viewport position is taken from the camera created via Camera class.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="size"> Texture dimensions (cube map edge size). </param>
			<param name="hdr"> 1 - enable HDR; 0 - disable HDR. </param>
			<param name="skip_flags"> Skip the effects:VIEWPORT_SKIP_SHADOWSVIEWPORT_SKIP_VISUALIZERVIEWPORT_SKIP_SRGBVIEWPORT_SKIP_POSTEFFECTSVIEWPORT_SKIP_VELOCITYVIEWPORT_SKIP_DYNAMIC_REFLECTIONS0 enables all the effects. </param>
			<param name="local_space"> 1 - local space coordinates; 0 - world space coordinates. </param> 
		</member>
		<member name="M:Unigine.Render.renderNodeImage2D(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Node},Unigine.Ptr{Unigine.Image},int,int,char)">
			<summary>
			Renders the given node into a 2D image in accordance with the specified parameters. The viewport position is taken from the camera created via Camera class. The node can be rendered using the specific type of lighting and environment cubemap.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="node"> Node to be rendered. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="skip_flags"> Skip the effects. One of the SKIP_* variables should be specified. 0 enables all the effects. </param>
			<param name="light_usage"> Sets the light sources that will affect the node (one of the USAGE_*_LIGHTING Viewport class variables.) </param>
			<param name="environment_texture_name"> Path to the environment cubemap to be used. Takes effect if the first (auxiliary light) or second (node light) lighting mode is used (see the light_usage argument above). In case LightWorld is used (zero mode), the environment cubemap used for the current world will be used. </param> 
		</member>
		<member name="M:Unigine.Render.renderNodeImage2D(Unigine.Ptr{Unigine.Camera},Unigine.Ptr{Unigine.Node},Unigine.Ptr{Unigine.Image},int,int,int,int,int,char)">
			<summary>
			Renders the 2D image of the given node in accordance with the specified parameters. The viewport position is taken from the camera created via Camera class. The node can be rendered using the specific type of lighting and environment cubemap.
			</summary> 
			<param name="camera"> Camera to be used. </param>
			<param name="node"> Node to be rendered. </param>
			<param name="image"> Image to save the result to. </param>
			<param name="width"> Width of the image, in units. </param>
			<param name="height"> Height of the image, in units. </param>
			<param name="hdr"> HDR flag. This parameter determines the format of the 2D image:1 - image format will be set to RGBA16F. It means that the HDR image buffer will store pixel values outside the [0;1] range (i.e. both negative and positive values).0 - image format will be set to RGBA8. </param>
			<param name="skip_flags"> Skip the effects. One of the SKIP_* variables should be specified. 0 enables all the effects. </param>
			<param name="light_usage"> Sets the light sources that will affect the node (one of the USAGE_*_LIGHTING Viewport class variables). </param>
			<param name="environment_texture_name"> Path to the environment cubemap to be used. Takes effect if the first (auxiliary light) or second (node light) lighting mode is used (see the light_usage argument above). In case LightWorld is used (zero mode), the environment cubemap used for the current world will be used. </param> 
		</member>
		<member name="M:Unigine.Render.renderScreenMaterial(char)">
			<summary>
			Renders a screen-space material with the given name.
			</summary> 
			<param name="material_name"> Material name. </param> 
		</member>
		<member name="M:Unigine.Render.renderScreenMaterial(char,Unigine.Ptr{Unigine.Texture})">
			<summary>
			Renders a screen-space material with the specified name and the color texture.
			</summary> 
			<param name="material_name"> Material name. </param>
			<param name="color_texture"> Color texture smart pointer. </param> 
		</member>
		<member name="M:Unigine.Render.renderScreenMaterial(char,char,Unigine.Ptr{Unigine.Texture})">
			<summary>
			Renders a screen-space material with the given texture. For example:
			</summary> 
			<param name="material_name"> Material smart pointer. </param>
			<param name="texture_name"> Material texture name. </param>
			<param name="texture"> Texture smart pointer. </param> 
		</member>
		<member name="M:Unigine.Render.renderTAA(Unigine.Ptr{Unigine.Texture},Unigine.Ptr{Unigine.Texture})">
			<summary>
			Renders the TAA filter.
			</summary> 
			<param name="color_texture"> Color texture smart pointer. </param>
			<param name="color_old_texture"> Old color texture smart pointer. </param> 
		</member>
		<member name="M:Unigine.Render.saveSettings(char) const">
			<summary>
			Saves the current renderer settings to a given file.
			</summary> 
			<param name="file"> Path to a target file. </param> 
			<returns>true if the settings are saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.saveState(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves a render state into the stream.					Saving into the stream requires creating a blob to save into. To restore the saved state the restoreState() method is used:
			</summary> 
			<param name="stream"> Stream to save a state into. </param> 
			<returns>true if the state is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores a render state from the stream.					Restoring from the stream requires creating a blob to save into and saving the state using the saveState() method:
			</summary> 
			<param name="stream"> Stream to restore a state from. </param> 
			<returns>true if the state is restored successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.saveWorld(Unigine.Ptr{Unigine.Xml}) const">
			<summary>
			Saves the render state into the given Xml node.
			</summary> 
			<param name="xml"> Xml node. </param> 
			<returns>true if the state is saved successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setEnvironmentHazeGradient(int)">
			<summary>
			Sets the environment haze gradient mode.
			</summary> 
			<param name="gradient"> Haze gradient mode:0 should be used for short distance range (e.g. near-surface haze).1 should be used for long distance range (e.g. hazy mountains).2 should be used for physically based haze simulation. </param> 
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazeGradient const">
			<summary>
			Returns the current environment haze gradient mode.
			</summary>  
			<returns>Haze gradient mode:0 for short distance range (e.g. near-surface haze).1 for long distance range (e.g. hazy mountains).2 for physically based haze simulation.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazeColor const">
			<summary>
			Returns the current haze color for the preset that overlays the other ones.					This function will return color only if the HAZE_SOLID mode is set via setEnvironmentHazeMode().To get the haze color for the specific preset, use					RenderEnvironmentPreset::getHazeColor().
			</summary>  
			<returns>Haze color.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazeDensity const">
			<summary>
			Returns the haze density set for the preset that overlays the other ones.				To get the haze density for the specific preset, use RenderEnvironmentPreset::getHazeDensity().
			</summary>  
			<returns>Haze density.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazeMaxDistance const">
			<summary>
			Returns the distance starting at which the haze becomes completely solid, so nothing will be seen behind. To get the haze maximum visibility distance for the specific preset, use RenderEnvironmentPreset::getHazeMaxDistance().
			</summary>  
			<returns>Haze maximum visibility distance.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazePhysicalStartHeight const">
			<summary>
			Returns the current reference height value for the two parameters (Half Visibility Distance and Half Faloff Height). To get the current reference height value for the specific preset, use RenderEnvironmentPreset::getHazePhysicalStartHeight().
			</summary>  
			<returns>Current reference height value, in units.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazePhysicalHalfVisibilityDistance const">
			<summary>
			Returns the current distance to the boundary at which the visibility comprises 50%. There is no zero-visibility in the real world, so the half-visibility boundary is used to adjust haze distance.
			</summary>  
			<returns>Current distance to the boundary at which the visibility comprises 50%, in units.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazePhysicalHalfFalloffHeight const">
			<summary>
			Returns the current height of the haze density gradient. The higher the value, the longer the haze desity reduces as the height grows, making the transition between the clear sky and haze smoother.
			</summary>  
			<returns>Current height of the haze density gradient.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazePhysicalAmbientLightIntensity const">
			<summary>
			Returns the current intensity of the impact of the ambient lighting on haze (how much the ambient lighting affects the haze).
			</summary>  
			<returns>Current value of intensity of the ambient lighting impact.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazePhysicalAmbientColorSaturation const">
			<summary>
			Returns the current intensity of the ambient color's contribution to the haze (how much the sunlight affects the haze).
			</summary>  
			<returns>Current value of intensity of the ambient color's contribution to the haze.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazePhysicalSunLightIntensity const">
			<summary>
			Returns the current intensity of the impact of the sunlight on haze defining how much the sunlight affects the haze.
			</summary>  
			<returns>Current value of intensity of the sunlight impact.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentHazePhysicalSunColorSaturation const">
			<summary>
			Returns the current intensity of the impact of the sunlight on haze (how much the sunlight affects the haze).
			</summary>  
			<returns>Current intensity of the sunlight color's contribution to the haze.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentSkyIntensity const">
			<summary>
			Returns the intensity of the environment sky set for the preset that overlays the other ones. To get the sky intensity for the specific preset, use RenderEnvironmentPreset::getSkyIntensity().
			</summary>  
			<returns>Intensity value of the environment sky.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentReflectionIntensity const">
			<summary>
			Returns the intensity of the environment reflections for the preset that overlays the other ones. 0 value means no environment reflections for the preset. To get the reflection intensity for the specific preset, use RenderEnvironmentPreset::getReflectionIntensity().
			</summary>  
			<returns>The intensity value of the environment reflections.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentAmbientIntensity const">
			<summary>
			Returns the intensity of the environment ambient lighting for the preset that overlays the other ones. 0 value means no environment ambient lighting for the preset. The higher the value, the more ambient lighting affects environment. To get the ambient intensity for the specific preset, use RenderEnvironmentPreset::getAmbientIntensity().
			</summary>  
			<returns>The intensity value of environment ambient lighting. The value can be greater than 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.getEnvironmentPreset(int)">
			<summary>
			Returns the environment preset of the given number.
			</summary> 
			<param name="num"> The number of the environment preset. The value is clamped to the [0;2] range. </param> 
			<returns>Environment preset.</returns>
		</member>
		<member name="M:Unigine.Render.getTAASamples const">
			<summary>
			Returns the number of the sample offsets performed during sub pixel jittering. By the minimum value of 1, there is no offsets, and, therefore, no anti-aliasing.
			</summary>  
			<returns>The number of the sample offsets:0 - 1 offset1 - 4 offsets2 - 8 offsets3 - 16 offsets</returns>
		</member>
		<member name="M:Unigine.Render.isFXAA const">
			<summary>
			Returns the value indicating if FXAA (post-process anti-aliasing) is enabled.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary>  
			<returns>1 if FXAA is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTAACatmullResampling(bool)">
			<summary>
			Toggles Catmull-Rom resampling on and off. The option allows you to reduce image blurring when the camera moves forward/backward. It is recommended to disable resampling at low settings.
			</summary> 
			<param name="resampling"> 1 to enable Catmull-Rom resampling, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isTAA const">
			<summary>
			Returns the value indicating if TAA is enabled.
			</summary>  
			<returns>1 if TAA is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTAASamples(int)">
			<summary>
			Sets the number of the sample offsets performed during sub pixel jittering. By the minimum value of 1, there will be no offsets, and, therefore, no anti-aliasing. The parameter allows reducing image jittering and blurring.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="samples"> The number of the sample offsets:0 - 1 offset1 - 4 offsets2 - 8 offsets3 - 16 offsets </param> 
		</member>
		<member name="M:Unigine.Render.setTAAPixelOffset(float)">
			<summary>
			Sets the size of the sample offset performed during sub pixel jittering. You can specify the offset that is less than a pixel: for example, if you specify 0.5, frames will shift to half a pixel. It reduces image jittering and blurring.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="offset"> Size of the sample offset. </param> 
		</member>
		<member name="M:Unigine.Render.isTAACatmullResampling const">
			<summary>
			Returns the value indicating if Catmull-Rom resampling is enabled. The option allows you to reduce image blurring when the camera moves forward/backward. It is recommended to disable resampling at low settings.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if Catmull-Rom resampling is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setTAA(bool)">
			<summary>
			Toggles TAA on and off.
			</summary> 
			<param name="taa"> 1 to enable TAA, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.setFXAA(bool)">
			<summary>
			Toggles FXAA (post-process anti-aliasing) on and off.
			</summary> 
			<param name="fxaa"> 1 to enable FXAA, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.getTAAPixelOffset const">
			<summary>
			Returns the size of the sample offset performed during sub pixel jittering. The offset can be less than a pixel: for example, if 0.5 is set, frames will shift to half a pixel.
			</summary>  
			<returns>Size of the sample offset.</returns>
		</member>
		<member name="M:Unigine.Render.isCameraEffectsTemporalFiltering const">
			<summary>
			Returns the value indicating if temporal filtering is enabled. Temporal filtering reduces flickering of the bloom effect on the small bright objects (such flickering may appear when the camera moves). For example, it can be used in scenes with industrial pipes.
			</summary>  
			<returns>1 if temporal filtering is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setCameraEffectsTemporalFiltering(bool)">
			<summary>
			Toggles temporal filtering on and off. Temporal filtering reduces flickering of the bloom effect on the small bright objects (such flickering may appear when the camera moves). For example, it can be used in scenes with industrial pipes.
			</summary> 
			<param name="filtering"> 1 to enable temporal filtering; 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.setSSBevelQuality(int)">
			<summary>
			Sets the quality mode for the screen-space bevels.
			</summary> 
			<param name="quality"> The quality mode:0 - low1 - medium (by default)2 - high </param> 
		</member>
		<member name="M:Unigine.Render.isSSBevel const">
			<summary>
			Returns the value indicating if the screen-space bevels are enabled.
			</summary>  
			<returns>1 if the effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.getSSBevelRadius const">
			<summary>
			Returns the current size of the screen-space bevel effect.
			</summary>  
			<returns>Size of the bevel effect in range [0.0f; 10.0f]. The default value is 10.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSBevelVertexNormal(int)">
			<summary>
			Sets the mode of the screen-space bevels rendering:											Better Edges smooths vertex and surface normals of the object. In this mode, the relief created by using Normal Mapping will be smoothed along with the mesh edges.						Better Normals smooths only vertex normals. In this mode, only edges of the mesh geometry will be bevelled.
			</summary> 
			<param name="normal"> The mode of bevels rendering:0 - the Better Edges mode.1 - the Better Normals mode. </param> 
		</member>
		<member name="M:Unigine.Render.setSSBevel(bool)">
			<summary>
			Sets the value indicating if the screen-space bevels are enabled.
			</summary> 
			<param name="bevel"> 1 to enable the effect, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.setSSBevelRadius(float)">
			<summary>
			Sets the size of the screen-space bevel effect.
			</summary> 
			<param name="radius"> Size of the bevel effect in range [0.0f; 10.0f]. The default value is 10.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSBevelVertexNormal const">
			<summary>
			Returns the current mode of the screen-space bevels rendering:											Better Edges smooths vertex and surface normals of the object. In this mode, the relief created by using Normal Mapping will be smoothed along with the mesh edges.						Better Normals smooths only vertex normals. In this mode, only edges of the mesh geometry will be bevelled.
			</summary>  
			<returns>The mode of bevels rendering:0 - the Better Edges mode.1 - the Better Normals mode.</returns>
		</member>
		<member name="M:Unigine.Render.getSSBevelQuality const">
			<summary>
			Returns the current quality mode for the screen-space bevels.
			</summary>  
			<returns>The quality mode:0 - low1 - medium (by default)2 - high</returns>
		</member>
		<member name="M:Unigine.Render.isSSBevelNoise const">
			<summary>
			Returns the value indicating if the noise that smooths bevels is enabled. It is recommended to use the noise with TAA enabled to avoid visual artifacts. The bevel noise is applied at a certain distance from the camera (i.e. if the camera is too far from the object with bevels, the noise won't be applied).
			</summary>  
			<returns>1 if smoothing is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSBevelNoise(bool)">
			<summary>
			Sets the value indicating if the noise that smooths bevels is enabled. It is recommended to use the noise with TAA enabled to avoid visual artifacts. The bevel noise is applied at a certain distance from the camera (i.e. if the camera is too far from the object with bevels, the noise won't be applied).
			</summary> 
			<param name="noise"> 1 to enable smoothing, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.addCallback(int,Unigine.CallbackBase1{Unigine.Renderer})">
			<summary>
			Adds a callback for the specified stage of the rendering sequence. Callback functions can be used to get access to buffers and matrices at intermediate stages of the rendering sequence. Some of them are read-only, but most of them can be modified ad hoc.
			Callback function must be as follows:
			</summary> 
			<param name="callback"> Stage of the rendering sequence for which a callback is to be added. One of the CALLBACK_* variables.The _BEGIN prefix corresponds to the beginning of the rendering pass, _END - to its completion. </param>
			<param name="func"> Callback pointer. </param> 
			<returns>ID of the last added callback of the specified type, if the callback was added successfully; otherwise, nullptr. This ID can be used to remove this callback when necessary.</returns>
		</member>
		<member name="M:Unigine.Render.clearCallbacks(int)">
			<summary>
			Clears all added callbacks for the specified stage of the rendering sequence. Callback functions can be used to get access to buffers and matrices at intermediate stages of the rendering sequence. Some of them are read-only, but most of them can be modified ad hoc.
			</summary> 
			<param name="callback"> Stage of the rendering sequence for which the callbacks are to be cleared. One of the CALLBACK_* variables.The _BEGIN prefix corresponds to the beginning of the rendering pass, _END - to its completion. </param> 
		</member>
		<member name="M:Unigine.Render.removeCallback(int,void)">
			<summary>
			Removes the specified callback from the list of callbacks for the specified stage of the rendering sequence. Callback functions can be used to get access to buffers and matrices at intermediate stages of the rendering sequence. Some of them are read-only, but most of them can be modified ad hoc.
			</summary> 
			<param name="callback"> Stage of the rendering sequence for which the callback is to be removed. One of the CALLBACK_* variables.The _BEGIN prefix corresponds to the beginning of the rendering pass, _END - to its completion. </param>
			<param name="id"> Callback ID obtained when adding it. </param> 
			<returns>True if the callback with the given ID was removed successfully; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Render.setMaxFPS(float)">
			<summary>
			Sets a maximum FPS value, to which rendering FPS is to be clamped.
			</summary> 
			<param name="maxfps"> Maximum FPS value for clamping. 0 - disables FPS clamping. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.getMaxFPS const">
			<summary>
			Returns the current maximum FPS value, to which rendering FPS is clamped.
			</summary>  
			<returns>Current maximum FPS value for clamping. 0 - FPS clamping is disabled.</returns>
		</member>
		<member name="M:Unigine.Render.setCameraMode(int)">
			<summary>
			Sets the camera mode: classic or physically-based.											If the physically-based camera mode is set, the real-world values are used to set up lighting and camera exposure: ISO, shutter speed, F-stop. At default values of these parameters, the static exposure value is near 1.							For the physically-based mode, the exposure mode should be set to Static to avoid exposure issues.												If the classic mode is set, the exposure is set by setExposure().
			</summary> 
			<param name="mode"> 0 for the classic camera mode; 1 for the physically-based camera mode. </param> 
		</member>
		<member name="M:Unigine.Render.getCameraMode const">
			<summary>
			Returns the current camera mode: classic or physically-based.											If the physically-based camera mode is set, the real-world values are used to set up lighting and camera exposure: ISO, shutter speed, F-stop. At default values of these parameters, the static exposure value is near 1.							For the physically-based mode, the exposure mode should be set to Static to avoid exposure issues.												If the classic mode is set, the exposure is set by setExposure().
			</summary>  
			<returns>0 if the classic camera mode is set; 1 if the physically-based camera mode is set.</returns>
		</member>
		<member name="M:Unigine.Render.setISO(float)">
			<summary>
			Sets an ISO for static exposure calculation.
			</summary> 
			<param name="iso"> ISO value. </param> 
		</member>
		<member name="M:Unigine.Render.getISO const">
			<summary>
			Returns the ISO used for static exposure calculation.
			</summary>  
			<returns>ISO value.</returns>
		</member>
		<member name="M:Unigine.Render.setShutterSpeed(float)">
			<summary>
			Sets a shutter speed for static exposure calculation.
			</summary> 
			<param name="speed"> Shutter speed. </param> 
		</member>
		<member name="M:Unigine.Render.getShutterSpeed const">
			<summary>
			Sets the shutter speed used for static exposure calculation.
			</summary>  
			<returns>Shutter speed.</returns>
		</member>
		<member name="M:Unigine.Render.setFStop(float)">
			<summary>
			Sets an F-stop value for static exposure calculation.
			</summary> 
			<param name="fstop"> F-stop value. </param> 
		</member>
		<member name="M:Unigine.Render.getFStop const">
			<summary>
			Returns the F-stop value used for static exposure calculation.
			</summary>  
			<returns>F-stop value.</returns>
		</member>
		<member name="M:Unigine.Render.setDepthPrePass(bool)">
			<summary>
			Enables or disables depth pre-pass rendering. When enabled, an additional depth buffer rendering pass is performed in the beginning of the rendering sequence.					This option can be used to gain performance for well optimized scenes using LODs and having a low-to-medium number of triangles in case of GPU bottlenecks. In other cases (heavy CAD models, large number of triangles and CPU bottlenecks) it may reduce performance, so it is recommended to use profiling tools to make sure that a positive effect is obtained.
			</summary> 
			<param name="pass"> 1 to enable depth pre-pass, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isDepthPrePass const">
			<summary>
			Returns a value indicating if depth pre-pass rendering is enabled. When enabled, an additional depth buffer rendering pass is performed in the beginning of the rendering sequence.					This option can be used to gain performance for well optimized scenes using LODs and having a low-to-medium number of triangles in case of GPU bottlenecks. In other cases (heavy CAD models, large number of triangles and CPU bottlenecks) it may reduce performance, so it is recommended to use profiling tools to make sure that a positive effect is obtained.
			</summary>  
			<returns>1 if depth pre-pass rendering is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setStereoHiddenArea(int)">
			<summary>
			Sets culling mode for pixels, that are not visible in VR mode. This parameter is used for performance optimization.
			</summary> 
			<param name="area"> Culling mode for pixels that are not visible in VR mode. One of the following values:0 - hidden area culling is disabled (by default).1 - OpenVR-based culling mode. Culling is performed using meshes returned by OpenVR.Culling result depends on HMD used.2 - Custom culling mode. Culling is performed using mesehes returned by OpenVR and an oval or circular mesh determined by custom adjustable parameters (See the setStereoHiddenAreaTransform() method. </param> 
		</member>
		<member name="M:Unigine.Render.getStereoHiddenArea const">
			<summary>
			Returns the current culling mode for pixels, that are not visible in VR mode. This parameter is used for performance optimization.
			</summary>  
			<returns>Current culling mode for pixels that are not visible in VR mode. One of the following values:0 - hidden area culling is disabled (by default).1 - OpenVR-based culling mode. Culling is performed using meshes returned by OpenVR.Culling result depends on HMD used.2 - Custom culling mode. Culling is performed using meshes returned by OpenVR and an oval or circular mesh determined by custom adjustable parameters (See the setStereoHiddenAreaTransform() method.</returns>
		</member>
		<member name="M:Unigine.Render.setStereoHiddenAreaExposureTransform(Unigine.Math.vec4)">
			<summary>
			Sets the area to be used for exposure calculation, when culling of pixels, that are not visible in VR mode, is used. Correction of this area is used to avoid visual artefacts when clipped pixels affect exposure in visible areas.
			</summary> 
			<param name="transform"> Four-component vector (X, Y, Z, W), that determines a rectangular area to be used for exposure calculation, when culling of pixels, that are not visible in VR mode, is used:First two components (X, Y) - sizes along the X and Y axes respectively.Second two components (Z, W) - offset values along the X and Y axes respectively.These components are ignored when hidden area culling mode is set to 2All components are specified within the[0.0f, 1.0f] range.  </param> 
		</member>
		<member name="M:Unigine.Render.getStereoHiddenAreaExposureTransform const">
			<summary>
			Sets the area to be used for exposure calculation, when culling of pixels, that are not visible in VR mode, is used. Correction of this area is used to avoid visual artefacts when clipped pixels affect exposure in visible areas.
			</summary>  
			<returns>Four-component vector (X, Y, Z, W), that determines a rectangular area to be used for exposure calculation, when culling of pixels, that are not visible in VR mode, is used:First two components (X, Y) - sizes along the X and Y axes respectively.Second two components (Z, W) - offset values along the X and Y axes respectively.These components are ignored when hidden area culling mode is set to 2All components are within the[0.0f, 1.0f] range. </returns>
		</member>
		<member name="M:Unigine.Render.setStereoHiddenAreaTransform(Unigine.Math.vec4)">
			<summary>
			Sets the size and offset parameters for a new oval or circular mesh to be used for culling pixels, that are not visible in VR mode.					This custom circular mesh is used only when hidden area culling mode is set to 2.
			</summary> 
			<param name="transform"> Four-component vector (X, Y, Z, W), that determines an area to be used for exposure calculation, when culling of pixels, that are not visible in VR mode, is used:First two components (X, Y) - sizes along the X and Y axes respectively.Second two components (Z, W) - offset values along the X and Y axes respectively.These components are ignored when hidden area culling mode is set to 2 </param> 
		</member>
		<member name="M:Unigine.Render.getStereoHiddenAreaTransform const">
			<summary>
			Returns the current size and offset parameters for an oval or circular mesh used for culling pixels, that are not visible in VR mode.					This custom circular mesh is used only when hidden area culling mode is set to 2.
			</summary>  
			<returns>Four-component vector (X, Y, Z, W), that determines an oval or circular mesh used for culling pixels, that are not visible in VR mode:First two components (X, Y) - sizes along the X and Y axes respectively.Second two components (Z, W) - offset values along the X and Y axes respectively.</returns>
		</member>
		<member name="M:Unigine.Render.setTAAAntialiasingInMotion(bool)">
			<summary>
			Sets a value indicating if improved anti-aliasing in motion (for moving camera and objects) is enabled.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="motion"> 1 to enable improved anti-aliasing in motion (for moving camera and objects), 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isTAAAntialiasingInMotion const">
			<summary>
			Returns a value indicating if improved anti-aliasing in motion (for moving camera and objects) is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if improved anti-aliasing in motion (for moving camera and objects) is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setWhiteBalance(bool)">
			<summary>
			Sets a value indicating if automatic white balance correction is enabled.
			</summary> 
			<param name="balance"> 1 to enable automatic white balance correction, 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isWhiteBalance const">
			<summary>
			Returns a value indicating if automatic white balance correction is enabled.
			</summary>  
			<returns>1 if automatic white balance correction is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setWhiteBalanceIntensity(float)">
			<summary>
			Sets the value of white balance correction intensity.
			</summary> 
			<param name="intensity"> White balance correction intensity value in the range [0.0f, 1.0f]. The default value is 0.3f.By the minimum value of 0.0f, no white balance correction is performed.The higher the value, the stronger correction will be.Do not set too high values for night-time and dimly lit scenes, as it may lead to heavy color distortion making the scene look totally unnatural. </param> 
		</member>
		<member name="M:Unigine.Render.getWhiteBalanceIntensity const">
			<summary>
			Returns the current value of white balance correction intensity.
			</summary>  
			<returns>Current white balance correction intensity value in the range [0.0f, 1.0f]. The default value is 0.3f.</returns>
		</member>
		<member name="M:Unigine.Render.setWhiteBalanceAdaptationTime(float)">
			<summary>
			Sets the time for the camera to adjust white balance.
			</summary> 
			<param name="time"> Time period, in seconds, during which white balance correction is performed. If 0.0f is set, instant correction will be used. The default value is 1.0f.It is recommended to use lower values, when possible, to make correction process unnoticeable, otherwise it'll be slow and will catch user's eye. However, setting too low values may result in abrupt switching of colors as the camera moves. So, adjust this parameter carefully to make transition smoooth. You can set it equal to the Exposure Adaptation value. </param> 
		</member>
		<member name="M:Unigine.Render.getWhiteBalanceAdaptationTime const">
			<summary>
			Returns the current the time set for the camera to adjust white balance.
			</summary>  
			<returns>Time period, in seconds, during which white balance correction is performed. If 0.0f is set, instant correction will be used. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirt(bool)">
			<summary>
			Sets the value indicating if the Screen-Space Dirt (SSDirt) effect is enabled.
			</summary> 
			<param name="dirt"> 1 to enable the SSDirt effect, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSSDirt const">
			<summary>
			Returns the value indicating if the Screen-Space Dirt (SSDirt) effect is enabled.
			</summary>  
			<returns>1 if the SSDirt effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtAngleBias(float)">
			<summary>
			Sets the angle bias value to limit the SSDirt effect where information cannot be obtained. This parameter can be used to remove visual artefacts at the edges of polygons. The SSDirt effect must be enabled (see the setSSDirt() method).					This parameter affects both, concave and convex areas.
			</summary> 
			<param name="bias"> Angle bias value to be set in the range [0.0f; 1.0f]. The default value is 0.35f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtAngleBias const">
			<summary>
			Sets the angle bias value to limit the SSDirt effect where information cannot be obtained. This parameter can be used to remove visual artefacts at the edges of polygons. The SSDirt effect must be enabled (see the setSSDirt() method).					This parameter affects both, concave and convex areas.
			</summary>  
			<returns>Angle bias value in the range [0.0f; 1.0f].</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtCavityAlbedoTextureName(char)">
			<summary>
			Sets the name of the albedo texture to be used for cavities. This texture defines dirt and dust color pattern for all cavities globally. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="name"> Name of the albedo texture to be used for cavities. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtCavityAlbedoTextureName const">
			<summary>
			Returns the name of the albedo texture used for cavities. This texture defines dirt and dust color pattern for all cavities globally. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Name of the albedo texture used for cavities.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtCavityColor(Unigine.Math.vec4)">
			<summary>
			Sets the color multiplier for the Albedo texture used for cavities (global dirt and dust color pattern). The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="color"> Color multiplier for the Albedo texture used for cavities. By default, the color is white. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtCavityColor const">
			<summary>
			Returns the current color multiplier for the Albedo texture used for cavities (global dirt and dust color pattern). The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Color multiplier for the Albedo texture used for cavities.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtCavityExponent(float)">
			<summary>
			Sets the exponent value that determines the rate of gradual change of intensity along the radius for cavities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="exponent"> Exponent value to be set for cavities. Lower values make gradual change of intensity smoother. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtCavityExponent const">
			<summary>
			Returns the current exponent value that determines the rate of gradual change of intensity along the radius for cavities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Exponent value set for cavities. Lower values make gradual change of intensity smoother. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtCavityMetalness(float)">
			<summary>
			Sets the metalness value for cavities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="metalness"> Metalness value for cavities in the range [0.0f, 1.0f]. When set to 0 (by default), the SSDirt effect does not modify metalness buffer in cavities. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtCavityMetalness const">
			<summary>
			Returns the current metalness value for cavities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Current metalness value for cavities in the range [0.0f, 1.0f]. When set to 0 (by default), the SSDirt effect does not modify metalness buffer in cavities.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtCavityMetalnessVisibility(float)">
			<summary>
			Sets the metalness visibility value for cavities. A multiplier that determines the degree of impact of the effect on metalness buffer. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="visibility"> Metalness visibility value to be set for cavities in the range [0.0f, 1.0f]. The higherthe value the more metalness buffer is affected. The default value is 0.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtCavityMetalnessVisibility const">
			<summary>
			Returns the current metalness visibility value for cavities. A multiplier that determines the degree of impact of the effect on metalness buffer. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Current metalness visibility value for cavities.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtCavityShadingTextureName(char)">
			<summary>
			Sets the name of the shading texture to be used for cavities. Red channel of this texture defines metalness pattern for all cavities globally (other channels are ignored). The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="name"> Name of the shading texture to be used for cavities. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtCavityShadingTextureName const">
			<summary>
			Returns the name of the shading texture used for cavities. Red channel of this texture defines metalness pattern for all cavities globally (other channels are ignored). The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Name of the shading texture used for cavities.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtCavityTextureSize(float)">
			<summary>
			Sets the scaling factor for the textures used for cavities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="size"> Scaling factor to be set for the textures used for cavities. The default value is 1.0f </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtCavityTextureSize const">
			<summary>
			Returns the current scaling factor for the textures used for cavities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Current scaling factor for the textures used for cavities.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtConvexityAlbedoTextureName(char)">
			<summary>
			Sets the name of the albedo texture to be used for convexities. This texture defines wear and scratch color pattern for all convexities globally. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="name"> Name of the albedo texture to be used for convexities. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtConvexityAlbedoTextureName const">
			<summary>
			Returns the name of the albedo texture used for convexities. This texture defines wear and scratch color pattern for all convexities globally. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Name of the albedo texture used for convexities.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtConvexityColor(Unigine.Math.vec4)">
			<summary>
			Sets the color multiplier for the Albedo texture used for convexities (global wear and scratch color pattern). The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="color"> Color multiplier for the Albedo texture used for convexities. By default, the color is white. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtConvexityColor const">
			<summary>
			Returns the current color multiplier for the Albedo texture used for convexities (global wear and scratch color pattern). The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Color multiplier for the Albedo texture used for convexities.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtConvexityExponent(float)">
			<summary>
			Sets the exponent value that determines the rate of gradual change of intensity along the radius for convexities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="exponent"> Exponent value to be set for convexities. Lower values make gradual change of intensity smoother. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtConvexityExponent const">
			<summary>
			Returns the current exponent value that determines the rate of gradual change of intensity along the radius for convexities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Exponent value set for convexities. Lower values make gradual change of intensity smoother. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtConvexityMetalness(float)">
			<summary>
			Sets the metalness value for convexities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="metalness"> Metalness value for convexities in the range [0.0f, 1.0f]. When set to 0 (by default), the SSDirt effect does not modify metalness buffer in convex areas. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtConvexityMetalness const">
			<summary>
			Returns the current metalness value for convexities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Current metalness value for convexities in the range [0.0f, 1.0f]. When set to 0 (by default), the SSDirt effect does not modify metalness buffer in convex areas.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtConvexityMetalnessVisibility(float)">
			<summary>
			Sets the metalness visibility value for convexities. A multiplier that determines the degree of impact of the effect on metalness buffer. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="visibility"> Metalness visibility value to be set for convexities in the range [0.0f, 1.0f]. The higherthe value the more metalness buffer is affected. The default value is 0.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtConvexityMetalnessVisibility const">
			<summary>
			Returns the current metalness visibility value for convexities. A multiplier that determines the degree of impact of the effect on metalness buffer. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Current metalness visibility value for convexities.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtConvexityShadingTextureName(char)">
			<summary>
			Sets the name of the shading texture to be used for convexities. Red channel of this texture defines metalness pattern for all convexities globally (other channels are ignored). The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="name"> Name of the shading texture to be used for convexities. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtConvexityShadingTextureName const">
			<summary>
			Returns the name of the shading texture used for convexities. Red channel of this texture defines metalness pattern for all convexities globally (other channels are ignored). The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Name of the shading texture used for convexities.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtConvexityTextureSize(float)">
			<summary>
			Sets the scaling factor for the textures used for convexities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="size"> Scaling factor to be set for the textures used for convexities. The default value is 1.0f </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtConvexityTextureSize const">
			<summary>
			Returns the current scaling factor for the textures used for convexities. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Current scaling factor for the textures used for convexities.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtIncreaseAccuracy(bool)">
			<summary>
			Enables or disables increased accuracy for the SSDirt effect. This option should be used to remove visual artefacts along the screen edges, in case if they appear. Otherwise, it should be disabled. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="accuracy"> 1 to enable increased accuracy for the SSDirt effect, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isSSDirtIncreaseAccuracy const">
			<summary>
			Returns a value indicating if increased accuracy for the SSDirt effect is enabled. This option should be used to remove visual artefacts along the screen edges, in case if they appear. Otherwise, it should be disabled. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>1 if increased accuracy for the SSDirt effect is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtIntensity(float)">
			<summary>
			Sets the intensity of the SSDirt effect. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="intensity"> Intensity of the SSDirt effect.By the minimum value of 0.0f, the effect is not visible.Higher values make the effect more pronounced.The default value is1.0f.  </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtIntensity const">
			<summary>
			Returns the current intensity of the SSDirt effect. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Current intensity of the SSDirt effect.By the minimum value of 0.0f, the effect is not visible.Higher values make the effect more pronounced.</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtPerspective(float)">
			<summary>
			Sets the perspective value,that determines the degree of impact of distance from the camera on the radius of the Screen-Space Dirt effect:											0.0f - radius of the effect is bound to screen space (it remains constant relative to screen size, regardless of the distance to the camera).						1.0f - radius of the effect is bound to world space (it remains the same relative to objects, i.e. gets smaller as the camera moves away from them).					The SSDirt effect must be enabled (see the					setSSDirt() method).
			</summary> 
			<param name="perspective"> Perspective value to be set in the range [0.0f, 1.0f]. The default value is 0.02f </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtPerspective const">
			<summary>
			Returns the current perspective value, that determines the degree of impact of distance from the camera on the radius of the Screen-Space Dirt effect:											0.0f - radius of the effect is bound to screen space (it remains constant relative to screen size, regardless of the distance to the camera).						1.0f - radius of the effect is bound to world space (it remains the same relative to objects, i.e. gets smaller as the camera moves away from them).					The SSDirt effect must be enabled (see the					setSSDirt() method).
			</summary>  
			<returns>Current perspective value in the range [0.0f, 1.0f]. The default value is 0.02f</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtQuality(int)">
			<summary>
			Sets the quality for the SSDirt effect. The SSDirt effect must be enabled (see the setSSDirt() method).					This parameter significantly affects performance, so choose it reasonably.
			</summary> 
			<param name="quality"> SSDirt effect quality to be set:0 - low1 - medium2 - high (by default)3 - ultra </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtQuality const">
			<summary>
			Returns the current quality of the SSDirt effect. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Current SSDirt effect quality:0 - low1 - medium2 - high (by default)3 - ultra</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtRadius(float)">
			<summary>
			Sets the size of the SSDirt effect. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="radius"> Size of the SSDirt effect to be set. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtRadius const">
			<summary>
			Returns the current size of the SSDirt effect. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
		</member>
		<member name="M:Unigine.Render.setSSDirtResolution(int)">
			<summary>
			Sets the resolution of the SSDirt effect. The SSDirt effect must be enabled (see the setSSDirt() method).					This parameter significantly affects performance, so choose it reasonably.
			</summary> 
			<param name="resolution"> Resolution of the SSDirt effect to be set:0 - quarter1 - half (by default)2 - full </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtResolution const">
			<summary>
			Returns the current resolution of the SSDirt effect. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Current resolution of the SSDirt effect:0 - quarter1 - half (by default)2 - full</returns>
		</member>
		<member name="M:Unigine.Render.setSSDirtThreshold(float)">
			<summary>
			Sets the threshold of the SSDirt effect. It determines depth limit for the SSDirt effect in areas where information cannot be obtained. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary> 
			<param name="threshold"> SSDirt threshold value to be set in the range [0.0f; 1.0f]. Higher values make the effect less pronounced. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSDirtThreshold const">
			<summary>
			Returns the current threshold value of the SSDirt effect. The SSDirt effect must be enabled (see the setSSDirt() method).
			</summary>  
			<returns>Current SSDirt threshold value in the range [0.0f; 1.0f]. Higher values make the effect less pronounced. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setLatency(int)">
			<summary>
			Set the maximum number of back buffer frames that a driver is allowed to queue for rendering. The buffers are used for GPU load optimization: in certain cases several command buffers (frames) can be processed by GPU at once increasing the Waiting GPU time for one frame and having zero Waiting GPU time for the next ones. Thus, GPU avoids rendering spikes, but increased Waiting GPU time will cause a spike in application logic, in case when the logic is bound to duration of a single frame. Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering. Latency is often used to control how the CPU chooses between responding to user input and frames that are in the render queue. In certain cases (high GPU load, VSYNC usage) it may be required to queue more frames of data, it is also beneficial for applications with no user input (e.g., video playback).
			</summary> 
			<param name="latency"> Maximum number of back buffer frames allowed:0 - sequential rendering CPU-GPU-CPU-GPU...1 - 1 buffer (by default)2 - 2 buffers3 - 3 buffersValues 1-3 are available for DirectX only. </param> 
		</member>
		<member name="M:Unigine.Render.getLatency const">
			<summary>
			Returns the maximum number of back buffer frames that a driver is allowed to queue for rendering. The buffers are used for GPU load optimization: in certain cases several command buffers (frames) can be processed by GPU at once increasing the Waiting GPU time for one frame and having zero Waiting GPU time for the next ones. Thus, GPU avoids rendering spikes, but increased Waiting GPU time will cause a spike in application logic, in case when the logic is bound to duration of a single frame. Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering. Latency is often used to control how the CPU chooses between responding to user input and frames that are in the render queue. In certain cases (high GPU load, VSYNC usage) it may be required to queue more frames of data, it is also beneficial for applications with no user input (e.g., video playback).
			</summary>  
			<returns>Maximum number of back buffer frames currently allowed:0 - sequential rendering CPU-GPU-CPU-GPU...1 - 1 buffer (by default)2 - 2 buffers3 - 3 buffersValues 1-3 are available for DirectX only.</returns>
		</member>
		<member name="M:Unigine.Render.setStreamingMode(int)">
			<summary>
			Sets the streaming mode to be used for textures and meshes. Forced mode can be used for grabbing frame sequences, rendering node previews, etc.
			</summary> 
			<param name="mode"> Streaming mode to be set: one of the STREAMING_* variables. </param> 
		</member>
		<member name="M:Unigine.Render.getStreamingMode const">
			<summary>
			Returns the current streaming mode used for textures and meshes.
			</summary>  
			<returns>Current streaming mode: one of the STREAMING_* variables.</returns>
		</member>
		<member name="M:Unigine.Render.setStreamingUseMemoryLimit(bool)">
			<summary>
			Sets a value indicating if memory limitation for asynchronous resource loading (meshes and textures) is enabled.
			</summary> 
			<param name="limit"> 1 to enable memory limitation for asynchronous resource loading (meshes and textures), 0 to disable it. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.isStreamingUseMemoryLimit const">
			<summary>
			Returns a value indicating if memory limitation for asynchronous resource loading (meshes and textures) is currently enabled.
			</summary>  
			<returns>1 if memory limitation for asynchronous resource loading (meshes and textures) is currently enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setStreamingMaxThreads(int)">
			<summary>
			Set the maximum number of threads used for streaming.
			</summary> 
			<param name="threads"> Maximum number of threads to be used for streaming, within the [1; 256] range. The default value is 1.Higher number of threads results in faster streaming, but may cause spikes in case of excessive consumption of GPU resources. </param> 
		</member>
		<member name="M:Unigine.Render.getStreamingMaxThreads const">
			<summary>
			Returns the maximum number of threads used for streaming.
			</summary>  
			<returns>Current maximum number of threads used for streaming, within the [1; 256] range. The default value is 1.Higher number of threads results in faster streaming, but may cause spikes in case of excessive consumption of GPU resources.</returns>
		</member>
		<member name="M:Unigine.Render.setStreamingDestroyDuration(int)">
			<summary>
			Sets resource cleanup interval.
			</summary> 
			<param name="duration"> Resource cleanup interval, in number of frames, within the [0; 300] range. The default value is 30. </param> 
		</member>
		<member name="M:Unigine.Render.getStreamingDestroyDuration const">
			<summary>
			Returns the current resource cleanup interval.
			</summary>  
			<returns>Resource cleanup interval, in number of frames, within the [0; 300] range.</returns>
		</member>
		<member name="M:Unigine.Render.setStreamingParticlesMemoryLimit(int)">
			<summary>
			Sets cache memory limit used for streaming of vertices of particle systems.
			</summary> 
			<param name="limit"> Cache memory limit for vertices of particle systems to be set, in percentage of the total GPU memory. The default value is 3. </param> 
		</member>
		<member name="M:Unigine.Render.getStreamingParticlesMemoryLimit const">
			<summary>
			Returns the current cache memory limit used for streaming of vertices of particle systems.
			</summary>  
			<returns>Current cache memory limit for vertices of particle systems, in percentage of the total GPU memory.</returns>
		</member>
		<member name="M:Unigine.Render.setStreamingTexturesMemoryLimit(int)">
			<summary>
			Sets cache memory limit used for texture streaming.
			</summary> 
			<param name="limit"> Cache memory limit for textures to be set, in percentage of the total GPU memory. The default value is 65. </param> 
		</member>
		<member name="M:Unigine.Render.getStreamingTexturesMemoryLimit const">
			<summary>
			Returns the current cache memory limit used for texture streaming.
			</summary>  
			<returns>Current cache memory limit for textures, in percentage of the total GPU memory.</returns>
		</member>
		<member name="M:Unigine.Render.setStreamingTexturesCacheResolution(int)">
			<summary>
			Sets resolution for texture cache elements. These minimized copies of textures are used instead of the originals.
			</summary> 
			<param name="resolution"> Resolution for texture cache elements. One of the following values:0 - is 8x81 - is 16x16 (by default)2 - is 32x323 - is 64x644 - is 128x1285 - is 256x2566 - is 512x512 </param> 
		</member>
		<member name="M:Unigine.Render.getStreamingTexturesCacheResolution const">
			<summary>
			Returns current resolution for texture cache elements. These minimized copies of textures are used instead of the originals.
			</summary>  
			<returns>Current resolution for texture cache elements. One of the following values:0 - is 8x81 - is 16x16 (by default)2 - is 32x323 - is 64x644 - is 128x1285 - is 256x2566 - is 512x512</returns>
		</member>
		<member name="M:Unigine.Render.setStreamingMeshesMemoryLimit(int)">
			<summary>
			Sets cache memory limit used for mesh streaming.
			</summary> 
			<param name="limit"> Cache memory limit for meshes to be set, in percentage of the total GPU memory. The default value is 15. </param> 
		</member>
		<member name="M:Unigine.Render.getStreamingMeshesMemoryLimit const">
			<summary>
			Returns the current cache memory limit used for mesh streaming.
			</summary>  
			<returns>Current cache memory limit for meshes, in percentage of the total GPU memory.</returns>
		</member>
		<member name="M:Unigine.Render.setShadersPreload(bool)">
			<summary>
			Sets a value indicating if all shaders are compiled and loaded to RAM every time the world is loaded.					Pre-loading shaders results in significant memory consumption. It is recommended to use pre-generated shaders cache instead when possible (see the shaders_create command). In this case necessary shaders are loaded from cache to RAM on demand.
			</summary> 
			<param name="preload"> 1 to enable pre-loading for shaders, 0 to disable it. The default value is 0. </param> 
		</member>
		<member name="M:Unigine.Render.isShadersPreload const">
			<summary>
			Returns a value indicating if all shaders are compiled and loaded to RAM every time the world is loaded.					Pre-loading shaders results in significant memory consumption. It is recommended to use pre-generated shaders cache instead when possible (see the shaders_create command). In this case necessary shaders are loaded from cache to RAM on demand.
			</summary>  
			<returns>1 if pre-loading for shaders is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.destroyCacheTexture(Unigine.UGUID)">
			<summary>
			Deletes cache (images and metadata) stored on disk for the texture with the specified GUID. Corresponding files in the data/.cache_textures will be  removed.
			</summary> 
			<param name="guid"> Texture file GUID. </param> 
		</member>
		<member name="M:Unigine.Render.createCacheTexture(Unigine.UGUID)">
			<summary>
			Generates cache for the texture with the specified GUID.										Texture cache generated by this method is incomplete, only images are created, as all metadata (flags, etc.) is stored in materials.
			</summary> 
			<param name="guid"> Texture file GUID. </param> 
		</member>
		<member name="M:Unigine.Render.destroyCacheTextures">
			<summary>
			Clears texture cache (images and metadata) stored on disk. All files in the data/.cache_textures will be  removed.
			</summary>  
		</member>
		<member name="M:Unigine.Render.unloadCacheTextures">
			<summary>
			Unloads texture cache from the memory. This method does not delete files in the data/.cache_textures.
			</summary>  
		</member>
		<member name="M:Unigine.Render.createCacheTextures">
			<summary>
			Generates texture cache for all textures used in the project.					Texture cache generated by this method is incomplete, only images are created, as all metadata (flags, etc.) is stored in materials.
			</summary>  
		</member>
		<member name="M:Unigine.Render.loadCacheTextures">
			<summary>
			Loads texture cache from the disk. Texture cache always remains in memory after loading.
			</summary>  
		</member>
		<member name="M:Unigine.Render.setTranslucentColor(Unigine.Math.vec4)">
			<summary>
			Sets the color to be used for translucent objects globally. When light shines on one side of the object, the other side is partially illuminated with this color.
			</summary> 
			<param name="color"> Color to be used for translucent objects globally. By default, the color is white. </param> 
		</member>
		<member name="M:Unigine.Render.getTranslucentColor const">
			<summary>
			Returns the current color used for translucent objects globally. When light shines on one side of the object, the other side is partially illuminated with this color.
			</summary>  
			<returns>Color used for translucent objects globally. By default, the color is white.</returns>
		</member>
		<member name="M:Unigine.Render.setShadowDistanceScale(float)">
			<summary>
			Sets the global shadow distance scale multiplier. This option allows a developer to easily increase or decrease shadows rendering performance by changing the scale.
			</summary> 
			<param name="scale"> Global shadow distance scale multiplier to be set in [0.0f; inf] range. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getShadowDistanceScale const">
			<summary>
			Returns the current the global shadow distance scale multiplier. This option allows a developer to easily increase or decrease shadows rendering performance by changing the scale.
			</summary>  
			<returns>Current global shadow distance scale multiplier in [0.0f; inf] range.</returns>
		</member>
		<member name="M:Unigine.Render.addScriptableMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Adds a new global scriptable material. To apply a scriptable material per-camera or per-player, use the addScriptableMaterial() method of the Camera class or the same method of the Player class respectively. The order of execution for scripts assigned to scriptable materials is defined by material's number in the list of materials applied globally.					Scriptable materials applied globally have their expressions executed before the ones that are applied per-camera or per-player.
			</summary> 
			<param name="material"> Scriptable material to be applied globally. </param> 
		</member>
		<member name="M:Unigine.Render.insertScriptableMaterial(int,Unigine.Ptr{Unigine.Material})">
			<summary>
			Inserts a new global scriptable material to the list of globally applied scriptable materials. To apply a scriptable material per-camera or per-player, use the insertScriptableMaterial() method of the Camera class or the same method of the Player class respectively. The order of execution for scripts assigned to scriptable materials is defined by material's number in the list of materials applied globally.					Scriptable materials applied globally have their expressions executed before the ones that are applied per-camera or per-player.
			</summary> 
			<param name="num"> Position at which a new scriptable material is to be inserted. </param>
			<param name="material"> Scriptable material to be inserted into the list of globally applied scriptable materials. </param> 
		</member>
		<member name="M:Unigine.Render.removeScriptableMaterial(int)">
			<summary>
			Removes the global scriptable material with the specified number.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param> 
		</member>
		<member name="M:Unigine.Render.getNumScriptableMaterials const">
			<summary>
			Returns the total number of scriptable materials applied globally.
			</summary>  
			<returns>Total number of scriptable materials applied globally.</returns>
		</member>
		<member name="M:Unigine.Render.findScriptableMaterial(Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Returns the number of the specified scriptable material applied globally. This number determines the order in which the assigned expressions are executed.					Scriptable materials applied globally have their expressions executed before the ones that are applied per-camera or per-player.
			</summary> 
			<param name="material"> Scriptable material for which a number is to be found. </param> 
			<returns>Scriptable material number in the range from 0 to the total number of scriptable materials, or -1 if the specified material was not found.</returns>
		</member>
		<member name="M:Unigine.Render.setScriptableMaterial(int,Unigine.Ptr{Unigine.Material})">
			<summary>
			Replaces the scriptable material with the specified number with the new scriptable material specified. The number of material determines the order in which the expressions assigned to it are executed.					Scriptable materials applied globally have their expressions executed before the ones that are applied per-camera or per-player.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param>
			<param name="material"> New scriptable material to replace the one with the specified number. </param> 
		</member>
		<member name="M:Unigine.Render.getScriptableMaterial(int) const">
			<summary>
			Returns a scriptable material applied globally by its number.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param> 
			<returns>Scriptable material applied globally with the specified number.</returns>
		</member>
		<member name="M:Unigine.Render.setScriptableMaterialEnabled(int,bool)">
			<summary>
			Enables or disables the scriptable material with the specified number. When a material is disabled (inactive), the scripts attached to it are not executed.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param>
			<param name="enabled"> 1 to enable the scriptable material with the specified number, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.getScriptableMaterialEnabled(int) const">
			<summary>
			Returns a value indicating if the scriptable material with the specified number is enabled (active). When a material is disabled (inactive), the scripts attached to it are not executed.
			</summary> 
			<param name="num"> Scriptable material number in the range from 0 to the total number of scriptable materials. </param> 
			<returns>1 if the scriptable material with the specified number is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.swapScriptableMaterials(int,int)">
			<summary>
			Swaps two scriptable materials with specified numbers. The number of material determines the order in which the expressions assigned to it are executed.					Scriptable materials applied globally have their expressions executed before the ones that are applied per-camera or per-player.
			</summary> 
			<param name="num_0"> Number of the first scriptable material in the range from 0 to the total number of scriptable materials. </param>
			<param name="num_1"> Number of the second scriptable material in the range from 0 to the total number of scriptable materials. </param> 
		</member>
		<member name="M:Unigine.Render.clearScriptableMaterials">
			<summary>
			Clears all global scriptable materials.
			</summary>  
		</member>
		<member name="M:Unigine.Render.getHDRTextureFormat const">
			<summary>
			Returns the currently used HDR texture format.
			</summary>  
			<returns>Current HDR texture format. One of the following values:FORMAT_RGBA16FFORMAT_RG11B10F</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture(int,int,int,int,char)">
			<summary>
								Allocates a temporary render texture with the specified width, height, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.						You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.										It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="width"> Width of the texture, in pixels. </param>
			<param name="height"> Height of the texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param> 
			<returns>Temporary texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture(int,char)">
			<summary>
								Allocates a temporary render texture of the specified format. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.						You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.										It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param> 
			<returns>Temporary texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture(Unigine.Ptr{Unigine.Texture})">
			<summary>
								Allocates a temporary render texture with the specified width, height, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.						You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.										It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="texture"> Source texture for which a temporary texture is to be allocated in the pool. </param> 
			<returns>Temporary texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporaryTexture(Unigine.Ptr{Unigine.Texture},char)">
			<summary>
								Allocates a temporary render texture for the specified source texture (using all its parameters: resolution, flags, etc.). This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.						You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.										It also automatically gives names to resources, which can be used for identification in debug.
			</summary> 
			<param name="texture"> Source texture for which a temporary texture is to be allocated in the pool. </param>
			<param name="name"> Name to be used for this temporary texture (optional). </param> 
			<returns>Temporary texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporary2DArrayTexture(int,int,int,int,int,char)">
			<summary>
								Allocates a temporary 2D array texture with the specified width, height, number of layers, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.						You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.
			</summary> 
			<param name="width"> Width of the 2D array texture, in pixels. </param>
			<param name="height"> Height of the 2D array texture, in pixels. </param>
			<param name="depth"> Number of layers in the 2D array texture. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="name"> Name to be used for this temporary 2D array texture (optional). </param> 
			<returns>Temporary 2D array texture.</returns>
		</member>
		<member name="M:Unigine.Render.getTemporary3DTexture(int,int,int,int,int,char)">
			<summary>
								Allocates a temporary 3D texture with the specified width, height, depth, format, and flags. This function can be used when you need a quick render texture to perform some temporary calculations. Release it using releaseTemporaryTexture() as soon as you're done with it, so another call can start reusing it, if necessary. In any case, such texture shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render textures, so a call to this method most often just returns an already created one (if the size and format match). These temporary textures are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing them.						You can't depend on any particular contents of a temporary texture obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.
			</summary> 
			<param name="width"> Width of the 3D texture, in pixels. </param>
			<param name="height"> Height of the 3D texture, in pixels. </param>
			<param name="depth"> Depth of the 3D texture, in pixels. </param>
			<param name="format"> Texture format: one of the Texture::FORMAT_* values. </param>
			<param name="flags"> Texture flags. </param>
			<param name="name"> Name to be used for this temporary 3D texture (optional). </param> 
			<returns>Temporary 3D texture.</returns>
		</member>
		<member name="M:Unigine.Render.releaseTemporaryTexture(Unigine.Ptr{Unigine.Texture})">
			<summary>
			Releases the temporary texture previously obtained via getTemporaryTexture(), getTemporary2DArrayTexture(), or getTemporary3DTexture() method and returns it to the pool.
			</summary> 
			<param name="texture"> Temporary texture or texture array to be returned to the pool. </param> 
		</member>
		<member name="M:Unigine.Render.getTemporaryRenderTarget">
			<summary>
								Allocates a temporary render target. This function can be used when you need a quick render target to perform some temporary calculations. Release it using releaseTemporaryRenderTarget() as soon as you're done with it, so another call can start reusing it if necessary. In any case such render target shall be released automatically in the next frame.					UNIGINE keeps an internal pool of temporary render targets, so a call to this method most often just returns an already created one (if the size and format matches). These temporary render targets are actually destroyed when they aren't used for a couple of frames.					If you are doing a series of post-processing "blits", it's best for performance to get and release a temporary render targets for each blit, instead of getting one or two render targets upfront and reusing them.						You can't depend on any particular contents of a temporary render target obtained from this function: it might be garbage, or it might be cleared to some color, depending on the platform.
			</summary>  
			<returns>Temporary render target.</returns>
		</member>
		<member name="M:Unigine.Render.releaseTemporaryRenderTarget(Unigine.Ptr{RenderTarget})">
			<summary>
			Releases the temporary render target previously obtained via getTemporaryRenderTarget() method and returns it to the pool.
			</summary> 
			<param name="render_target"> Temporary render target to be returned to the pool. </param> 
		</member>
		<member name="M:Unigine.Render.setLightsInterleavedSamples(int)">
			<summary>
			Sets one of the two interleaved rendering modes defining the number of pixels to be skipped when rendering lights during the deferred pass with subsequent reconstruction of neighboring pixels using the data from previous frames.
			</summary> 
			<param name="samples"> Interleaved rendering mode for lighting during the deferred pass to be set, one of the following:0 - half of all pixels is rendered skipping each second line (1 x 2)1 - quarter of all pixels is rendered skipping each second line and row (2 x 2) </param> 
		</member>
		<member name="M:Unigine.Render.getLightsInterleavedSamples const">
			<summary>
			Returns the current interleaved rendering mode defining the number of pixels to be skipped when rendering lights during the deferred pass with subsequent reconstruction of neighboring pixels using the data from previous frames.
			</summary>  
			<returns>Current interleaved rendering mode for lighting during the deferred pass, one of the following:0 - half of all pixels is rendered skipping each second line (1 x 2)1 - quarter of all pixels is rendered skipping each second line and row (2 x 2)</returns>
		</member>
		<member name="M:Unigine.Render.setSSAODenoiseQuality(int)">
			<summary>
			Sets the noise reduction quality level for the SSAO (Screen-Space Ambient Occlusion) effect defining the number of samples used.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="quality"> Noise reduction quality to be set:0 - Low1 - Medium (by default)2 - High3 - UltraHigher values provide better reduction, but for a performance cost (choosing Medium is enough in most cases).  </param> 
		</member>
		<member name="M:Unigine.Render.getSSAODenoiseQuality const">
			<summary>
			Returns the current noise reduction quality level for the SSAO (Screen-Space Ambient Occlusion) effect defining the number of samples used.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current noise reduction quality:0 - Low1 - Medium (by default)2 - High3 - UltraHigher values provide better reduction, but for a performance cost (choosing Medium is enough in most cases). </returns>
		</member>
		<member name="M:Unigine.Render.setSSGIDenoiseQuality(int)">
			<summary>
			Sets the noise reduction quality level for the SSGI (Screen-Space Global Illumination) effect defining the number of samples used.
			</summary> 
			<param name="quality"> Noise reduction quality to be set:0 - Low1 - Medium (by default)2 - High3 - UltraHigher values provide better reduction, but for a performance cost (choosing Medium is enough in most cases).  </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIDenoiseQuality const">
			<summary>
			Returns the current noise reduction quality level for the SSGI (Screen-Space Global Illumination) effect defining the number of samples used.
			</summary>  
			<returns>Current noise reduction quality:0 - Low1 - Medium (by default)2 - High3 - UltraHigher values provide better reduction, but for a performance cost (choosing Medium is enough in most cases). </returns>
		</member>
		<member name="M:Unigine.Render.setSSGIDenoiseIntensity(float)">
			<summary>
			Sets the noise reduction intensity for the SSGI (Screen Space Global Illumination) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> Noise reduction intensity value in range [0.0f; 1.0f] to be set. Higher values provide a less noisy, but more blurred result. The default value is 0.2f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIDenoiseIntensity const">
			<summary>
			Returns the current noise reduction intensity for the SSGI (Screen Space Global Illumination) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Noise reduction intensity value in range [0.0f; 1.0f]. Higher values provide a less noisy, but more blurred result. The default value is 0.2f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGIDenoiseGaussianSigma(float)">
			<summary>
			Sets the sigma parameter of Gaussian blur used for noise reduction for the SSGI (Screen Space Global Illumination) effect. This parameter controls the amount of blur applied.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="sigma"> Gaussian blur sigma parameter value in range [0.0f; 100.0f] to be set. The default value is 10.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIDenoiseGaussianSigma const">
			<summary>
			Returns the current value of the sigma parameter of Gaussian blur used for noise reduction for the SSGI (Screen Space Global Illumination) effect. This parameter controls the amount of blur applied.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Gaussian blur sigma parameter value in range [0.0f; 100.0f]. The default value is 10.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGIDenoiseThreshold(float)">
			<summary>
			Sets the threshold value for color difference of neighboring pixels used for noise reduction for the SSGI (Screen Space Global Illumination) effect: blur is applied when the color difference is less than the threshold value.					Setting too high values result in blurring the whole image.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> Threshold value for color difference of neighboring pixels in range [0.0f; 1.0f] to be set. The default value is 0.1f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIDenoiseThreshold const">
			<summary>
			Returns the current threshold value for color difference of neighboring pixels used for noise reduction for the SSGI (Screen Space Global Illumination) effect: blur is applied when the color difference is less than the threshold value.					Setting too high values result in blurring the whole image.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Threshold value for color difference of neighboring pixels in range [0.0f; 1.0f]. The default value is 0.1f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGIDenoiseRadius(int)">
			<summary>
			Sets the radius of the area to be affected by noise reduction for the SSGI (Screen Space Global Illumination) effect.
			</summary> 
			<param name="radius"> Radius to be affected by noise reduction, an integer value in range [1; 3] to be set. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIDenoiseRadius const">
			<summary>
			Returns the current radius of the area to be affected by noise reduction for the SSGI (Screen Space Global Illumination) effect.
			</summary>  
			<returns>Radius to be affected by noise reduction, an integer value in range [1; 3]. The default value is 1.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGIColorClampingIntensity(float)">
			<summary>
			Sets the intensity of TAA color clamping at zero pixel velocity for the SSGI (Screen Space Global Illumination) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> Intensity of TAA color clamping at zero pixel velocity in range [0.0f; 1.0f]. Lower values result in more accumulated frames combined, which reduces noise flickering, but increases ghosting effect (to reduce ghosting in this case you can use SSGI Color Clamping Velocity Threshold), while higher values reduce ghosting effect, but increase flickering. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIColorClampingIntensity const">
			<summary>
			Returns the current intensity of TAA color clamping at zero pixel velocity for the SSGI (Screen Space Global Illumination) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Intensity of TAA color clamping at zero pixel velocity in range [0.0f; 1.0f]. Lower values result in more accumulated frames combined, which reduces noise flickering, but increases ghosting effect (to reduce ghosting in this case you can use SSGI Color Clamping Velocity Threshold), while higher values reduce ghosting effect, but increase flickering. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGIColorClampingVelocityThreshold(float)">
			<summary>
			Sets the sensitivity of TAA color clamping for the SSGI (Screen Space Global Illumination) effect to pixel velocity change. This parameter is used to reduce ghosting effect for lower Color Clamping Intensity values: it automatically increases clamping intensity for higher velocities, and disables clamping for low velocity values.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> Threshold for the intensity of TAA color clamping at zero pixel velocity. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIColorClampingVelocityThreshold const">
			<summary>
			Returns the current sensitivity of TAA color clamping for the SSGI (Screen Space Global Illumination) effect to pixel velocity change. This parameter is used to reduce ghosting effect for lower Color Clamping Intensity values: it automatically increases clamping intensity for higher velocities, and disables clamping for low velocity values.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Threshold for the intensity of TAA color clamping at zero pixel velocity.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalDenoiseQuality(int)">
			<summary>
			Sets the noise reduction quality level for bent normals calculation defining the number of samples used.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="quality"> Noise reduction quality to be set:0 - Low1 - Medium (by default)2 - High3 - UltraHigher values provide better reduction, but for a performance cost (choosing Medium is enough in most cases).  </param> 
		</member>
		<member name="M:Unigine.Render.getBentNormalDenoiseQuality const">
			<summary>
			Returns the current noise reduction quality level for bent normals calculation defining the number of samples used.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current noise reduction quality:0 - Low1 - Medium (by default)2 - High3 - UltraHigher values provide better reduction, but for a performance cost (choosing Medium is enough in most cases). </returns>
		</member>
		<member name="M:Unigine.Render.setSSRDenoiseQuality(int)">
			<summary>
			Sets the noise reduction quality level for the SSR (Screen-Space Reflections) effect defining the number of samples used.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="quality"> Noise reduction quality to be set:0 - Low1 - Medium (by default)2 - High3 - UltraHigher values provide better reduction, but for a performance cost (choosing Medium is enough in most cases).  </param> 
		</member>
		<member name="M:Unigine.Render.getSSRDenoiseQuality const">
			<summary>
			Returns the current noise reduction quality level for the SSR (Screen-Space Reflections) effect defining the number of samples used.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current noise reduction quality:0 - Low1 - Medium (by default)2 - High3 - UltraHigher values provide better reduction, but for a performance cost (choosing Medium is enough in most cases). </returns>
		</member>
		<member name="M:Unigine.Render.setSSRDenoiseIntensity(float)">
			<summary>
			Sets the noise reduction intensity for the SSR (Screen-Space Reflections) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> Noise reduction intensity value in range [0.0f; 1.0f] to be set. Higher values provide a less noisy, but more blurred result. The default value is 0.2f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRDenoiseIntensity const">
			<summary>
			Returns the current noise reduction intensity for the SSR (Screen-Space Reflections) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Noise reduction intensity value in range [0.0f; 1.0f] to be set. Higher values provide a less noisy, but more blurred result. The default value is 0.2f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRDenoiseGaussianSigma(float)">
			<summary>
			Sets the sigma parameter of Gaussian blur used for noise reduction for the SSR (Screen-Space Reflections) effect. This parameter controls the amount of blur applied.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="sigma"> Gaussian blur sigma parameter value in range [0.0f; 100.0f] to be set. The default value is 10.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRDenoiseGaussianSigma const">
			<summary>
			Returns the current value of the sigma parameter of Gaussian blur used for noise reduction for the SSR (Screen-Space Reflections) effect. This parameter controls the amount of blur applied.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Gaussian blur sigma parameter value in range [0.0f; 100.0f]. The default value is 10.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRDenoiseThreshold(float)">
			<summary>
			Sets the threshold value for color difference of neighboring pixels used for noise reduction for the SSR (Screen-Space Reflections) effect: blur is applied when the color difference is less than the threshold value.					Setting too high values result in blurring the whole image.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> Threshold value for color difference of neighboring pixels in range [0.0f; 1.0f] to be set. The default value is 0.1f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRDenoiseThreshold const">
			<summary>
			Returns the current threshold value for color difference of neighboring pixels used for noise reduction for the SSR (Screen-Space Reflections) effect: blur is applied when the color difference is less than the threshold value.					When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Threshold value for color difference of neighboring pixels in range [0.0f; 1.0f]. The default value is 0.1f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRDenoiseRadius(int)">
			<summary>
			Sets the radius of the area to be affected by noise reduction for the SSR (Screen-Space Reflections) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="radius"> Radius to be affected by noise reduction, an integer value in range [1; 3] to be set. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRDenoiseRadius const">
			<summary>
			Returns the current radius of the area to be affected by noise reduction for the SSR (Screen-Space Reflections) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Radius to be affected by noise reduction, an integer value in range [1; 3]. The default value is 1.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRColorClampingIntensity(float)">
			<summary>
			Sets the intensity of TAA color clamping at zero pixel velocity for the SSR (Screen-Space Reflections) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> Intensity of TAA color clamping at zero pixel velocity in range [0.0f; 1.0f]. Lower values result in more accumulated frames combined, which reduces noise flickering, but increases ghosting effect (to reduce ghosting in this case you can use SSR Color Clamping Velocity Threshold), while higher values reduce ghosting effect, but increase flickering. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRColorClampingIntensity const">
			<summary>
			Returns the current intensity of TAA color clamping at zero pixel velocity for the SSR (Screen-Space Reflections) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Intensity of TAA color clamping at zero pixel velocity in range [0.0f; 1.0f]. Lower values result in more accumulated frames combined, which reduces noise flickering, but increases ghosting effect (to reduce ghosting in this case you can use SSR Color Clamping Velocity Threshold), while higher values reduce ghosting effect, but increase flickering. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRColorClampingVelocityThreshold(float)">
			<summary>
			Sets the sensitivity of TAA color clamping for the SSR (Screen-Space Reflections) effect to pixel velocity change. This parameter is used to reduce ghosting effect for lower Color Clamping Intensity values: it automatically increases clamping intensity for higher velocities, and disables clamping for low velocity values.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> Sensitivity of TAA color clamping for the SSR (Screen-Space Reflections) effect to pixel velocity change in range [0.0f; 1.0f] to be set. Lower values result in more accumulated frames combined, which reduces noise flickering, but increases ghosting effect (to reduce ghosting in this case you can use SSR Color Clamping Velocity Threshold), while higher values reduce ghosting effect, but increase flickering. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRColorClampingVelocityThreshold const">
			<summary>
			Returns the current sensitivity of TAA color clamping for the SSR (Screen-Space Reflections) effect to pixel velocity change. This parameter is used to reduce ghosting effect for lower Color Clamping Intensity values: it automatically increases clamping intensity for higher velocities, and disables clamping for low velocity values.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Sensitivity of TAA color clamping for the SSR (Screen-Space Reflections) effect to pixel velocity change in range [0.0f; 1.0f]. Lower values result in more accumulated frames combined, which reduces noise flickering, but increases ghosting effect (to reduce ghosting in this case you can use SSR Color Clamping Velocity Threshold), while higher values reduce ghosting effect, but increase flickering. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSDiffuse(bool)">
			<summary>
			Enables or disables the SSSSS (Screen-Space Subsurface Scattering) calculation for diffuse lighting (directional lights).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="diffuse"> 1 to enable the SSSSS calculation for diffuse lighting;0 — to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSSSSSDiffuse const">
			<summary>
			Returns a value indicating if the SSSSS (Screen-Space Subsurface Scattering) calculation for diffuse lighting (directional lights) is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if the SSSSS calculation for diffuse lighting is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSAmbient(bool)">
			<summary>
			Enables or disables the SSSSS (Screen-Space Subsurface Scattering) calculation for ambient lighting (environment).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="ambient"> 1 to enable the SSSSS calculation for ambient lighting; 0 — to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSSSSSAmbient const">
			<summary>
			Returns a value indicating if the SSSSS (Screen-Space Subsurface Scattering) calculation for ambient lighting (environment) is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if the SSSSS calculation for ambient lighting is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSMinThreshold(float)">
			<summary>
			Sets the threshold of SSSSS (Screen-Space Subsurface Scattering) for the material's Translucent parameter equal to 0 (minimum translucency).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> Threshold scattering value for the material's Translucent parameter equal to 0. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSMinThreshold const">
			<summary>
			Returns the threshold of SSSSS (Screen-Space Subsurface Scattering) for the material's Translucent parameter equal to 0 (minimum translucency).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Threshold scattering value for the material's Translucent parameter equal to 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSMaxThreshold(float)">
			<summary>
			Sets the threshold of SSSSS (Screen-Space Subsurface Scattering) for the material's Translucent parameter equal to 1 (maximum translucency).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> Threshold scattering value for the material's Translucent parameter equal to 1. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSMaxThreshold const">
			<summary>
			Returns the threshold of SSSSS (Screen-Space Subsurface Scattering) for the material's Translucent parameter equal to 1 (maximum translucency).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Threshold scattering value for the material's Translucent parameter equal to 1.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSNoiseStep(float)">
			<summary>
			Sets the intensity of the step noise used for SSSSS (Screen-Space Subsurface Scattering) calculation to reduce banding artifacts of tracing: higher values make banding less visible.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="step"> Intensity of the step noise used for SSSSS calculation. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSNoiseStep const">
			<summary>
			Returns the intensity of the step noise used for SSSSS (Screen-Space Subsurface Scattering) calculation to reduce banding artifacts of tracing: higher values make banding less visible.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Intensity of the step noise used for SSSSS calculation.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSNoiseRay(float)">
			<summary>
			Sets the intensity of the ray noise used for SSSSS (Screen-Space Subsurface Scattering) calculation to reduce banding artifacts of tracing: higher values make banding less visible.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="ray"> Intensity of the ray noise used for SSSSS calculation. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSNoiseRay const">
			<summary>
			Returns the intensity of the ray noise used for SSSSS (Screen-Space Subsurface Scattering) calculation to reduce banding artifacts of tracing: higher values make banding less visible.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Intensity of the ray noise used for SSSSS calculation.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSInterleaved(bool)">
			<summary>
			Enables or disables interleaved rendering mode for SSSSS (Screen-Space Subsurface Scattering).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="interleaved"> 1 to enable the interleaved mode for SSSSS; 0 — to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSSSSSInterleaved const">
			<summary>
			Returns a value indicating if the interleaved rendering mode for SSSSS (Screen-Space Subsurface Scattering) is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if the interleaved mode for SSSSS is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSInterleavedColorClamping(int)">
			<summary>
			Sets the color clamping mode used to reduce ghosting effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="clamping"> One of the color clamping modes:0 — disabled1 — low2 — medium3 — high4 — high + velocity </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSInterleavedColorClamping const">
			<summary>
			Returns the color clamping mode used to reduce ghosting effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>One of the color clamping modes:0 — disabled1 — low2 — medium3 — high4 — high + velocity</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSInterleavedSamples(int)">
			<summary>
			Defines the number of pixels to be skipped when rendering the SSSSS (Screen-Space Subsurface Scattering) effect with subsequent reconstruction of neighboring pixels using the data from previous frames.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="samples"> 0 — half of all pixels is rendered skipping each second line (1 x 2)1 — quarter of all pixels is rendered skipping each second line and row (2 x 2) </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSInterleavedSamples const">
			<summary>
			Defines the number of pixels to be skipped when rendering the SSSSS (Screen-Space Subsurface Scattering) effect with subsequent reconstruction of neighboring pixels using the data from previous frames.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>0 — half of all pixels is rendered skipping each second line (1 x 2)1 — quarter of all pixels is rendered skipping each second line and row (2 x 2)</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSTAAFixFlicker(bool)">
			<summary>
			Enables or disables the Fix Flicker effect for the SSSSS (Screen-Space Subsurface Scattering) effect that removes bright pixels by using the pixel brightness information from the previous frame.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="flicker"> true to enable the Fix Flicker effect; false — to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSSSSSTAAFixFlicker const">
			<summary>
			Returns a value indicating if the Fix Flicker effect is enabled for the SSSSS (Screen-Space Subsurface Scattering) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>true if the Fix Flicker effect is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSTAAAntialiasingInMotion(bool)">
			<summary>
			Enables or disables antialiasing in motion (for moving camera and objects) for the SSSSS (Screen-Space Subsurface Scattering) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="motion"> 1 to enable antialiasing in motion; 0 — to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSSSSSTAAAntialiasingInMotion const">
			<summary>
			Returns a value indicating if antialiasing in motion is enabled for the SSSSS (Screen-Space Subsurface Scattering) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if antialiasing in motion is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSTAAFramesByColor(bool)">
			<summary>
			Enables or disables the Frames By Color option for SSSSS allowing accumulation of a variable number of frames over time depending on the pixel color difference between the current and previous frames.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="color"> 1 to enable the Frames By Color option; 0 — to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSSSSSTAAFramesByColor const">
			<summary>
			Returns a value indicating if the Frames By Color option for the SSSSS (Screen-Space Subsurface Scattering) effect is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if the Frames By Color option is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSTAAFramesByVelocity(bool)">
			<summary>
			Enables or disables the Frames By Velocity option for the SSSSS (Screen-Space Subsurface Scattering) effect allowing accumulaton of a variable number of frames over time depending on the pixel velocity difference between the current and previous frames.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="velocity"> 1 to enable the Frames By Velocity option; 0 — to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSSSSSTAAFramesByVelocity const">
			<summary>
			Returns a value indicating if the Frames By Velocity option for the SSSSS (Screen-Space Subsurface Scattering) effect is enabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>1 if the Frames By Velocity option is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSTAAPreserveDetails(float)">
			<summary>
			Enables or disables the Preserve Details option that controls the TAA (Temporal Anti-Aliasing) detail level for the SSSSS (Screen-Space Subsurface Scattering) effect: the higher the value, the more detailed the image is. At the value of 0, the image becomes blurred when moving the camera, however, the TAA effect is better.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="details"> The TAA detail level. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSTAAPreserveDetails const">
			<summary>
			Returns the value of the TAA (Temporal Anti-Aliasing) detail level for the SSSSS (Screen-Space Subsurface Scattering) effect: the higher the value, the more detailed the image is. At the value of 0, the image becomes blurred when moving the camera, however, the TAA effect is better.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>The TAA detail level.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSTAAFrameCount(float)">
			<summary>
			Sets the number of frames that are combined and blended during TAA calculation for the SSSSS (Screen-Space Subsurface Scattering) effect. The higher the value, the more frames are combined into the final image and the better anti-aliasing is. This value is used only when Frames By Velocity option is disabled.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="count"> The number of frames for velocity buffer. The default value is 30.0f </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSTAAFrameCount const">
			<summary>
			Returns the number of frames that are combined and blended during TAA calculation for the SSSSS (Screen-Space Subsurface Scattering) effect. The higher the value, the more frames are combined into the final image and the better anti-aliasing is. This value is used only when Frames By Velocity option is disabled.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>The number of frames for velocity buffer. The default value is 30.0f</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSTAAFramesVelocityThreshold(float)">
			<summary>
			Sets the threshold value defining sensitivity to velocity change (velocity threshold at which pixels are treated as fast moving) for the SSSSS (Screen-Space Subsurface Scattering) effect.
			</summary> 
			<param name="threshold"> Velocity threshold at which pixels are treated as fast-moving. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSTAAFramesVelocityThreshold const">
			<summary>
			Returns the threshold value defining sensitivity to velocity change (velocity threshold at which pixels are treated as fast moving) for the SSSSS (Screen-Space Subsurface Scattering) effect.
			</summary>  
			<returns>Velocity threshold at which pixels are treated as fast-moving.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSTAAMaxFramesByVelocity(float)">
			<summary>
			Sets the number of frames combined and blended for pixels that don't move relative to the screen space — the maximum frame count of TAA (Temporal Anti-Aliasing) for the SSSSS (Screen-Space Subsurface Scattering) effect.
			</summary> 
			<param name="velocity"> Maximum number of frames for velocity buffer. The default value is 60.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSTAAMaxFramesByVelocity const">
			<summary>
			Returns the number of frames combined and blended for pixels that don't move relative to the screen space — the maximum frame count of TAA (Temporal Anti-Aliasing) for the SSSSS (Screen-Space Subsurface Scattering) effect.
			</summary>  
			<returns>Maximum number of frames for velocity buffer.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSTAAMinFramesByVelocity(float)">
			<summary>
			Sets the number of frames combined and blended for fast-moving pixels on the screen — the minimum frame count of TAA (Temporal Anti-Aliasing) for the SSSSS (Screen-Space Subsurface Scattering) effect.
			</summary> 
			<param name="velocity"> Minimum number of frames for velocity buffer. The default value is 4.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSTAAMinFramesByVelocity const">
			<summary>
			Returns the number of frames combined and blended for fast-moving pixels on the screen — the minimum frame count of TAA (Temporal Anti-Aliasing) for the SSSSS (Screen-Space Subsurface Scattering) effect.
			</summary>  
			<returns>Minimum number of frames for velocity buffer.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSTAACatmullResampling(bool)">
			<summary>
			Enables and disables Catmull-Rom resampling for Screen-Space Subsurface Scattering. It allows reducing image blurring when the camera moves forward/backward. It is recommended to disable resampling at low settings.
			</summary> 
			<param name="resampling"> true to enable Catmull-Rom resampling; false — to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSSSSSTAACatmullResampling const">
			<summary>
			Returns a value indicating if Catmull-Rom resampling for Screen-Space Subsurface Scattering is enabled. It allows reducing image blurring when the camera moves forward/backward. It is recommended to disable resampling at low settings.
			</summary>  
			<returns>true if Catmull-Rom resampling is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSTAASamples(int)">
			<summary>
			Sets the number of the sample offsets performed during subpixel jittering for Screen-Space Subsurface Scattering. By the minimum value of 1, there will be no offsets, and, therefore, no anti-aliasing.
			</summary> 
			<param name="samples"> One of the values defining the number of samples:0 — 1 sample offset, no anti-aliasing1 — 4 offsets2 — 8 offsets3 — 16 offsets </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSTAASamples const">
			<summary>
			Returns the number of the sample offsets performed during subpixel jittering for Screen-Space Subsurface Scattering. By the minimum value of 1, there will be no offsets, and, therefore, no anti-aliasing.
			</summary>  
			<returns>One of the values defining the number of samples:0 — 1 sample offset, no anti-aliasing1 — 4 offsets2 — 8 offsets3 — 16 offsets</returns>
		</member>
		<member name="M:Unigine.Render.setEnvironmentCorrectRoughness(Render::CORRECT_ROUGHNESS)">
			<summary>
			Enables one of correction modes for environment reflections on rough surfaces or disables correction. Correction modes differ in the number of rays used to create a reflection on a rough surface.
			</summary> 
			<param name="roughness"> One of the CORRECT_ROUGHNESS_* modes. </param> 
		</member>
		<member name="M:Unigine.Render.getEnvironmentCorrectRoughness const">
			<summary>
			Returns the value indicating the correction mode set for environment reflections on rough surfaces. Correction modes differ in the number of rays used to create a reflection on a rough surface.
			</summary>  
			<returns>One of the CORRECT_ROUGHNESS_* modes.</returns>
		</member>
		<member name="M:Unigine.Render.getScreenshot(Unigine.Ptr{Unigine.Image})">
			<summary>
			Takes a screenshot and puts it to the specified image.
			</summary> 
			<param name="image"> Image to which the screenshot is to be saved. </param> 
		</member>
		<member name="M:Unigine.Render.setShowLandscapeAlbedo(bool)">
			<summary>
			Sets a value indicating if visualization of albedo data of the Landscape Terrain is enabled.
			</summary> 
			<param name="albedo"> true to enable visualization of albedo data of the Landscape Terrain; false — to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isShowLandscapeAlbedo const">
			<summary>
			Returns a value indicating if visualization of albedo data of the Landscape Terrain is enabled.
			</summary>  
			<returns>true if visualization of albedo data of the Landscape Terrain is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setShowLandscapeMask(int)">
			<summary>
			Sets the number of the landscape terrain detail mask to be visualized. This method can be used for visual debugging to display the selected detail mask of the landscape terrain.
			</summary> 
			<param name="mask"> Number of landscape terrain detail mask to be visualized in the [1; 20] range, or 0 - to disable mask visualization. </param> 
		</member>
		<member name="M:Unigine.Render.getShowLandscapeMask const">
			<summary>
			Returns the number of the landscape terrain detail mask currently visualized. This method can be used for visual debugging to display the selected detail mask of the landscape terrain.
			</summary>  
			<returns>Number of the currently visualized landscape terrain detail mask in the [1; 20] range, or 0 if mask visualization is disabled.</returns>
		</member>
		<member name="M:Unigine.Render.setShowLandscapeTerrainVTStreaming(bool)">
			<summary>
			Sets a value indicating if visualization is enabled for streaming of tiles of the landscape terrain megatexture. This method can be used for visual adjustment of the streaming process.
			</summary> 
			<param name="streaming"> true to enable visualization of streaming of landscape terrain tiles; false — to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isShowLandscapeTerrainVTStreaming const">
			<summary>
			Returns a value indicating if visualization is enabled for streaming of tiles of the landscape terrain megatexture. This method can be used for visual adjustment of the streaming process.
			</summary>  
			<returns>true if visualization for streaming of tiles of the landscape terrain megatexture is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainVTMemorySize(float)">
			<summary>
			Sets a value defining memory consumption for the Landscape Terrain textures.
			</summary> 
			<param name="size"> Memory consumption factor in the [0.0f; 1.0f] range:0.0f corresponds to 3072 x 3072 (~200 MB of VRAM)1.0f corresponds to 16384 x 16384 (~3.1 GB of VRAM)The default value is0.4f corresponds to 8192 × 8192 (~860 MB of VRAM).  </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainVTMemorySize const">
			<summary>
			Returns a value defining memory consumption for the Landscape Terrain textures.
			</summary>  
			<returns>Memory consumption factor in the [0.0f; 1.0f] range:0.0f corresponds to 3072 x 3072 (~200 MB of VRAM)1.0f corresponds to 16384 x 16384 (~3.1 GB of VRAM)The default value is0.4f corresponds to 8192 × 8192 (~860 MB of VRAM). </returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainVTTargetResolution(Unigine.Math.vec2)">
			<summary>
			Sets the target resolution for the landscape terrain.
			</summary> 
			<param name="resolution"> Two-component vector defining the target viewport resolution along X and Y axes. The default value is 1344 x 756. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainVTTargetResolution const">
			<summary>
			Returns the current target resolution for the landscape terrain.
			</summary>  
			<returns>Two-component vector defining the target viewport resolution along X and Y axes. The default value is 1344 x 756.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainVTDetailLevelByAngle(float)">
			<summary>
			Sets a value indicating detail level reduction depending on the inclination of the the Landscape Terrain polygons relative to viewing direction. Can be used to reduce streaming load and memory consumption.
			</summary> 
			<param name="angle"> Detail level quality value in the [0.0f; 1.0f] range:1.0f - pixel-to-pixel qualitylower values decrease quality </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainVTDetailLevelByAngle const">
			<summary>
			Returns a value indicating detail level reduction depending on the inclination of the the Landscape Terrain polygons relative to viewing direction. Can be used to reduce streaming load and memory consumption.
			</summary>  
			<returns>Detail level quality value in the [0.0f; 1.0f] range:1.0f - pixel-to-pixel qualitylower values decrease quality</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainVTFiltering(int)">
			<summary>
			Sets the filtering mode for the Landscape Terrain textures.
			</summary> 
			<param name="filtering"> Filtering mode to be used:0 — Low (lower mip-level is used)1 — Medium (higher mip-level is used)2 — High (linear interpolation between adjacent mip-levels) </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainVTFiltering const">
			<summary>
			Returns the filtering mode currently used for the Landscape Terrain textures.
			</summary>  
			<returns>Filtering mode currently used:0 — Low (lower mip-level is used)1 — Medium (higher mip-level is used)2 — High (linear interpolation between adjacent mip-levels)</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainVTTilesUpdatePerFrame(int)">
			<summary>
			Sets the number of tiles passed to the virtual texture of the Landscape Terrain each frame.
			</summary> 
			<param name="frame"> Number of terrain tiles to be passed to the virtual texture each frame, in the [1; 256] range. The default value is 60. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainVTTilesUpdatePerFrame const">
			<summary>
			Returns the current number of tiles passed to the virtual texture of the Landscape Terrain each frame.
			</summary>  
			<returns>Number of tiles currently passed to the virtual texture each frame, in the [1; 256] range. The default value is 60.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainVTTilesLoadPerFrame(int)">
			<summary>
			Sets the number of landscape terrain tiles to be loaded per frame. You can decrease the value of this parameter to reduce spikes, but in this case streaming becomes slower and more noticeable.
			</summary> 
			<param name="frame"> Number of landscape terrain tiles to be loaded per frame, in the [1; 64] range. The default value is 4. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainVTTilesLoadPerFrame const">
			<summary>
			Returns the current number of landscape terrain tiles loaded per frame. You can decrease the value of this parameter to reduce spikes, but in this case streaming becomes slower and more noticeable.
			</summary>  
			<returns>Number of landscape terrain tiles currently loaded per frame, in the [1; 64] range. The default value is 4.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainVTTilesReloadPerFrame(int)">
			<summary>
			Sets the number of tiles to be reloaded per frame after applying changes to the Landscape Terrain surface.
			</summary> 
			<param name="frame"> Number of tiles to be reloaded per frame, in the [1; 64] range. The default value is 4. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainVTTilesReloadPerFrame const">
			<summary>
			Returns the current number of tiles to be reloaded per frame after applying changes to the Landscape Terrain surface.
			</summary>  
			<returns>Number of tiles to be reloaded per frame, in the [1; 64] range. The default value is 4.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainDetailResolutionAdditionalMask(int)">
			<summary>
			Sets the resolution of the additional mask texture for details of the landscape terrain.
			</summary> 
			<param name="mask"> Texture resolution to be set. One of the following values:0 - 64×641 - 128×1282 - 256×2563 - 512×5124 - 1024×1024 (default)5 - 2048×20486 - 4096×40967 - 8192×81928 - 16384×16384 </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainDetailResolutionAdditionalMask const">
			<summary>
			Returns the current resolution of the additional mask texture for details of the landscape terrain.
			</summary>  
			<returns>Current texture resolution. One of the following values:0 - 64×641 - 128×1282 - 256×2563 - 512×5124 - 1024×1024 (default)5 - 2048×20486 - 4096×40967 - 8192×81928 - 16384×16384</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainDetailResolutionAlbedo(int)">
			<summary>
			Sets the resolution of the albedo texture for details of the landscape terrain.
			</summary> 
			<param name="albedo"> Texture resolution to be set. One of the following values:0 - 64×641 - 128×1282 - 256×2563 - 512×5124 - 1024×1024 (default)5 - 2048×20486 - 4096×40967 - 8192×81928 - 16384×16384 </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainDetailResolutionAlbedo const">
			<summary>
			Returns the current resolution of the albedo texture for details of the landscape terrain.
			</summary>  
			<returns>Current texture resolution. One of the following values:0 - 64×641 - 128×1282 - 256×2563 - 512×5124 - 1024×1024 (default)5 - 2048×20486 - 4096×40967 - 8192×81928 - 16384×16384</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainDetailResolutionHeight(int)">
			<summary>
			Sets the resolution of the height texture for details of the landscape terrain.
			</summary> 
			<param name="height"> Texture resolution to be set. One of the following values:0 - 64×641 - 128×1282 - 256×2563 - 512×5124 - 1024×1024 (default)5 - 2048×20486 - 4096×40967 - 8192×81928 - 16384×16384 </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainDetailResolutionHeight const">
			<summary>
			Returns the current resolution of the height texture for details of the landscape terrain.
			</summary>  
			<returns>Current texture resolution. One of the following values:0 - 64×641 - 128×1282 - 256×2563 - 512×5124 - 1024×1024 (default)5 - 2048×20486 - 4096×40967 - 8192×81928 - 16384×16384</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainMaskDithering(float)">
			<summary>
			Sets a new global dither amount multiplier to be used for rendering details of the landscape terrain. Dithering enables reduction of graphical artefacts in case of increased Mask Contrast values set for a detail. This is a global multiplier for dithering values set for each detail mask.
			</summary> 
			<param name="dithering"> New global dither amount multiplier to be set in the [0.0f; 1.0f] range. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainMaskDithering const">
			<summary>
			Returns the current global dither amount multiplier to be used for rendering details of the landscape terrain. Dithering enables reduction of graphical artefacts in case of increased Mask Contrast values set for a detail. This is a global multiplier for dithering values set for each detail mask.
			</summary>  
			<returns>Current global dither amount multiplier in the [0.0f; 1.0f] range.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainVisibleDistance(float)">
			<summary>
			Sets the maximum visibility distance for the landscape terrain. The terrain is visible, as long as the distance between the camera and the terrain does not exceed this value.
			</summary> 
			<param name="distance"> Maximum visibility distance to be set for the landscape terrain, in meters. The default value is 30 km. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainVisibleDistance const">
			<summary>
			Returns the current maximum visibility distance for the landscape terrain. The terrain is visible, as long as the distance between the camera and the terrain does not exceed this value.
			</summary>  
			<returns>Maximum visibility distance for the landscape terrain, in meters. The default value is 30 km.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainGeometryHoles(bool)">
			<summary>
			Sets a value indicating if decal-based holes for the landscape terrain are enabled.
			</summary> 
			<param name="holes"> true to enable decal-based holes for the landscape terrain; otherwise, false. </param> 
		</member>
		<member name="M:Unigine.Render.isLandscapeTerrainGeometryHoles const">
			<summary>
			Returns a value indicating if decal-based holes for the landscape terrain are enabled.
			</summary>  
			<returns>true if decal-based holes are enabled for the landscape terrain; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainGeometryPolygonSize(float)">
			<summary>
			Sets the size of Landscape Terrain polygons defining the maximum allowed density of Landscape Terrain geometry.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="size"> New size of Landscape Terrain polygons to be set (in units), in the [0.0001f, 1000.0f] range. The default value is 0.01f. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainGeometryPolygonSize const">
			<summary>
			Returns the size of Landscape Terrain polygons defining the maximum allowed density of Landscape Terrain geometry.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current size of Landscape Terrain polygons (in units), in the [0.0001f, 1000.0f] range. The default value is 0.01f.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainGeometryProgression(float)">
			<summary>
			Sets the progression of Landscape Terrain geometry tessellation.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="progression"> New progression value to be set in the [0.0f; 50.0f] range. The default value is 1.5f. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainGeometryProgression const">
			<summary>
			Returns the current progression of Landscape Terrain geometry tessellation.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current progression value in the [0.0f; 50.0f] range. The default value is 1.5f.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainGeometryFadeLods(float)">
			<summary>
			Sets the intensity of fading between levels of Landscape Terrain geometry tessellation. This value can be increased to remove sharp edges between areas with different geometry density.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="lods"> Fading intensity value to be set, in the [0.0f; 1.0f] range. The default value is 0.5f. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainGeometryFadeLods const">
			<summary>
			Returns the current intensity of fading between levels of Landscape Terrain geometry tessellation. This value can be increased to remove sharp edges between areas with different geometry density.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current fading intensity value in the [0.0f; 1.0f] range. The default value is 0.5f.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainGeometrySubpixelReduction(float)">
			<summary>
			Sets the minimum ratio between the polygon size (in screen space) to the size of an area in the viewport for skipping polygons rendering (the ones having a lower ratio will be removed).Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="reduction"> Subpixel reduction ratio to be set, in the [0.0f; 50.0f] range. The default value is 6.0f.Setting too high values may cause small but noticeable visual artifacts when the camera moves. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainGeometrySubpixelReduction const">
			<summary>
			Returns the minimum ratio between the polygon size (in screen space) to the size of an area in the viewport for skipping polygons rendering (the ones having a lower ratio will be removed).When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Current subpixel reduction ratio, in the [0.0f; 50.0f] range. The default value is 6.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainCullingAggressive(bool)">
			<summary>
			Sets a value indicating if frustum culling optimization is enabled for the Landscape Terrain. When enabled, the number of culled polygons increases thereby increasing performance. In case of any issues with polygons rendering, try disabling this option (however, note that performance may drop).
			</summary> 
			<param name="aggressive"> true to enable frustum culling optimization for the Landscape Terrain; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isLandscapeTerrainCullingAggressive const">
			<summary>
			Returns a value indicating if frustum culling optimization is enabled for the Landscape Terrain. When enabled, the number of culled polygons increases thereby increasing performance. In case of any issues with polygons rendering, try disabling this option (however, note that performance may drop).
			</summary>  
			<returns>true if frustum culling optimization is enabled for the landscape terrain; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainCullingFrustumPadding(float)">
			<summary>
			Sets a multiplier for the size of viewing frustum to be used for culling polygons of the Landscape Terrain.
			</summary> 
			<param name="padding"> Frustumn padding multiplier to be set, in the [0.0f; 1.0f] range. The default value is 0.1f. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainCullingFrustumPadding const">
			<summary>
			Returns the current multiplier for the size of viewing frustum used for culling polygons of the Landscape Terrain.
			</summary>  
			<returns>Current frustumn padding multiplier, in the [0.0f; 1.0f] range. The default value is 0.1f.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainCullingBackFace(float)">
			<summary>
			Sets the threshold used for culling tessellation patches of the Landscape Terrain oriented to the camera with their back faces (it is a multiplier for the angle between the tessellation patch normal and the camera's view direction). Higher values result in a smaller angle between the patch normal and the camera's view direction required for culling this patch.
			</summary> 
			<param name="face"> Backface culling threshold value to be set in the [0.0f; 1.0f] range. The default value is 0.5f. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainCullingBackFace const">
			<summary>
			Returns the current threshold used for culling tessellation patches of the Landscape Terrain oriented to the camera with their back faces (it is a multiplier for the angle between the tessellation patch normal and the camera's view direction). Higher values result in a smaller angle between the patch normal and the camera's view direction required for culling this patch.
			</summary>  
			<returns>Current backface culling threshold value in the [0.0f; 1.0f] range. The default value is 0.5f.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainCullingObliqueFrustum(float)">
			<summary>
			Sets the multiplier for culling of tessellation patches of the Landscape Terrain beyond the oblique frustum plane.
			</summary> 
			<param name="frustum"> Multiplier value to be set, in the [0.0f, 1.0f] range. Higher values result in more patches culled. The default value is 0.9f. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainCullingObliqueFrustum const">
			<summary>
			Returns the current multiplier for culling of tessellation patches of the Landscape Terrain beyond the oblique frustum plane.
			</summary>  
			<returns>Current multiplier value, in the [0.0f, 1.0f] range. Higher values result in more patches culled. The default value is 0.9f.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainTexelSize(float)">
			<summary>
			Sets the texel size of the Landscape Terrain render textures representing the maximum level of detail for the albedo, normal, and height components of the Landscape Terrain.
			</summary> 
			<param name="size"> Landscape Terrain texel size (in meters), in the [0.0001f, 1.0f] range. The default value is 0.001f. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainTexelSize const">
			<summary>
			Returns the texel size of the Landscape Terrain render textures representing the maximum level of detail for the albedo, normal, and height components of the Landscape Terrain.
			</summary>  
			<returns>Landscape Terrain texel size (in meters), in the [0.0001f, 1.0f] range. The default value is 0.001f.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeCacheCPUSize(int)">
			<summary>
			Sets the CPU cache size to be used for landscape terrain rendering. CPU cache size affects intersections, physics, streaming, etc. The size of CPU cache depends on the scene.
			</summary> 
			<param name="size"> New СPU cache size to be set, in percentage of the total СPU memory. The default value is 10%. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeCacheCPUSize const">
			<summary>
			Returns the current СPU cache size used for landscape terrain rendering. CPU cache size affects intersections, physics, streaming, etc. The size of CPU cache depends on the scene.
			</summary>  
			<returns>Current CPU cache size, in percentage of the total GPU memory. The default value is 10%.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeCacheGPUSize(int)">
			<summary>
			Sets the GPU cache size to be used for landscape terrain rendering. GPU cache is used to accumulate tiles, that are visible to the camera, before streaming them to the megatexture.					High-resolution maps require larger cache capacity.
			</summary> 
			<param name="size"> New GPU cache size to be set, in percentage of the total GPU memory. The default value is 4%. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeCacheGPUSize const">
			<summary>
			Returns the current GPU cache size used for landscape terrain rendering. GPU cache is used to accumulate tiles, that are visible to the camera, before streaming them to the megatexture.					High-resolution maps require larger cache capacity.
			</summary>  
			<returns>Current GPU cache size, in percentage of the total GPU memory. The default value is 4%.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeCacheGPULifeTime(int)">
			<summary>
			Sets the lifetime of GPU cache used for landscape terrain rendering.
			</summary> 
			<param name="time"> New GPU cache lifetime to be set, number of frames in the [1; 60] range. The default value is 4. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeCacheGPULifeTime const">
			<summary>
			Returns the current lifetime of GPU cache used for landscape terrain rendering.
			</summary>  
			<returns>Current GPU cache lifetime, number of frames in the [1; 60] range. The default value is 4.</returns>
		</member>
		<member name="M:Unigine.Render.setWireframeAntialiasing(bool)">
			<summary>
			Sets a value indicating if antialiasing is enabled for wireframe rendering.
			</summary> 
			<param name="antialiasing"> true to enable antialiasing for wireframe rendering; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isWireframeAntialiasing const">
			<summary>
			Returns a value indicating if antialiasing is enabled for wireframe rendering.
			</summary>  
			<returns>true if antialiasing is enabled for wireframe rendering; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setFfpAntialiasingLines(bool)">
			<summary>
			Sets a value indicating if antialiasing is enabled for rendering of the Visualizer and other FFP lines.
			</summary> 
			<param name="lines"> true to enable antialiasing for visualizer rendering; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isFfpAntialiasingLines const">
			<summary>
			Returns a value indicating if antialiasing is enabled for rendering of the Visualizer and other FFP lines.
			</summary>  
			<returns>true if antialiasing is enabled for rendering of the Visualizer and other FFP lines; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.isAPISupported(int)">
			<summary>
			Returns a value indicating if the specified graphics API (Null/OpenGL/DirectX) is currently supported.
			</summary> 
			<param name="api"> Graphics API ID. One of the API_* values. </param> 
			<returns>true if the specified graphics API is currently supported; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsRounded(bool)">
			<summary>
			Sets a value indicating if cloud layers are to be curved to make them look more natural imitating planet's curvature.
			</summary> 
			<param name="rounded"> true to enable curving for clouds; false - to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isCloudsRounded const">
			<summary>
			Returns a value indicating if cloud layers are to be curved to make them look more natural imitating planet's curvature.
			</summary>  
			<returns>true if visual curving for clouds is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Render.setCloudsRoundedPlanetRadius(float)">
			<summary>
			Sets the radius of the planet to be used for clouds curving. Visual curving can be used to make clouds look more natural imitating planet's curvature.
			</summary> 
			<param name="radius"> Planet radius to be used for clouds curving, in units. </param> 
		</member>
		<member name="M:Unigine.Render.getCloudsRoundedPlanetRadius const">
			<summary>
			Sets the radius of the planet to be used for clouds curving. Visual curving can be used to make clouds look more natural imitating planet's curvature.
			</summary>  
			<returns>Planet radius used for clouds curving, in units.</returns>
		</member>
		<member name="M:Unigine.Render.setPanoramaFisheyeFov(float)">
			<summary>
			Sets the Field of View in the Fisheye Panorama Custom mode.
			</summary> 
			<param name="fov"> Field of View, in degrees. </param> 
		</member>
		<member name="M:Unigine.Render.getPanoramaFisheyeFov const">
			<summary>
			Sets the Field of View in the Fisheye Panorama Custom mode.
			</summary>  
			<returns>Field of View, in degrees.</returns>
		</member>
		<member name="M:Unigine.Render.setSRAA(bool)">
			<summary>
			Toggles the SRAA on and off.
			</summary> 
			<param name="sraa"> 1 to enable SRAA, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSRAA const">
			<summary>
			Returns a value indicating if SRAA is enabled.
			</summary>  
		</member>
		<member name="M:Unigine.Render.setSRAASamples(int)">
			<summary>
			Sets the number of depth samples per pixel.
			</summary> 
			<param name="samples"> The number of depth geometry samples per pixel. This value may significantly affect performance, so keep it low when the image quality differences are not apparent.0 - 2 depth samples per pixel1 - 4 depth samples per pixel2 - 8 depth samples per pixel </param> 
		</member>
		<member name="M:Unigine.Render.getSRAASamples const">
			<summary>
			Returns the number of depth samples per pixel.
			</summary>  
		</member>
		<member name="M:Unigine.Render.setSRAATemporal(bool)">
			<summary>
			Toogles the usage of the shading sample from the previously rendered frame. Uses camera jittering, so it works only when the TAA is enabled.
			</summary> 
			<param name="temporal"> true to enable TAA, false to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSRAATemporal const">
			<summary>
			Returns the value indicating if the TAA integration is enabled.
			</summary>  
		</member>
		<member name="M:Unigine.Render.setSRAADebug(bool)">
			<summary>
			Enables or disables the debug rendering of the smoothed geometry edges.
			</summary> 
			<param name="debug"> 1 to enable debug mode, 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isSRAADebug const">
			<summary>
			Returns the value indicating if the SRAA debug mode is enabled.
			</summary>  
		</member>
		<member name="M:Unigine.Render.setSRAADepthThreshold(float)">
			<summary>
			Sets the depth threshold value used for edges detection.
			</summary> 
			<param name="threshold"> The depth threshold. Minimum value is 0.0f.  </param> 
		</member>
		<member name="M:Unigine.Render.getSRAADepthThreshold const">
			<summary>
			Returns the depth threshold value used for edges detection.
			</summary>  
		</member>
		<member name="M:Unigine.Render.setSSGIIntensityBoost(int)">
			<summary>
			Sets the boost intensity value.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="boost"> The value to which the intensity is raised. The set of accepted values: 1, 2, 3 and 4. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIIntensityBoost const">
			<summary>
			Returns the intensity boost value.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
		</member>
		<member name="M:Unigine.Render.setTessellationDensityMultiplier(float)">
			<summary>
			Sets the current global Density multiplier for the Tessellated Displacement effect.
			</summary> 
			<param name="multiplier"> Tessellation Density multiplier in the [0.0f, 10.0f] range. </param> 
		</member>
		<member name="M:Unigine.Render.getTessellationDensityMultiplier const">
			<summary>
			Returns the current global Density multiplier for the Tessellated Displacement effect.
			</summary>  
			<returns>Tessellation Density multiplier.</returns>
		</member>
		<member name="M:Unigine.Render.setTessellationShadowDensityMultiplier(float)">
			<summary>
			Sets the current global Shadow Density multiplier for the Tessellated Displacement effect.
			</summary> 
			<param name="multiplier"> Tessellation Shadow Density multiplier in the [0.0f, 10.0f] range. </param> 
		</member>
		<member name="M:Unigine.Render.getTessellationShadowDensityMultiplier const">
			<summary>
			Returns the current global Shadow Density multiplier for the Tessellated Displacement effect.
			</summary>  
			<returns>Tessellation Shadow Density multiplier.</returns>
		</member>
		<member name="M:Unigine.Render.setTessellationDistanceMultiplier(float)">
			<summary>
			Sets the current global multiplier for all distance parameters of the Tessellated Displacement effect.
			</summary> 
			<param name="multiplier"> Tessellation distance multiplier in the [0.0f, 10.0f] range. </param> 
		</member>
		<member name="M:Unigine.Render.getTessellationDistanceMultiplier const">
			<summary>
			Returns the current global multiplier for all distance parameters of the Tessellated Displacement effect.
			</summary>  
			<returns>Tessellation distance multiplier.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRNormalBias(float)">
			<summary>
			Sets the bias value for shifting of the ray starting position along the normal vector.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="bias"> Normal bias value within the [0; 1] range. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRNormalBias const">
			<summary>
			Returns the bias value to which the ray starting position has been shifted along the normal vector.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Normal bias value within the [0; 1] range.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRViewBias(float)">
			<summary>
			Sets the bias value for shifting of the ray starting position along the view vector.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="bias"> View bias value within the [0; 1] range. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRViewBias const">
			<summary>
			Returns the bias value to which the ray starting position has been shifted along the view vector.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>View bias value within the [0; 1] range.</returns>
		</member>
		<member name="M:Unigine.Render.setLightmapColor(Unigine.Math.vec4)">
			<summary>
			Returns the color multiplier for lightmaps. By default, the color is white.
			</summary> 
			<param name="color"> Color multiplier. </param> 
		</member>
		<member name="M:Unigine.Render.getLightmapColor const">
			<summary>
			Returns the color multiplier for lightmaps.
			</summary>  
			<returns>Color multiplier.</returns>
		</member>
		<member name="M:Unigine.Render.setAAPreset(int)">
			<summary>
			Sets the AA (Anti-Aliasing) preset as currently used.
			</summary> 
			<param name="preset"> AA preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getAAPreset const">
			<summary>
			Returns the index of a currently set AA (Anti-Aliasing) preset.
			</summary>  
			<returns>AA preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getAAPresetNumNames const">
			<summary>
			Returns the number of AA (Anti-Aliasing) presets.
			</summary>  
		</member>
		<member name="M:Unigine.Render.getAAPresetName(int)">
			<summary>
			Returns the AA (Anti-Aliasing) preset name by given index.
			</summary> 
			<param name="num"> AA preset index. </param> 
			<returns>AA preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setTAAPreset(int)">
			<summary>
			Sets the TAA (Temporal Anti-Aliasing) preset as currently used.
			</summary> 
			<param name="preset"> TAA preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getTAAPreset const">
			<summary>
			Returns the index of a currently set TAA (Temporal Anti-Aliasing) preset.
			</summary>  
			<returns>TAA preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getTAAPresetNumNames const">
			<summary>
			Returns the number of TAA (Temporal Anti-Aliasing) presets.
			</summary>  
			<returns>Quantity of TAA  presets.</returns>
		</member>
		<member name="M:Unigine.Render.getTAAPresetName(int)">
			<summary>
			Returns the TAA (Temporal Anti-Aliasing) preset name by given index.
			</summary> 
			<param name="num"> TAA preset index. </param> 
			<returns>TAA preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setRefractionWarpBackgroundTransparentSurfaces(int)">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Render.getRefractionWarpBackgroundTransparentSurfaces const">
			<summary>
			</summary>  
		</member>
		<member name="M:Unigine.Render.setGIPreset(int)">
			<summary>
			Sets the GI (Global Illumination) preset as currently used.
			</summary> 
			<param name="preset"> GI preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getGIPreset const">
			<summary>
			Returns the index of a currently set GI (Global Illumination) preset.
			</summary>  
			<returns>GI preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getGIPresetNumNames const">
			<summary>
			Returns the number of GI (Global Illumination) presets.
			</summary>  
			<returns>Quantity of GI presets.</returns>
		</member>
		<member name="M:Unigine.Render.getGIPresetName(int)">
			<summary>
			Returns the GI (Global Illumination) preset name by given index.
			</summary> 
			<param name="num"> GI preset index. </param> 
			<returns>GI preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRTGIPreset(int)">
			<summary>
			Sets the SSRTGI (Screen-Space Ray-Traced Global Illumination) preset as currently used.
			</summary> 
			<param name="preset"> SSRTGI preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRTGIPreset const">
			<summary>
			Returns the index of a currently set SSRTGI (Screen-Space Ray-Traced Global Illumination) preset.
			</summary>  
			<returns>SSRTGI preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getSSRTGIPresetNumNames const">
			<summary>
			Returns the number of SSRTGI (Screen-Space Ray-Traced Global Illumination) presets.
			</summary>  
			<returns>Quantity of SSRTGI presets.</returns>
		</member>
		<member name="M:Unigine.Render.getSSRTGIPresetName(int)">
			<summary>
			Returns the SSRTGI (Screen-Space Ray-Traced Global Illumination) preset name by given index.
			</summary> 
			<param name="num"> SSRTGI preset index. </param> 
			<returns>SSRTGI preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOPreset(int)">
			<summary>
			Sets the SSAO (Screen Space Ambient Occlusion) preset as currently used.
			</summary> 
			<param name="preset"> SSAO preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAOPreset const">
			<summary>
			Returns the index of a currently set SSAO (Screen Space Ambient Occlusion) preset.
			</summary>  
			<returns>SSAO preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getSSAOPresetNumNames const">
			<summary>
			Returns the number of SSAO (Screen Space Ambient Occlusion) presets.
			</summary>  
			<returns>Quantity of SSAO presets.</returns>
		</member>
		<member name="M:Unigine.Render.getSSAOPresetName(int)">
			<summary>
			Returns the SSAO (Screen Space Ambient Occlusion) preset name by given index.
			</summary> 
			<param name="num"> SSAO preset index. </param> 
			<returns>SSAO preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAODenoiseIntensity(float)">
			<summary>
			Sets the noise reduction intensity for the SSAO (Screen Space Ambient Occlusion) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> Noise reduction intensity value in range [0.0f; 1.0f] to be set. Higher values provide a less noisy, but more blurred result. The default value is 0.2f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAODenoiseIntensity const">
			<summary>
			Returns the current noise reduction intensity for the SSAO (Screen Space Ambient Occlusion) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Noise reduction intensity value in range [0.0f; 1.0f] to be set. Higher values provide a less noisy, but more blurred result. The default value is 0.2f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAODenoiseGaussianSigma(float)">
			<summary>
			Sets the sigma parameter of Gaussian blur used for noise reduction for the SSAO (Screen Space Ambient Occlusion) effect. This parameter controls the amount of blur applied.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="sigma"> Gaussian blur sigma parameter value in range [0.0f; 100.0f] to be set. The default value is 10.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAODenoiseGaussianSigma const">
			<summary>
			Returns the current value of the sigma parameter of Gaussian blur used for noise reduction for the SSAO (Screen Space Ambient Occlusion) effect. This parameter controls the amount of blur applied.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Gaussian blur sigma parameter value in range [0.0f; 100.0f] to be set. The default value is 10.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAODenoiseThreshold(float)">
			<summary>
			Sets the threshold value for color difference of neighboring pixels used for noise reduction for the SSAO (Screen Space Ambient Occlusion) effect: blur is applied when the color difference is less than the threshold value.					Setting too high values result in blurring the whole image.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> Threshold value for color difference of neighboring pixels in range [0.0f; 1.0f] to be set. The default value is 0.1f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAODenoiseThreshold const">
			<summary>
			Returns the current threshold value for color difference of neighboring pixels used for noise reduction for the SSAO (Screen Space Ambient Occlusion) effect: blur is applied when the color difference is less than the threshold value.					Setting too high values result in blurring the whole image.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Threshold value for color difference of neighboring pixels in range [0.0f; 1.0f] to be set. The default value is 0.1f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAODenoiseRadius(int)">
			<summary>
			Sets the radius of the area to be affected by noise reduction for the SSAO (Screen Space Ambient Occlusion) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="radius"> Radius to be affected by noise reduction, an integer value in range [1; 3] to be set. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAODenoiseRadius const">
			<summary>
			Returns the current radius of the area to be affected by noise reduction for the SSAO (Screen Space Ambient Occlusion) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Radius to be affected by noise reduction, an integer value in range [1; 3] to be set. The default value is 1.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOColorClampingIntensity(float)">
			<summary>
			Sets the intensity of TAA color clamping at zero pixel velocity for the SSAO (Screen Space Ambient Occlusion) effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> Intensity of TAA color clamping at zero pixel velocity in range [0.0f; 1.0f]. Lower values result in more accumulated frames combined, which reduces noise flickering, but increases ghosting effect (to reduce ghosting in this case you can use SSAO Color Clamping Velocity Threshold), while higher values reduce ghosting effect, but increase flickering. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAOColorClampingIntensity const">
			<summary>
			Returns the current intensity of TAA color clamping at zero pixel velocity for the SSAO (Screen Space Ambient Occlusion) effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Intensity of TAA color clamping at zero pixel velocity in range [0.0f; 1.0f]. Lower values result in more accumulated frames combined, which reduces noise flickering, but increases ghosting effect (to reduce ghosting in this case you can use SSAO Color Clamping Velocity Threshold), while higher values reduce ghosting effect, but increase flickering. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setSSAOColorClampingVelocityThreshold(float)">
			<summary>
			Sets the sensitivity of TAA color clamping for the SSAO (Screen Space Ambient Occlusion) effect to pixel velocity change. This parameter is used to reduce ghosting effect for lower Color Clamping Intensity values: it automatically increases clamping intensity for higher velocities, and disables clamping for low velocity values.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> Threshold for the intensity of TAA color clamping at zero pixel velocity. </param> 
		</member>
		<member name="M:Unigine.Render.getSSAOColorClampingVelocityThreshold const">
			<summary>
			Returns the current sensitivity of TAA color clamping for the SSAO (Screen Space Ambient Occlusion) effect to pixel velocity change. This parameter is used to reduce ghosting effect for lower Color Clamping Intensity values: it automatically increases clamping intensity for higher velocities, and disables clamping for low velocity values.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Threshold for the intensity of TAA color clamping at zero pixel velocity.</returns>
		</member>
		<member name="M:Unigine.Render.setSSGIPreset(int)">
			<summary>
			Sets the SSGI (Screen-Space Global Illumination) preset as currently used.
			</summary> 
			<param name="preset"> SSGI preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getSSGIPreset const">
			<summary>
			Returns the index of a currently set SSGI (Screen-Space Global Illumination) preset.
			</summary>  
			<returns>SSGI preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getSSGIPresetNumNames const">
			<summary>
			Returns the number of SSGI (Screen-Space Global Illumination) presets.
			</summary>  
			<returns>Quantity of SSGI presets.</returns>
		</member>
		<member name="M:Unigine.Render.getSSGIPresetName(int)">
			<summary>
			Returns the SSGI (Screen-Space Global Illumination) preset name by given index.
			</summary> 
			<param name="num"> SSGI preset index. </param> 
			<returns>SSGI preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalPreset(int)">
			<summary>
			Sets the Bent Normal preset as currently used.
			</summary> 
			<param name="preset"> Bent Normal preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getBentNormalPreset const">
			<summary>
			Returns the index of a currently set Bent Normal preset.
			</summary>  
			<returns>Bent Normal preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getBentNormalPresetNumNames const">
			<summary>
			Returns the number of Bent Normal presets.
			</summary>  
			<returns>Quantity of Bent Normal presets.</returns>
		</member>
		<member name="M:Unigine.Render.getBentNormalPresetName(int)">
			<summary>
			Returns the Bent Normal preset name by given index.
			</summary> 
			<param name="num"> Bent Normal preset index. </param> 
			<returns>Bent Normal preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalDenoiseIntensity(float)">
			<summary>
			Sets the noise reduction intensity for the bent normals effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> Noise reduction intensity value in range [0.0f; 1.0f] to be set. Higher values provide a less noisy, but more blurred result. The default value is 0.2f. </param> 
		</member>
		<member name="M:Unigine.Render.getBentNormalDenoiseIntensity const">
			<summary>
			Returns the current noise reduction intensity for the bent normals effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Noise reduction intensity value in range [0.0f; 1.0f] to be set. Higher values provide a less noisy, but more blurred result. The default value is 0.2f.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalDenoiseGaussianSigma(float)">
			<summary>
			Sets the sigma parameter of Gaussian blur used for noise reduction for the bent normals effect. This parameter controls the amount of blur applied.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="sigma"> Gaussian blur sigma parameter value in range [0.0f; 100.0f] to be set. The default value is 10.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getBentNormalDenoiseGaussianSigma const">
			<summary>
			Returns the current value of the sigma parameter of Gaussian blur used for noise reduction for the bent normals effect. This parameter controls the amount of blur applied.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Gaussian blur sigma parameter value in range [0.0f; 100.0f] to be set. The default value is 10.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalDenoiseThreshold(float)">
			<summary>
			Sets the threshold value for color difference of neighboring pixels used for noise reduction for the bent normals effect: blur is applied when the color difference is less than the threshold value.					Setting too high values result in blurring the whole image.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> Threshold value for color difference of neighboring pixels in range [0.0f; 1.0f]. The default value is 0.1f. </param> 
		</member>
		<member name="M:Unigine.Render.getBentNormalDenoiseThreshold const">
			<summary>
			Returns the current threshold value for color difference of neighboring pixels used for noise reduction for the bent normals effect: blur is applied when the color difference is less than the threshold value.					Too high values result in blurring the whole image.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Threshold value for color difference of neighboring pixels in range [0.0f; 1.0f]. The default value is 0.1f.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalDenoiseRadius(int)">
			<summary>
			Sets the radius of the area to be affected by noise reduction for the bent normal effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="radius"> Radius to be affected by noise reduction, an integer value in range [1; 3] to be set. The default value is 1. </param> 
		</member>
		<member name="M:Unigine.Render.getBentNormalDenoiseRadius const">
			<summary>
			Returns the current radius of the area to be affected by noise reduction for the bent normal effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Radius to be affected by noise reduction, an integer value in range [1; 3]. The default value is 1.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalColorClampingIntensity(float)">
			<summary>
			Sets the intensity of TAA color clamping at zero pixel velocity for the bent normals effect.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="intensity"> Intensity of TAA color clamping at zero pixel velocity in range [0.0f; 1.0f]. Lower values result in more accumulated frames combined, which reduces noise flickering, but increases ghosting effect (to reduce ghosting in this case you can use Bent Normal Color Clamping Velocity Threshold), while higher values reduce ghosting effect, but increase flickering. The default value is 1.0f. </param> 
		</member>
		<member name="M:Unigine.Render.getBentNormalColorClampingIntensity const">
			<summary>
			Returns the current intensity of TAA color clamping at zero pixel velocity for the bent normals effect.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Intensity of TAA color clamping at zero pixel velocity in range [0.0f; 1.0f]. Lower values result in more accumulated frames combined, which reduces noise flickering, but increases ghosting effect (to reduce ghosting in this case you can use Bent Normal Color Clamping Velocity Threshold), while higher values reduce ghosting effect, but increase flickering. The default value is 1.0f.</returns>
		</member>
		<member name="M:Unigine.Render.setBentNormalColorClampingVelocityThreshold(float)">
			<summary>
			Sets the sensitivity of TAA color clamping for the bent normals effect to pixel velocity change. This parameter is used to reduce ghosting effect for lower Color Clamping Intensity values: it automatically increases clamping intensity for higher velocities, and disables clamping for low velocity values.Setting the value via this method changes only the setting stored in the Custom preset, and will take an effect only when this preset is active.
			</summary> 
			<param name="threshold"> Threshold for the ray-traced bent normals calculation. </param> 
		</member>
		<member name="M:Unigine.Render.getBentNormalColorClampingVelocityThreshold const">
			<summary>
			Returns the current sensitivity of TAA color clamping for the bent normals effect to pixel velocity change. This parameter is used to reduce ghosting effect for lower Color Clamping Intensity values: it automatically increases clamping intensity for higher velocities, and disables clamping for low velocity values.When checking the parameter value via API you'll get the corresponding setting stored in the active preset (default or custom one).
			</summary>  
			<returns>Threshold for the ray-traced bent normals calculation.</returns>
		</member>
		<member name="M:Unigine.Render.setSSRPreset(int)">
			<summary>
			Sets the SSR preset as currently used.
			</summary> 
			<param name="preset"> SSR preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getSSRPreset const">
			<summary>
			Returns the index of a currently set SSR preset.
			</summary>  
			<returns>SSR preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getSSRPresetNumNames const">
			<summary>
			Returns the number of SSR presets.
			</summary>  
			<returns>Quantity of SSR presets.</returns>
		</member>
		<member name="M:Unigine.Render.getSSRPresetName(int)">
			<summary>
			Returns the SSR preset name by given index.
			</summary> 
			<param name="num"> SSR preset index. </param> 
			<returns>SSR preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setSSSSSPreset(int)">
			<summary>
			Sets the SSSSS preset as currently used.
			</summary> 
			<param name="preset"> SSSSS preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getSSSSSPreset const">
			<summary>
			Returns index of a currently set SSSSS preset.
			</summary>  
			<returns>SSSSS preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getSSSSSPresetNumNames const">
			<summary>
			Returns the quantity of SSSSS presets.
			</summary>  
			<returns>Quantity of SSSSS presets.</returns>
		</member>
		<member name="M:Unigine.Render.getSSSSSPresetName(int)">
			<summary>
			Returns the SSSSS preset name by given index.
			</summary> 
			<param name="num"> SSSSS preset index. </param> 
			<returns>SSSSS preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setMotionBlurPreset(int)">
			<summary>
			Sets the Motion Blur preset as currently used.
			</summary> 
			<param name="preset"> Motion Blur preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getMotionBlurPreset const">
			<summary>
			Returns the index of a currently set Motion Blur preset.
			</summary>  
			<returns>Motion Blur preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getMotionBlurPresetNumNames const">
			<summary>
			Returns the quantity of Motion Blur presets.
			</summary>  
			<returns>Quantity of Motion Blur presets.</returns>
		</member>
		<member name="M:Unigine.Render.getMotionBlurPresetName(int)">
			<summary>
			Returns the Motion Blur preset name by given index.
			</summary>  
			<returns>Motion Blur preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setDOFPreset(int)">
			<summary>
			Sets the DOF preset as currently used.
			</summary> 
			<param name="preset"> Motion Blur preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getDOFPreset const">
			<summary>
			Returns the index of a currently set DOF preset.
			</summary>  
			<returns>Motion Blur preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getDOFPresetNumNames const">
			<summary>
			Returns the quantity of DOF presets.
			</summary>  
			<returns>Quantity of DOF presets.</returns>
		</member>
		<member name="M:Unigine.Render.getDOFPresetName(int)">
			<summary>
			Returns the DOF preset name by given index.
			</summary>  
			<returns>DOF preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainGeometryPreset(int)">
			<summary>
			Sets the Landscape Terrain Geometry preset as currently used.
			</summary> 
			<param name="preset"> Landscape Terrain Geometry preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainGeometryPreset const">
			<summary>
			Returns the index of a currently set Landscape Terrain Geometry preset.
			</summary>  
			<returns>Landscape Terrain Geometry preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainGeometryPresetNumNames const">
			<summary>
			Returns the quantity of Landscape Terrain Geometry presets.
			</summary>  
			<returns>Quantity of Landscape Terrain Geometry presets.</returns>
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainGeometryPresetName(int)">
			<summary>
			Returns the Landscape Terrain Geometry preset name by given index.
			</summary> 
			<param name="num"> Landscape Terrain Geometry preset index. </param> 
			<returns>Landscape Terrain Geometry preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeTerrainStreamingPreset(int)">
			<summary>
			Sets the Landscape Terrain Streaming preset as currently used.
			</summary> 
			<param name="preset"> Landscape Terrain Streaming preset index. </param> 
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainStreamingPreset const">
			<summary>
			Returns the index of a currently set Landscape Terrain Streaming preset.
			</summary>  
			<returns>Landscape Terrain Streaming preset index.</returns>
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainStreamingPresetNumNames const">
			<summary>
			Returns the quantity of Landscape Terrain Streaming presets.
			</summary>  
			<returns>Quantity of Landscape Terrain Streaming presets.</returns>
		</member>
		<member name="M:Unigine.Render.getLandscapeTerrainStreamingPresetName(int)">
			<summary>
			Returns the Landscape Terrain Streaming preset name by given index.
			</summary> 
			<param name="num"> Landscape Terrain Streaming preset index. </param> 
			<returns>Landscape Terrain Streaming preset name.</returns>
		</member>
		<member name="M:Unigine.Render.setLandscapeOperationsPerFrame(int)">
			<summary>
			Sets the number of Landscape texture draw operations (asyncTextureDraw) that can be performed per frame.
			</summary>  
		</member>
		<member name="M:Unigine.Render.getLandscapeOperationsPerFrame const">
			<summary>
			Returns the number of Landscape texture draw operations (asyncTextureDraw) that currently can be performed per frame.
			</summary>  
		</member>
		<member name="M:Unigine.Render.setShowLightmapChecker(bool)">
			<summary>
			Enables the Baked Lightmap Checker debug mode. This mode maps the checker texture onto the baked lightmap polygons, which can be used to facilitate the process of comparing UV map texels on neighboring planes.
			</summary> 
			<param name="checker"> true, to enable the lightmap checker, false to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isShowLightmapChecker const">
			<summary>
			Checks if the Baked Lightmap Checker debug mode is enabled. This mode maps the checker texture onto the baked lightmap polygons, which can be used to facilitate the process of comparing UV map texels on neighboring planes.
			</summary>  
			<returns>true, if the lightmap checker is enabled, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Render.setShowVoxelProbeVisualizer(bool)">
			<summary>
			Sets a value indicating if the Voxel Probe visualizer is enabled. The visualizer shows only the selected probe with the grid size from 7 to 40.
			</summary> 
			<param name="visualizer"> true, to enable the visualizer for Voxel Probes, false to disable it. </param> 
		</member>
		<member name="M:Unigine.Render.isShowVoxelProbeVisualizer const">
			<summary>
			Returns a value indicating if the Voxel Probe visualizer is enabled.
			</summary>  
			<returns>true, if the visualizer for Voxel Probes is enabled, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Render.setShowVoxelProbeVisualizerGridSize(int)">
			<summary>
			Sets the size of the grid that is used to visualize Voxel Probes.					For the probe to be visualized properly, the grid size should be from 7 to 40.
			</summary> 
			<param name="size"> Number of spheres along the axis, the value from 7 to 40. </param> 
		</member>
		<member name="M:Unigine.Render.getShowVoxelProbeVisualizerGridSize const">
			<summary>
			Return the current size of the grid that is used to visualize Voxel Probes.
			</summary>  
			<returns>Number of spheres along the axis, the value from 7 to 40.</returns>
		</member>
		<member name="M:Unigine.Render.setShowVoxelProbeVisualizerSphereScale(float)">
			<summary>
			Sets the scale factor of the sphere that is used to visualize Voxel Probes. The sphere size depends on the scale factor and the voxel size.
			</summary> 
			<param name="scale"> Scale factor of the visualization sphere. </param> 
		</member>
		<member name="M:Unigine.Render.getShowVoxelProbeVisualizerSphereScale const">
			<summary>
			Returns the current scale factor of the sphere that is used to visualize the voxel probe. The sphere size depends on the scale factor and the voxel size.
			</summary>  
			<returns>Scale factor of the visualization sphere.</returns>
		</member>
		<member name="F:Unigine.Render.API_UNKNOWN">
			<summary>
			Unknown API.
		</summary>
		</member>
		<member name="F:Unigine.Render.API_NULL">
			<summary>
			Null API name.
		</summary>
		</member>
		<member name="F:Unigine.Render.API_OPENGL">
			<summary>
			OpenGL API.
		</summary>
		</member>
		<member name="F:Unigine.Render.API_DIRECT3D11">
			<summary>
			DIRECT3D 11 API.
		</summary>
		</member>
		<member name="F:Unigine.Render.ENVIRONMENT_NUM_PRESETS">
			<summary>
			Number of environment presets.
		</summary>
		</member>
		<member name="F:Unigine.Render.EXPOSURE_DISABLED">
			<summary>
			Rendering of the adaptive exposure effect is disabled.
		</summary>
		</member>
		<member name="F:Unigine.Render.EXPOSURE_LOGARITHMIC">
			<summary>
			The logarithmic exposure effect is used.
		</summary>
		</member>
		<member name="F:Unigine.Render.EXPOSURE_QUADRATIC">
			<summary>
			The adaptive exposure effect is rendered using quadratic function.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_AMD">
			<summary>
			AMD GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_APPLE">
			<summary>
			Apple GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_ARM">
			<summary>
			ARM GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_IMGTEC">
			<summary>
			Imagination Technologies GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_INTEL">
			<summary>
			Intel GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_NVIDIA">
			<summary>
			NVIDIA GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_QUALCOMM">
			<summary>
			Qualcomm GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.GPU_UNKNOWN">
			<summary>
			Unknown GPU.
		</summary>
		</member>
		<member name="F:Unigine.Render.HAZE_DISABLED">
			<summary>
			Rendering of the haze effect is disabled.
		</summary>
		</member>
		<member name="F:Unigine.Render.HAZE_SCATTERING">
			<summary>
			Haze colored according to the sky LUT textures. This mode is recommended to achieve higher realism.
		</summary>
		</member>
		<member name="F:Unigine.Render.HAZE_SOLID">
			<summary>
			Solid color haze. The haze color is set by setHazeColor().
		</summary>
		</member>
		<member name="F:Unigine.Render.NUM_PASSES">
			<summary>
			Total number of rendering passes.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_ALPHA_TEST">
			<summary>
			Alpha test pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_AMBIENT">
			<summary>
			Ambient pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_AUXILIARY">
			<summary>
			Auxiliary pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_DEFERRED">
			<summary>
			Deferred pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_DEPTH_PRE_PASS">
			<summary>
			Depth pre-pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_EMISSION">
			<summary>
			Emission pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHT_ENVIRONMENT_PROBE">
			<summary>
			Light environment probe pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHT_OMNI">
			<summary>
			Omni light pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHT_PROJ">
			<summary>
			Proj light pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHT_VOXEL_PROBE">
			<summary>
			Light voxel probe pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_LIGHT_WORLD">
			<summary>
			World light pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_PROCEDURAL_FIELDS">
			<summary>
			Pass for rendering of particles into procedural textures to be used by height fields.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_PROCEDURAL_DECALS">
			<summary>
			Pass for rendering of particles into procedural textures to be used by orthographic decals.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_POST">
			<summary>
			Post materials pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_REFLECTION">
			<summary>
			Reflection pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_REFRACTION">
			<summary>
			Refraction pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_SHADOW">
			<summary>
			Shadow pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_TRANSPARENT_BLUR">
			<summary>
			Transparent blur pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_VISUALIZER_SOLID">
			<summary>
			Visualizer pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_WIREFRAME">
			<summary>
			Wireframe pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_BEGIN">
			<summary>
			Beginning of the range of custom rendering passes. Up to 32 custom rendering passes are available.
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_0">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_1">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_2">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_3">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_4">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_5">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_6">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_7">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_8">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_9">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_10">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_11">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_12">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_13">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_14">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_15">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_16">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_17">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_18">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_19">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_20">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_21">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_22">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_23">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_24">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_25">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_26">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_27">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_28">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_29">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_30">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_31">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_32">
			<summary>
			Custom pass (unassigned).
		</summary>
		</member>
		<member name="F:Unigine.Render.PASS_CUSTOM_END">
			<summary>
			End of the range of custom rendering passes. Up to 32 custom rendering passes are available.
		</summary>
		</member>
		<member name="F:Unigine.Render.QUALITY_HIGH">
			<summary>
			High quality of textures.
		</summary>
		</member>
		<member name="F:Unigine.Render.QUALITY_LOW">
			<summary>
			Low quality of textures. 1/16 of the original texture will be used.
		</summary>
		</member>
		<member name="F:Unigine.Render.QUALITY_MEDIUM">
			<summary>
			Medium quality of textures. 1/4 of the original texture will be used.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN">
			<summary>
			Beginning of the callback range.
		</summary>
		</member>
		<member name="F:Unigine.Render.NUM_CALLBACKS">
			<summary>
			Callback counter.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END">
			<summary>
			End of the callback range.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_VISUALIZER">
			<summary>
			Callback after the visualizer rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_VISUALIZER">
			<summary>
			Callback before the visualizer rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_DEBUG_MATERIALS">
			<summary>
			Callback after the debug materials stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_DEBUG_MATERIALS">
			<summary>
			Callback before the debug materials stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_POST_MATERIALS">
			<summary>
			Callback after the post materials rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_POST_MATERIALS">
			<summary>
			Callback before the post materials rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_CAMERA_EFFECTS">
			<summary>
			Callback after the camera effects stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_CAMERA_EFFECTS">
			<summary>
			Callback before the camera effects stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_TAA">
			<summary>
			Callback after the Temporal Anti-Aliasing (TAA) pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_TAA">
			<summary>
			Callback before the Temporal Anti-Aliasing (TAA) pass.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SRGB_CORRECTION">
			<summary>
			Callback after the sRGB correction stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SRGB_CORRECTION">
			<summary>
			Callback before the sRGB correction stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_TRANSPARENT">
			<summary>
			Callback before the transparent objects rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_TRANSPARENT">
			<summary>
			Callback after the transparent objects rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WATER">
			<summary>
			Callback before the water rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WATER">
			<summary>
			Callback after the water rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WATER_ENVIRONMENT_PROBES">
			<summary>
			Callback after the water environment probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WATER_ENVIRONMENT_PROBES">
			<summary>
			Callback before the water environment probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WATER_VOXEL_PROBES">
			<summary>
			Callback before the water voxel probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WATER_VOXEL_PROBES">
			<summary>
			Callback after the water voxel probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WATER_LIGHTS">
			<summary>
			Callback before the water lights rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WATER_LIGHTS">
			<summary>
			Callback after the water lights rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WATER_DECALS">
			<summary>
			Callback before the water decals rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WATER_DECALS">
			<summary>
			Callback after the water decals rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_CLOUDS">
			<summary>
			Callback before the clouds rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_CLOUDS">
			<summary>
			Callback after the clouds rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_COMPOSITE_DEFERRED">
			<summary>
			Callback before the clouds deferred composite stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_COMPOSITE_DEFERRED">
			<summary>
			Callback after the clouds deferred composite stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SSGI">
			<summary>
			Callback before the SSGI rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SSGI">
			<summary>
			Callback after the SSGI rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SSAO">
			<summary>
			Callback before the SSAO rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SSAO">
			<summary>
			Callback after the SSAO rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SSR">
			<summary>
			Callback before the SSR rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SSR">
			<summary>
			Callback after the SSR rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_TRANSPARENT_BLUR_BUFFER">
			<summary>
			Callback before filling the transparent blur buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_TRANSPARENT_BLUR_BUFFER">
			<summary>
			Callback after filling the transparent blur buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_REFRACTION_BUFFER">
			<summary>
			Callback before filling the refraction buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_REFRACTION_BUFFER">
			<summary>
			Callback after filling the refraction buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_AUXILIARY_BUFFER">
			<summary>
			Callback before filling the auxiliary buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_AUXILIARY_BUFFER">
			<summary>
			Callback after filling the auxiliary buffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OPACITY_ENVIRONMENT_PROBES">
			<summary>
			Callback before the opacity environment probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OPACITY_ENVIRONMENT_PROBES">
			<summary>
			Callback after the opacity environment probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OPACITY_VOXEL_PROBES">
			<summary>
			Callback before the opacity voxel probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OPACITY_VOXEL_PROBES">
			<summary>
			Callback after the opacity voxel probes rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OPACITY_LIGHTS">
			<summary>
			Callback before the opacity lightgs rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OPACITY_LIGHTS">
			<summary>
			Callback after the opacity lightgs rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SSRTGI">
			<summary>
			Callback before the SSRTGI rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SSRTGI">
			<summary>
			Callback after the SSRTGI rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OPACITY_DECALS">
			<summary>
			Callback before the opacity decals rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OPACITY_DECALS">
			<summary>
			Callback after the opacity decals rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OPACITY_GBUFFER">
			<summary>
			Callback before filling the Gbuffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OPACITY_GBUFFER">
			<summary>
			Callback after filling the Gbuffer.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_ADAPTATION_COLOR">
			<summary>
			Callback before the color adaptation rendering stage (automatic exposure and white balance correction).
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_ADAPTATION_COLOR">
			<summary>
			Callback after the color adaptation rendering stage (automatic exposure and white balance correction).
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_ADAPTATION_COLOR_AVERAGE">
			<summary>
			Callback before the calculation of automatic exposure and white balance correction.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_ADAPTATION_COLOR_AVERAGE">
			<summary>
			Callback after the calculation of automatic exposure and white balance correction.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_CURVATURE_COMPOSITE">
			<summary>
			Callback before the curvature rendering stage for the SSDirt effect.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_CURVATURE_COMPOSITE">
			<summary>
			Callback after the curvature rendering stage for the SSDirt effect.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_CURVATURE">
			<summary>
			Callback before the SSBevel effect rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_CURVATURE">
			<summary>
			Callback after the SSBevel effect rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SCREEN">
			<summary>
			Callback after the stage of rendering each screen (a stereo image has 2 screens, while a cubemap will have 6).
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SCREEN">
			<summary>
			Callback before the stage of rendering each screen (a stereo image has 2 screens, while a cubemap will have 6).
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_SHADOWS">
			<summary>
			Callback after the shadows rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_OMNI_SHADOW">
			<summary>
			Callback after the stage of rendering shadows from Omni light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_OMNI_SHADOW">
			<summary>
			Callback before the stage of rendering shadows from Omni light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_PROJ_SHADOW">
			<summary>
			Callback after the stage of rendering shadows from Projected light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_PROJ_SHADOW">
			<summary>
			Callback before the stage of rendering shadows from Projected light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_END_WORLD_SHADOW">
			<summary>
			Callback after the stage of rendering shadows from World light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_WORLD_SHADOW">
			<summary>
			Callback before the stage of rendering shadows from World light sources.
		</summary>
		</member>
		<member name="F:Unigine.Render.CALLBACK_BEGIN_SHADOWS">
			<summary>
			Callback before the shadows rendering stage.
		</summary>
		</member>
		<member name="F:Unigine.Render.STREAMING_FORCE">
			<summary>
			Forced mode enabling force-loading of all meshes and/or textures required for each frame at once.					Can be used for grabbing frame sequences, rendering node previews, warmup, etc.
		</summary>
		</member>
		<member name="F:Unigine.Render.STREAMING_ASYNC">
			<summary>
			Asynchronous streaming mode for meshes and textures.
		</summary>
		</member>
		<member name="F:Unigine.Render.CORRECT_ROUGHNESS_DISABLED">
			<summary>
			Disabled roughness correction.
		</summary>
		</member>
		<member name="F:Unigine.Render.CORRECT_ROUGHNESS_LOW">
			<summary>
			Roughness correction of minimum quality.
		</summary>
		</member>
		<member name="F:Unigine.Render.CORRECT_ROUGHNESS_MEDIUM">
			<summary>
			Roughness correction of medium quality.
		</summary>
		</member>
		<member name="F:Unigine.Render.CORRECT_ROUGHNESS_HIGH">
			<summary>
			Roughness correction of high quality.
		</summary>
		</member>
		<member name="F:Unigine.Render.CORRECT_ROUGHNESS_ULTRA">
			<summary>
			Roughness correction of ultra-high quality.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_DEFAULT">
			<summary>
			Enables the default stereo mode - no stereo and panoramic rendering in the current viewport is available. This mode is set by default for a new viewport.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_CURVED_180">
			<summary>
			Enables rendering of the viewport as a panorama with curved edges with an angle of 180 degrees.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_CURVED_360">
			<summary>
			Enables rendering of the viewport as a panorama with curved edges with an angle of 360 degrees.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_LINEAR_180">
			<summary>
			Enables rendering of the viewport as a linear panorama without distortion at the edges with an angle of 180 degrees.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_LINEAR_360">
			<summary>
			Enables rendering of the viewport as a linear panorama without distortion at the edges with an angle of 360 degrees.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_FISHEYE_ORTHOGRAPHIC">
			<summary>
			Enables rendering of the viewport as an orthographic spherical panorama (fisheye).
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_FISHEYE_EQUDISTANT">
			<summary>
			Enables rendering of the viewport as an equidistant spherical panorama (fisheye).
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_FISHEYE_STEREOGRAPHIC">
			<summary>
			Enables rendering of the viewport as an stereographic spherical panorama (fisheye).
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_PANORAMA_FISHEYE_EQUISOLID">
			<summary>
			Enables rendering of the viewport as an equisolid spherical panorama (fisheye).
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_ANAGLYPH">
			<summary>
			Enables the anaglyph stereo mode that is viewed with red-cyan anaglyph glasses.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_INTERLACED">
			<summary>
			Enables the interlaced stereo mode that is used with interlaced stereo monitors and polarized 3D glasses.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_HORIZONTAL">
			<summary>
			Enables the horizontal stereo mode that is supported on mobile devices.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_VERTICAL">
			<summary>
			Enables the vertical stereo mode that is supported on mobile devices.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_SEPARATE">
			<summary>
			Enables the replicate images stereo mode.
		</summary>
		</member>
		<member name="F:Unigine.Render.VIEWPORT_MODE_STEREO_REPLICATE">
			<summary>
			Enables the separate images stereo mode. This mode serves to output two separate images for each of the eye. It can be used with any VR/AR output devices that support separate images output, e.g. for 3D video glasses or helmets (HMD).
		</summary>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getNum const">
			<summary>
			Returns the number of the preset.
			</summary>  
			<returns>Preset number. Available values: 0, 1, 2.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setIntensity(float)">
			<summary>
			Sets the intensity of the given preset. The preset intensity is used to blend the given environment preset with the other ones.					Presets overlay each other: the first preset overlays the zero one, the second overlays the first and the zero ones.
			</summary> 
			<param name="intensity"> Intensity of the preset. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getIntensity const">
			<summary>
			Returns the intensity of the preset. The preset intensity is used to blend the environment preset with the other ones.					Presets overlay each other: the first preset overlays the zero one, the second overlays the first and the zero ones.
			</summary>  
			<returns>Intensity of the preset.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setScatteringMieLUTName(char)">
			<summary>
			Sets the path to the Mie LUT texture (the texture for setting the color of the light round the sun) for the preset. The Mie texture is used for both sun and moon.
			</summary> 
			<param name="name"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getScatteringMieLUTName const">
			<summary>
			Returns the path to the Mie LUT texture (the texture for setting the color of the light round the sun) set for the preset. The Mie texture is used for both sun and moon.
			</summary>  
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setScatteringLightColorLUTName(char)">
			<summary>
			Sets the path to the light color texture (the texture defining the color of the LightWorld for different times of the day) for the preset.
			</summary> 
			<param name="name"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getScatteringLightColorLUTName const">
			<summary>
			Returns the path to the light color texture (the texture defining the color of the LightWorld for different times of the day).
			</summary>  
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setScatteringBaseLUTName(char)">
			<summary>
			Sets the path to the base LUT texture (the texture defining the base color of the sky) for the preset.
			</summary> 
			<param name="name"> Path to the texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getScatteringBaseLUTName const">
			<summary>
			Returns the path to the base LUT texture (the texture defining the base color of the sky) set for the preset.
			</summary>  
			<returns>Path to the texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazeMaxDistance(float)">
			<summary>
			Sets the distance starting at which the haze becomes completely solid, so nothing will be seen behind. For large terrains it is recommended to the this parameter equal to your camera's Far parameter. This is required for distant objects to fade into the distance instead of being cut sharply.
			</summary> 
			<param name="distance"> Haze maximum visibility distance. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazeMaxDistance const">
			<summary>
			Returns the distance starting at which the haze becomes completely solid, so nothing will be seen behind.
			</summary>  
			<returns>Haze maximum visibility distance.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazeColor(Unigine.Math.vec4)">
			<summary>
			Sets the color of the haze for the preset. This function will take effect only if the HAZE_SOLID mode is set via setEnvironmentHazeMode().
			</summary> 
			<param name="color"> Haze color. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazeColor const">
			<summary>
			Returns the haze color for the preset.					This function will return color only if the HAZE_SOLID mode is set via setEnvironmentHazeMode().
			</summary>  
			<returns>Haze color.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazeDensity(float)">
			<summary>
			Sets the density of the haze for the preset.
			</summary> 
			<param name="density"> Haze density. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazeDensity const">
			<summary>
			Returns the haze density set for the preset.
			</summary>  
			<returns>Haze density.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setReflectionIntensity(float)">
			<summary>
			Sets intensity of the environment reflection for the preset. 0 value means no environment reflection for the preset.					It is recommended to use the default value of the parameter to keep the image realistic.
			</summary> 
			<param name="intensity"> Intensity value of the environment reflection. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getReflectionIntensity const">
			<summary>
			Returns the intensity of the environment reflections for the preset. 0 value means no environment reflections for the preset.
			</summary>  
			<returns>The intensity value of the environment reflections.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setSkyIntensity(float)">
			<summary>
			Sets intensity of the environment sky for the preset. 0.0f value means no environment sky for the preset.					It is recommended to use the default value of the parameter to keep the image realistic. If, for example, the sky looks too dark in contrast with lighting from it, you should check exposure and tone mapping settings before changing the environment intensity.
			</summary> 
			<param name="intensity"> Intensity value of the environment sky. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getSkyIntensity const">
			<summary>
			Returns the intensity of the environment sky set for the preset.
			</summary>  
			<returns>Intensity value of the environment sky.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setAmbientIntensity(float)">
			<summary>
			Sets the intensity of the environment ambient lighting for the preset. 0 value means no environment ambient lighting for the preset. The higher the value, the more ambient lighting affects environment.					It is recommended to use the default value of the parameter to keep the image realistic.
			</summary> 
			<param name="intensity"> Intensity value of the environment ambient lighting. The value can be greater than 1.0f (useful for dark scenes). </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getAmbientIntensity const">
			<summary>
			Returns the intensity of the environment ambient lighting for the preset. 0 value means no environment ambient lighting for the preset. The higher the value, the more ambient lighting affects environment.
			</summary>  
			<returns>The intensity value of environment ambient lighting. The value can be greater than 1.0f.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setTextureName(char)">
			<summary>
			Sets the path to the cubemap defining the environment color for the preset. This texture is used for imitating landscape reflections and lighting in accordance with the ground mask.
			</summary> 
			<param name="name"> Path to the cubemap defining the environment color. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getTextureName const">
			<summary>
			Returns the path to the cubemap defining the environment color set for the preset. This texture is used for imitating landscape reflections and lighting in accordance with the ground mask.
			</summary>  
			<returns>Path to the cubemap defining the environment color.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setTextureColor(Unigine.Math.vec4)">
			<summary>
			Sets the environment color multiplier for the preset. The alpha channel defines visibility of the environment cubemap above scattering. The color multiplier is required when you need to display a sky with a photo texture and dynamic gradients at the same time.
			</summary> 
			<param name="color"> The environment color multiplier. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getTextureColor const">
			<summary>
			Returns the environment color multiplier set for the preset. The alpha channel defines visibility of the environment cubemap above scattering. The color multiplier is required when you need to display a sky with a photo texture and dynamic gradients at the same time.
			</summary>  
			<returns>The environment color multiplier.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setTextureRotation(Unigine.Math.vec3)">
			<summary>
			Sets rotation of the environment texture along three axes.
			</summary> 
			<param name="rotation"> Rotation of the texture along X, Y, Z axes, in degrees. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getTextureRotation const">
			<summary>
			Returns rotation of the environment texture along three axes, in degrees.
			</summary>  
			<returns>Rotation of the texture along X, Y, Z axes, in degrees.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setTextureBlur(float)">
			<summary>
			Sets the blur intensity for the environment texture. This value can be used to make blurred panorama at the background.					Reflections and ambient lighting aren't blurred.
			</summary> 
			<param name="blur"> Blur intensity. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getTextureBlur const">
			<summary>
			Returns the blur intensity for the environment texture.					Reflections and ambient lighting aren't blurred.
			</summary>  
			<returns>Blur intensity.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getMoonTextureIntensity const">
			<summary>
			Returns the intensity multiplier of the Moon texture. It allows increasing/reducing brightness of the Moon.
			</summary>  
			<returns>Intensity of the Moon texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setMoonTextureIntensity(float)">
			<summary>
			Sets the intensity multiplier of the Moon texture. It allows increasing/reducing brightness of the Moon.
			</summary> 
			<param name="intensity"> Intensity of the Moon texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setSunTextureColor(Unigine.Math.vec4)">
			<summary>
			Sets the color multiplier for the current Sun texture. By default, it is (1,1,1,1).
			</summary> 
			<param name="color"> Color multiplier. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getMoonAngularSize const">
			<summary>
			Returns the current angular size of the Moon in degrees as seen from the Earth. By default, the size of the Moon is 0.5 degrees.
			</summary>  
			<returns>Angular size of the Moon.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getSunTextureIntensity const">
			<summary>
			Returns the intensity multiplier of the Sun texture. It allows increasing/reducing brightness of the Sun.
			</summary>  
			<returns>Intensity of the sun texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getMoonTextureColor const">
			<summary>
			Returns the color multiplier of the Moon texture.
			</summary>  
			<returns>Color multiplier.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setSunTextureName(char)">
			<summary>
			Sets the Sun texture with the given name.
			</summary> 
			<param name="name"> Name of the Sun texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setMoonTextureColor(Unigine.Math.vec4)">
			<summary>
			Sets the color multiplier for the current Moon texture. By default, it is (1,1,1,1).
			</summary> 
			<param name="color"> Color multiplier. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setSunTextureIntensity(float)">
			<summary>
			Sets the intensity multiplier of the Sun texture. It allows increasing/reducing brightness of the Sun.
			</summary> 
			<param name="intensity"> Intensity of the Sun texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setMoonAngularSize(float)">
			<summary>
			Sets the angular size of the Moon in degrees. The value is set for an observer on the Earth. By default, the size of the Moon is 0.5 degrees as seen from the Earth..
			</summary> 
			<param name="size"> Angular size of the Moon. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getSunTextureColor const">
			<summary>
			Returns the color multiplier of the Sun texture. By default, it is (1,1,1,1).
			</summary>  
			<returns>Color multiplier.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setMoonTextureName(char)">
			<summary>
			Sets a name of the Moon texture.
			</summary> 
			<param name="name"> Name of the Moon texture. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setSunAngularSize(float)">
			<summary>
			Sets the angular size of the Sun in degrees. The value is set for an observer on the Earth. By default, the size of the Sun is 0.5 degrees as seen from the Earth.
			</summary> 
			<param name="size"> Angular size of the Sun. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getSunAngularSize const">
			<summary>
			Returns the angular size of the Sun in degrees as seen from the Earth. By default, the size of the Sun is 0.5 degrees.
			</summary>  
			<returns>Angular size of the Sun.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getSunTextureName const">
			<summary>
			Returns the name of the Sun texture.
			</summary>  
			<returns>Name of the Sun texture.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getMoonTextureName const">
			<summary>
			Returns the name of the Moon texture.
			</summary>  
			<returns>Name of the Moon texure.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalStartHeight(float)">
			<summary>
			Sets a new reference height value for the two parameters (Half Visibility Distance and Half Faloff Height).
			</summary> 
			<param name="height"> New reference height value to be set, in units. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalStartHeight const">
			<summary>
			Returns the current reference height value for the two parameters (Half Visibility Distance and Half Faloff Height).
			</summary>  
			<returns>Current reference height value, in units.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalHalfVisibilityDistance(float)">
			<summary>
			Sets the distance to the boundary at which the visibility comprises 50%. There is no zero-visibility in the real world, so the half-visibility boundary is used to adjust haze distance.
			</summary> 
			<param name="distance"> New distance value to be set, in units. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalHalfVisibilityDistance const">
			<summary>
			Returns the current distance to the boundary at which the visibility comprises 50%. There is no zero-visibility in the real world, so the half-visibility boundary is used to adjust haze distance.
			</summary>  
			<returns>Current distance to the boundary at which the visibility comprises 50%, in units.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalHalfFalloffHeight(float)">
			<summary>
			Sets the height of the haze density gradient. The higher the value, the longer the haze desity reduces as the height grows, making the transition between the clear sky and haze smoother.
			</summary> 
			<param name="height"> New height of the haze density gradient to be set. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalHalfFalloffHeight const">
			<summary>
			Returns the current height of the haze density gradient. The higher the value, the longer the haze desity reduces as the height grows, making the transition between the clear sky and haze smoother.
			</summary>  
			<returns>Current height of the haze density gradient.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalAmbientLightIntensity(float)">
			<summary>
			Sets the new intensity of the impact of the ambient lighting on haze (how much the ambient lighting affects the haze).
			</summary> 
			<param name="intensity"> New value of intensity of the ambient lighting impact to be set. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalAmbientLightIntensity const">
			<summary>
			Returns the current intensity of the impact of the ambient lighting on haze (how much the ambient lighting affects the haze).
			</summary>  
			<returns>Current value of intensity of the ambient lighting impact.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalAmbientColorSaturation(float)">
			<summary>
			Sets the new intensity of the ambient color's contribution to the haze (how much the sunlight affects the haze).
			</summary> 
			<param name="saturation"> New value of intensity of the ambient color's contribution to the haze to be set. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalAmbientColorSaturation const">
			<summary>
			Returns the current intensity of the ambient color's contribution to the haze (how much the sunlight affects the haze).
			</summary>  
			<returns>Current value of intensity of the ambient color's contribution to the haze.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalSunLightIntensity(float)">
			<summary>
			Sets the new intensity of the impact of the sunlight on haze (how much the sunlight affects the haze).
			</summary> 
			<param name="intensity"> New value of intensity of the sunlight impact to be set. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalSunLightIntensity const">
			<summary>
			Returns the current intensity of the impact of the sunlight on haze defining how much the sunlight affects the haze.
			</summary>  
			<returns>Current value of intensity of the sunlight impact.</returns>
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.setHazePhysicalSunColorSaturation(float)">
			<summary>
			Sets the new intensity of the impact of the sunlight on haze (how much the sunlight affects the haze).					"Sunlight color" here does not simply mean the color multiplier of the WorldLight source, but rather the Scattering LUT Light Color.
			</summary> 
			<param name="saturation"> New value of intensity of the sunlight color's contribution to the haze to be set. </param> 
		</member>
		<member name="M:Unigine.RenderEnvironmentPreset.getHazePhysicalSunColorSaturation const">
			<summary>
			Returns the current intensity of the impact of the sunlight on haze (how much the sunlight affects the haze).
			</summary>  
			<returns>Current intensity of the sunlight color's contribution to the haze.</returns>
		</member>
		<member name="M:Unigine.Renderer.clearStates">
			<summary>
			Clears rendering states and textures.					The shader will also be cleared.
			</summary>  
		</member>
		<member name="M:Unigine.Renderer.clearShader">
			<summary>
			Clears the shader.
			</summary>  
		</member>
		<member name="M:Unigine.Renderer.setBlendFunc(Render::PASS,Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Sets the light blending function for a given rendering pass and material.
			</summary> 
			<param name="pass"> Rendering pass. One of the following values:PASS_AMBIENTPASS_LIGHT_OMNIPASS_LIGHT_PROJPASS_LIGHT_WORLDPASS_EMISSION </param>
			<param name="material"> Material smart pointer. </param> 
		</member>
		<member name="M:Unigine.Renderer.setBufferMask(Render::PASS,Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Sets the buffer mask for a given rendering pass and material.					If the material does not use a depth mask and ambient pass is specified, the BUFFER_COLOR mask will be set; otherwise, the BUFFER_ALL mask will be set.
			</summary> 
			<param name="pass"> Rendering pass. One of the following values:PASS_DEFERREDPASS_AMBIENT </param>
			<param name="material"> Material smart pointer. </param> 
		</member>
		<member name="M:Unigine.Renderer.setCameraPosition(Unigine.Math.Vec3)">
			<summary>
			Sets a new camera position.
			</summary> 
			<param name="position"> New camera position. </param> 
		</member>
		<member name="M:Unigine.Renderer.getCameraPosition const">
			<summary>
			Returns current camera position.
			</summary>  
			<returns>Current camera position.</returns>
		</member>
		<member name="M:Unigine.Renderer.setDepthFunc(Render::PASS,Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Sets depth function for a given rendering pass and material.					If the depth_test option of the material is enabled, the DEPTH_GEQUAL function will be used; otherwise the depth comparison function will be disabled.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables, except the following: PASS_DEFERRED, PASS_SHADOW, PASS_DEPTH_PRE_PASS, PASS_EMISSION. </param>
			<param name="material"> Material smart pointer. </param> 
		</member>
		<member name="M:Unigine.Renderer.hasGeodeticPivot">
			<summary>
			Returns a value indicating if the rendering scene has a GeodeticPivot.
			</summary>  
			<returns>1 if the rendering scene has a GeodeticPivot; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getHeight const">
			<summary>
			Returns current screen height.
			</summary>  
			<returns>Screen height.</returns>
		</member>
		<member name="M:Unigine.Renderer.getWidth const">
			<summary>
			Returns current screen width.
			</summary>  
			<returns>Screen width.</returns>
		</member>
		<member name="M:Unigine.Renderer.getIModelview const">
			<summary>
			Returns current inverse view matrix.
			</summary>  
			<returns>Returns current inverse view matrix.</returns>
		</member>
		<member name="M:Unigine.Renderer.setMaterial(Render::PASS,Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets material and initialize all material textures.
			</summary> 
			<param name="pass"> Rendering pass. </param>
			<param name="material"> Material smart pointer. </param> 
		</member>
		<member name="M:Unigine.Renderer.setModelview(Unigine.Math.Mat4)">
			<summary>
			Sets current view matrix.
			</summary> 
			<param name="modelview"> New view matrix to be set. </param> 
		</member>
		<member name="M:Unigine.Renderer.getModelview const">
			<summary>
			Returns current view matrix.
			</summary>  
			<returns>Returns current view matrix.</returns>
		</member>
		<member name="M:Unigine.Renderer.isNode const">
			<summary>
			Returns a value indicating if node rendering is in progress.
			</summary>  
			<returns>1 if the node rendering is in progress, otherwise 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getObjects">
			<summary>
			Retrieves the list of all rendering scene objects and puts it to the buffer.
			</summary>  
			<returns>Buffer containing all scene objects.</returns>
		</member>
		<member name="M:Unigine.Renderer.setObliqueFrustum(bool)">
			<summary>
			Enables or disables obliqueness of the viewing frustum.					It is recommended to set oblique viewing frustum using this method, as it doesn't affect the projection matrix. To specify the near clipping plane use the setObliqueFrustumPlane() method.
			</summary> 
			<param name="frustum"> 1 to enable oblique viewing frustum; 0 to disable it. </param> 
		</member>
		<member name="M:Unigine.Renderer.isObliqueFrustum const">
			<summary>
			Returns a value indicating if the viewing frustum is oblique.
			</summary>  
			<returns>1 if the viewing frustum is oblique; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.setObliqueFrustumPlane(Unigine.Math.Vec4)">
			<summary>
			Sets the oblique near clipping plane of the viewing frustum.					This method does not affect the projection matrix. To enable the oblique frustum use the setObliqueFrustum() method.
			</summary> 
			<param name="plane"> World coordinates of the oblique near clipping plane to set (Nx, Ny, Nz, D), where Nx, Ny, Nz - coordinates of the plane normal, D - distance from the origin to the plane. </param> 
		</member>
		<member name="M:Unigine.Renderer.getObliqueFrustumPlane const">
			<summary>
			Returns the oblique near clipping plane of the viewing frustum.
			</summary>  
			<returns>World coordinates of the oblique near clipping plane to set (Nx, Ny, Nz, D), where Nx, Ny, Nz - coordinates of the plane normal, D - distance from the origin to the plane.</returns>
		</member>
		<member name="M:Unigine.Renderer.setOldModelview(Unigine.Math.Mat4)">
			<summary>
			Updates the old view matrix.
			</summary> 
			<param name="modelview"> Old view matrix to be set. </param> 
		</member>
		<member name="M:Unigine.Renderer.getOldModelview const">
			<summary>
			Returns the old view matrix.
			</summary>  
			<returns>Old view matrix.</returns>
		</member>
		<member name="M:Unigine.Renderer.setOldProjection(Unigine.Math.mat4)">
			<summary>
			Updates the old projection matrix.
			</summary> 
			<param name="projection"> Old projection matrix to be set. </param> 
		</member>
		<member name="M:Unigine.Renderer.getOldProjection const">
			<summary>
			Returns the old projection matrix.
			</summary>  
			<returns>Old projection matrix.</returns>
		</member>
		<member name="M:Unigine.Renderer.setPolygonCull(Render::PASS,Unigine.Ptr{Unigine.Material}) const">
			<summary>
			Sets the polygon culling mode for a given rendering pass and material.					If the material is one-sided, the back-facing polygons will be culled; otherwise, polygon culling for the material will be disabled.
			</summary> 
			<param name="pass"> Rendering pass. One of the RENDER_PASS_* variables. </param>
			<param name="material"> Material smart pointer. </param> 
		</member>
		<member name="M:Unigine.Renderer.getProjectionWithoutTAA const">
			<summary>
			Returns current projection matrix without TAA.
			</summary>  
			<returns>Projection matrix without TAA.</returns>
		</member>
		<member name="M:Unigine.Renderer.setProjection(Unigine.Math.mat4)">
			<summary>
			Updates the current projection matrix.					It is not recommended to use this method for setting obliqueness of the near clipping plane of the frustum, as in this case a number of features (such as clouds, shadows, TAA, a number of engine optimizations, etc.) will not function properly. Please, use the setObliqueFrustum() method instead.
			</summary> 
			<param name="projection"> Projection matrix to be set. </param> 
		</member>
		<member name="M:Unigine.Renderer.getProjection const">
			<summary>
			Returns current projection matrix.
			</summary>  
			<returns>Current projection matrix.</returns>
		</member>
		<member name="M:Unigine.Renderer.isReflection const">
			<summary>
			Returns a value indicating if reflection rendering is in progress.
			</summary>  
			<returns>1 if reflection rendering is in progress, otherwise 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getReflectionViewportMask const">
			<summary>
			Returns the current reflection viewport mask.
			</summary>  
			<returns>Current reflection viewport mask.</returns>
		</member>
		<member name="M:Unigine.Renderer.setShaderParameters(Render::PASS,Unigine.Ptr{Shader},int)">
			<summary>
			Sets the parameters of the specified shader for a given rendering pass.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables. </param>
			<param name="shader"> Shader smart pointer. </param>
			<param name="is_screen_space"> Screenspace flag: 1 to set the parameters for the screen space effect; otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Renderer.setShaderParameters(Render::PASS,Unigine.Ptr{Shader},Unigine.Ptr{Unigine.Material},int)">
			<summary>
			Sets the parameters of the specified shader for a given rendering pass and material.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables. </param>
			<param name="shader"> Shader smart pointer. </param>
			<param name="material"> Material smart pointer. </param>
			<param name="is_screen_space"> Screenspace flag: 1 to set the parameters for the screen space effect; otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Renderer.setShaderParameters(Render::PASS,Unigine.Ptr{Shader},Unigine.Ptr{Unigine.Material},Unigine.Ptr{Unigine.Object},int,int)">
			<summary>
			Sets the parameters of the specified shader for a given rendering pass, material, object and surface.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables. </param>
			<param name="shader"> Shader smart pointer. </param>
			<param name="material"> Material smart pointer. </param>
			<param name="object"> Object smart pointer. </param>
			<param name="surface"> Surface number. </param>
			<param name="is_screen_space"> Screenspace flag: 1 to set the parameters for the screen space effect; otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Renderer.setShaderParameters(Render::PASS,Unigine.Ptr{Unigine.Material},int)">
			<summary>
			Sets the parameters of the shader for a given rendering pass and material.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables. </param>
			<param name="material"> Material smart pointer. </param>
			<param name="is_screen_space"> Screenspace flag: 1 to set the parameters for the screen space effect; otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Renderer.setShaderParameters(Render::PASS,Unigine.Ptr{Unigine.Object},int,int)">
			<summary>
			Sets the parameters of the shader for a given rendering pass, object and surface.
			</summary> 
			<param name="pass"> Rendering pass. One of the PASS_* variables. </param>
			<param name="object"> Object smart pointer. </param>
			<param name="surface"> Surface number. </param>
			<param name="is_screen_space"> Screenspace flag: 1 to set the parameters for the screen space effect; otherwise 0. </param> 
		</member>
		<member name="M:Unigine.Renderer.isShadow const">
			<summary>
			Returns a value indicating if shadows are rendered.
			</summary>  
			<returns>1 if shadows are rendered; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.checkSkipFlags(int) const">
			<summary>
			Returns a value indicating if the specified skip flag is set.
			</summary> 
			<param name="flags"> Skip flag. </param> 
			<returns>1 if the specified skip flag is set; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getSkipFlags const">
			<summary>
			Returns the skip flag set for the rendering viewport.
			</summary>  
			<returns>Skip flag.</returns>
		</member>
		<member name="M:Unigine.Renderer.isStereo const">
			<summary>
			Returns a value indicating if stereo rendering is enabled.
			</summary>  
			<returns>1 if the stereo rendering is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getStereoMode const">
			<summary>
			Returns the current stereo mode.
			</summary>  
			<returns>One of the RENDER_STEREO_* variables:</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureAutoExposure const">
			<summary>
			Returns the autoexposure texture.
			</summary>  
			<returns>Autoexposure texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureAuxiliary const">
			<summary>
			Returns the auxiliary texture.
			</summary>  
			<returns>Auxiliary texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureBentNormal const">
			<summary>
			Returns the bent normal texture. This texture is used during the Screen-Space Global Illumination stage.
			</summary>  
			<returns>Bent normal texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureClouds const">
			<summary>
			Returns the clouds texture. This texture is rendered during the separate clouds pass.
			</summary>  
			<returns>Clouds texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureColor const">
			<summary>
			Returns the color texture.
			</summary>  
			<returns>Color texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureColorOld const">
			<summary>
			Returns the color old texture.
			</summary>  
			<returns>Color old texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureColorOldReprojection const">
			<summary>
			Returns the color old reprojection texture.
			</summary>  
			<returns>Color old reprojection texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureColorOpacity const">
			<summary>
			Returns the color opacity texture.
			</summary>  
			<returns>Color opacity texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureCurrentDepth const">
			<summary>
			Returns the current depth texture.
			</summary>  
			<returns>Current depth texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureDOFMask const">
			<summary>
			Returns the DoF mask texture. This texture is used at the camera effects stage.
			</summary>  
			<returns>DoF mask texture</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferFeatures const">
			<summary>
			Returns the texture that stores intensity of the screen-space bevel effect.
			</summary>  
			<returns>Texture storing intensity of the bevels. The texture is RGBA8, the intensity value is written to the R channel.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferAlbedo const">
			<summary>
			Returns the Gbuffer albedo texture.
			</summary>  
			<returns>Gbuffer albedo texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferMaterialMask const">
			<summary>
			Returns the Gbuffer material mask texture.
			</summary>  
			<returns>Gbuffer material mask texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferNormal const">
			<summary>
			Returns the Gbuffer normal texture.
			</summary>  
			<returns>Gbuffer normal texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferShading const">
			<summary>
			Returns the Gbuffer shading texture.
			</summary>  
			<returns>Gbuffer shading texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureGBufferVelocity const">
			<summary>
			Returns the Gbuffer velocity texture.
			</summary>  
			<returns>Gbuffer velocity texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureLights const">
			<summary>
			Returns the array texture storing contents of the deferred light buffer and the deferred reflections buffer. The texture contains four RG11B10F textures: the first layer stores the diffuse light, the second layer stores the specular light, the third one is for the environment reflection color, and the fourth one is for the environment ambient light.
			</summary>  
			<returns>A texture storing contents of the deferred light buffer and the deferred reflections buffer.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureOpacityDepth const">
			<summary>
			Returns the opacity depth texture.
			</summary>  
			<returns>Opacity depth texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureRefraction const">
			<summary>
			Returns the refraction texture.
			</summary>  
			<returns>Refraction texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureSSR const">
			<summary>
			Returns the SSR texture.
			</summary>  
			<returns>SSR texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureSSAO const">
			<summary>
			Returns the SSAO texture.
			</summary>  
			<returns>SSAO texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureSSGI const">
			<summary>
			Returns the SSGI texture.
			</summary>  
			<returns>SSGI texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureTransparentBlur const">
			<summary>
			Returns the transparent blur texture. This texture is rendered during the transparent blur pass.
			</summary>  
			<returns>Transparent blur texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getRenderTarget const">
			<summary>
			Returns the render target.
			</summary>  
			<returns>Render target.</returns>
		</member>
		<member name="M:Unigine.Renderer.getPostRenderTarget const">
			<summary>
			Returns the post texture render.
			</summary>  
			<returns>Post render target.</returns>
		</member>
		<member name="M:Unigine.Renderer.getViewport const">
			<summary>
			Returns the rendering viewport.
			</summary>  
			<returns>Rendering viewport smart pointer.</returns>
		</member>
		<member name="M:Unigine.Renderer.getViewportMask const">
			<summary>
			Returns current viewport mask.
			</summary>  
			<returns>Returns current viewport mask.</returns>
		</member>
		<member name="M:Unigine.Renderer.getZFar const">
			<summary>
			Return current far clipping plane.
			</summary>  
			<returns>Returns current far clipping plane.</returns>
		</member>
		<member name="M:Unigine.Renderer.getZNear const">
			<summary>
			Returns current near clipping plane.
			</summary>  
			<returns>Returns current near clipping plane.</returns>
		</member>
		<member name="M:Unigine.Renderer.saveState">
			<summary>
			Saves current renderer matrices.
			</summary>  
		</member>
		<member name="M:Unigine.Renderer.restoreState">
			<summary>
			Restores current renderer matrices.
			</summary>  
		</member>
		<member name="M:Unigine.Renderer.useDynamicReflections const">
			<summary>
			Returns a value indicating if rendering of dynamic reflections is enabled.
			</summary>  
			<returns>1 if rendering of dynamic reflections is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.useOcclusionQueries const">
			<summary>
			Returns a value indicating if the occlusion query test is enabled.
			</summary>  
			<returns>1 if the occlusion query test is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.usePostEffects const">
			<summary>
			Returns a value indicating if rendering of post effects is enabled.
			</summary>  
			<returns>1 if rendering of post effects is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.useShadows const">
			<summary>
			Returns a value indicating if rendering of shadows is enabled.
			</summary>  
			<returns>1 if rendering of shadows is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.useTAA const">
			<summary>
			Returns a value indicating if the Temporal Anti-Aliasing (TAA) is enabled.
			</summary>  
			<returns>1 if the Temporal Anti-Aliasing (TAA) is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.useVelocityBuffer const">
			<summary>
			Returns a value indicating if rendering to the velocity buffer is enabled.
			</summary>  
			<returns>1 if rendering to the velocity buffer is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.useVisualizer const">
			<summary>
			Returns a value indicating if rendering of the visualizer is enabled.
			</summary>  
			<returns>1 if rendering of the visualizer is enabled; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureSSCurvature const">
			<summary>
			Returns the texture used by the he Screen-Space Dirt (SSDirt) effect.
			</summary>  
			<returns>Curvature texture used by the Screen-Space Dirt (SSDirt) effect.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureAutoWhiteBalance const">
			<summary>
			Returns the auto white balance texture.
			</summary>  
			<returns>Auto-white-balance texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.getTextureRefractionMask const">
			<summary>
			Returns the refraction mask texture.
			</summary>  
			<returns>Refraction mask texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.createCustomTexture3D(char,int,int,int,int,int)">
			<summary>
			Creates a custom 3D texture. Such textures can be used in your materials.					In your base material:											Create a corresponding custom texture via code:
			</summary> 
			<param name="name"> Texture name. </param>
			<param name="width"> Texture width, in pixels. </param>
			<param name="height"> Texture height, in pixels. </param>
			<param name="depth"> Texture depth, in pixels. </param>
			<param name="format"> Texture format, one of the Texture::FORMAT_ values. </param>
			<param name="flags"> Texture flags. A combination of flags (such as Texture::USAGE_, Texture::WRAP_, etc.) </param> 
			<returns>New created custom 3D texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.createCustomTexture2D(char,int,int,int,int)">
			<summary>
			Creates a custom 2D texture array. Such texture can be used in your materials.					In your base material:											Create a corresponding custom texture via code:
			</summary> 
			<param name="name"> Texture name. </param>
			<param name="width"> Texture width, in pixels. </param>
			<param name="height"> Texture height, in pixels. </param>
			<param name="format"> Texture format, one of the Texture::FORMAT_ values. </param>
			<param name="flags"> Texture flags. A combination of flags (such as Texture::USAGE_, Texture::WRAP_, etc.) </param> 
			<returns>New created custom 2D texture.</returns>
		</member>
		<member name="M:Unigine.Renderer.createCustomTexture2DArray(char,int,int,int,int,int)">
			<summary>
			Creates a custom 2D texture array. Such texture can be used in your materials.																Create a corresponding custom texture via code:
			</summary> 
			<param name="name"> Texture name. </param>
			<param name="width"> Texture width, in pixels. </param>
			<param name="height"> Texture height, in pixels. </param>
			<param name="depth"> Number of elements in the array. </param>
			<param name="format"> Texture format, one of the Texture::FORMAT_ values. </param>
			<param name="flags"> Texture flags. A combination of flags (such as Texture::USAGE_, Texture::WRAP_, etc.) </param> 
			<returns>New created custom 2D texture array.</returns>
		</member>
		<member name="M:Unigine.Renderer.getCustomTexture(char)">
			<summary>
			Returns a custom texture by its name. Custom textures can be created using createCustomTexture3D(), createCustomTexture3D(), and createCustomTexture3D() methods.
			</summary> 
			<param name="name"> Custom texture name. </param> 
			<returns>Custom texture corresponding to the specified name, if it exists, otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.Renderer.getShaderCBufferCamera const">
			<summary>
			Returns a buffer containing camera parameters to be passed to a custom shader. This method can be used in a callback to obtain camera parameters at a certain stage of the rendering sequence and pass them to a custom shader.
			</summary>  
			<returns>Buffer containing camera parameters to be passed to a custom shader.</returns>
		</member>
		<member name="M:Unigine.Renderer.getShaderCBufferScattering const">
			<summary>
			Returns a buffer containing scattering parameters to be passed to a custom shader. This method can be used in a callback to obtain scattering parameters at a certain stage of the rendering sequence and pass them to a custom shader.
			</summary>  
			<returns>Buffer containing scattering parameters to be passed to a custom shader.</returns>
		</member>
		<member name="M:Unigine.Renderer.getCurrentLight const">
			<summary>
			Returns the currently rendered light source. This method can be used to obtain shadow maps for a certain light source in a callback (see BEGIN_SHADOWS callbacks).
			</summary>  
			<returns>Currently rendered light source.</returns>
		</member>
		<member name="F:Unigine.Renderer.RENDER_STEREO_VERTICAL">
			<summary>
			Vertical split stereo mode.
		</summary>
		</member>
		<member name="F:Unigine.Renderer.RENDER_STEREO_HORIZONTAL">
			<summary>
			Horizontal split stereo mode.
		</summary>
		</member>
		<member name="F:Unigine.Renderer.RENDER_STEREO_DEFAULT">
			<summary>
			Default stereo mode.
		</summary>
		</member>
		<member name="M:Unigine.RenderState.setAnisotropy(int)">
			<summary>
			Sets the texture anisotropy level (degree of anisotropic filtering).
			</summary> 
			<param name="anisotropy"> Texture anisotropy level to be set:0 - anisotropy level 1.1 - anisotropy level 2.2 - anisotropy level 4.3 - anisotropy level 8.4 - anisotropy level 16. </param> 
		</member>
		<member name="M:Unigine.RenderState.getAnisotropy">
			<summary>
			Returns the current texture anisotropy level (degree of anisotropic filtering).
			</summary>  
			<returns>Current texture anisotropy level:0 - anisotropy level 1.1 - anisotropy level 2.2 - anisotropy level 4.3 - anisotropy level 8.4 - anisotropy level 16.</returns>
		</member>
		<member name="M:Unigine.RenderState.setBlendDestFunc(int)">
			<summary>
			Sets a new destination blending function.
			</summary> 
			<param name="func"> New destination blending function to be set. One of the BLEND_* variables. </param> 
		</member>
		<member name="M:Unigine.RenderState.getBlendDestFunc">
			<summary>
			Returns the destination blending function.
			</summary>  
			<returns>Destination blending function. One of the BLEND_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.getBlendDestFuncBuffer(int)">
			<summary>
			Returns the destination blending function for the specified buffer.
			</summary> 
			<param name="num"> Buffer number. </param> 
			<returns>Destination blending function. One of the BLEND_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.setBlendFunc(int,int,int)">
			<summary>
			Sets blending function.
			</summary> 
			<param name="src"> Source blending function. One of the BLEND_* variables. </param>
			<param name="dest"> Destination blending function. One of the BLEND_* variables. </param>
			<param name="blend_op"> Blending operation to be used. One of the BLEND_OP_* variables. BLEND_OP_ADD is used by default. </param> 
		</member>
		<member name="M:Unigine.RenderState.setBlendFuncBuffer(int,int,int,int)">
			<summary>
			Sets blending function for the specified buffer.
			</summary> 
			<param name="num"> Buffer number. </param>
			<param name="src"> Source blending function. One of the BLEND_* variables. </param>
			<param name="dest"> Destination blending function. One of the BLEND_* variables. </param>
			<param name="blend_op"> Blending operation to be used. One of the BLEND_OP_* variables. BLEND_OP_ADD is used by default. </param> 
		</member>
		<member name="M:Unigine.RenderState.setBlendSrcFunc(int)">
			<summary>
			Sets a new source blending function.
			</summary> 
			<param name="func"> New source blending function to be set. One of the BLEND_* variables. </param> 
		</member>
		<member name="M:Unigine.RenderState.getBlendSrcFunc">
			<summary>
			Returns the source blending function.
			</summary>  
			<returns>Source blending function. One of the BLEND_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.getBlendSrcFuncBuffer(int)">
			<summary>
			Returns the source blending function for the specified buffer.
			</summary> 
			<param name="num"> Buffer number. </param> 
			<returns>Source blending function. One of the BLEND_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.setBlendOperation(int)">
			<summary>
			Sets a new blending operation.
			</summary> 
			<param name="operation"> New blending operation to be set. One of the BLEND_OP_* variables. </param> 
		</member>
		<member name="M:Unigine.RenderState.getBlendOperation">
			<summary>
			Returns the current blending operation.
			</summary>  
			<returns>Current blending operation. One of the BLEND_OP_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.getBlendOperationBuffer(int)">
			<summary>
			Returns the current blending operation for the given buffer.
			</summary> 
			<param name="num"> Buffer number. </param> 
			<returns>Current blending operation for the given buffer. One of the BLEND_OP_* variables.</returns>
		</member>
		<member name="M:Unigine.RenderState.setBufferMask(int,int)">
			<summary>
			Sets the buffer mask.
			</summary> 
			<param name="num"> Buffer number. </param>
			<param name="mask"> Buffer mask. </param> 
		</member>
		<member name="M:Unigine.RenderState.getBufferMask(int)">
			<summary>
			Returns buffer mask.
			</summary> 
			<param name="num"> Buffer number. </param> 
			<returns>Buffer mask.</returns>
		</member>
		<member name="M:Unigine.RenderState.setDepthFunc(int)">
			<summary>
			Sets the depth function.
			</summary> 
			<param name="func"> Depth function </param> 
		</member>
		<member name="M:Unigine.RenderState.getDepthFunc">
			<summary>
			Returns the current depth function.
			</summary>  
			<returns>The depth function (one of the DEPTH_* variables).</returns>
		</member>
		<member name="M:Unigine.RenderState.setMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets the specified material to be used.
			</summary> 
			<param name="material"> Material to be set. </param> 
		</member>
		<member name="M:Unigine.RenderState.setMaterial(Render::PASS,Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets the specified material to be used for the specified rendering pass.
			</summary> 
			<param name="pass"> Rendering pass for which the material is to be set. </param>
			<param name="material"> Material to be used. </param> 
		</member>
		<member name="M:Unigine.RenderState.getMaterial">
			<summary>
			Returns the current material.
			</summary>  
			<returns>Material smart pointer.</returns>
		</member>
		<member name="M:Unigine.RenderState.setPolygonBias(float)">
			<summary>
			Sets a new polygon bias offset.
			</summary> 
			<param name="bias"> New polygon bias offset to be set. </param> 
		</member>
		<member name="M:Unigine.RenderState.getPolygonBias">
			<summary>
			Returns the polygon bias offset.
			</summary>  
			<returns>Polygon bias offset.</returns>
		</member>
		<member name="M:Unigine.RenderState.setPolygonCull(int)">
			<summary>
			Sets the polygon cull mode.
			</summary> 
			<param name="cull"> The polygon cull mode (one of the CULL_* variables). </param> 
		</member>
		<member name="M:Unigine.RenderState.getPolygonCull">
			<summary>
			Returns the polygon cull mode.
			</summary>  
			<returns>Polygon cull mode (one of the CULL_* variables).</returns>
		</member>
		<member name="M:Unigine.RenderState.setPolygonFill(int)">
			<summary>
			Sets the polygon fill mode.
			</summary> 
			<param name="fill"> Polygon fill mode (one of the FILL_* variables). </param> 
		</member>
		<member name="M:Unigine.RenderState.getPolygonFill">
			<summary>
			Returns the polygon fill mode.
			</summary>  
			<returns>Polygon fill mode.</returns>
		</member>
		<member name="M:Unigine.RenderState.setPolygonFront(int)">
			<summary>
			Set the polygon mode to front.
			</summary> 
			<param name="front"> 1 - enable the front mode; 0 - disable it. </param> 
		</member>
		<member name="M:Unigine.RenderState.getPolygonFront">
			<summary>
			Returns value indicating if the polygon front mode is set.
			</summary>  
			<returns>1 if the polygon front mode is set; otherwise - 0.</returns>
		</member>
		<member name="M:Unigine.RenderState.setPolygonOffset(float,float)">
			<summary>
			Sets the polygon offset value.
			</summary> 
			<param name="bias"> Polygon bias offset. </param>
			<param name="offset"> Polygon slope offset. </param> 
		</member>
		<member name="M:Unigine.RenderState.setPolygonSlope(float)">
			<summary>
			Sets a new polygon slope offset.
			</summary> 
			<param name="slope"> New polygon slope offset. </param> 
		</member>
		<member name="M:Unigine.RenderState.getPolygonSlope">
			<summary>
			Returns the polygon slope offset.
			</summary>  
			<returns>Polygon slope offset.</returns>
		</member>
		<member name="M:Unigine.RenderState.setScissorTest(float,float,float,float)">
			<summary>
			Sets scissor test.
			</summary> 
			<param name="x"> The X coordinate. </param>
			<param name="y"> The Y coordinate. </param>
			<param name="width"> Viewport width. </param>
			<param name="height"> Viewport height. </param> 
		</member>
		<member name="M:Unigine.RenderState.setScissorTest(Unigine.Math.ivec4)">
			<summary>
			Sets scissor test by using rectangle coordinates.
			</summary> 
			<param name="rectangle"> Rectangle coordinates. </param> 
		</member>
		<member name="M:Unigine.RenderState.setScissorTest(Unigine.Math.vec4)">
			<summary>
			Sets scissor test by using rectangle coordinates.
			</summary> 
			<param name="rectangle"> Rectangle coordinates. </param> 
		</member>
		<member name="M:Unigine.RenderState.getScissorTest">
			<summary>
			Returns the scissors test status.
			</summary>  
			<returns>Scissors test status.</returns>
		</member>
		<member name="M:Unigine.RenderState.getScreenColorTexture">
			<summary>
			Returns the screen color texture.
			</summary>  
			<returns>Texture smart pointer.</returns>
		</member>
		<member name="M:Unigine.RenderState.getScreenDepthTexture">
			<summary>
			Returns the screen depth texture.
			</summary>  
			<returns>Texture smart pointer.</returns>
		</member>
		<member name="M:Unigine.RenderState.setShader(Unigine.Ptr{Shader})">
			<summary>
			Sets the shader.
			</summary> 
			<param name="shader"> Shader smart pointer. </param> 
		</member>
		<member name="M:Unigine.RenderState.getShader">
			<summary>
			Returns the shader.
			</summary>  
			<returns>Shader smart pointer.</returns>
		</member>
		<member name="M:Unigine.RenderState.setStencilFunc(int)">
			<summary>
			Sets the stencil function.
			</summary> 
			<param name="func"> Stencil function. </param> 
		</member>
		<member name="M:Unigine.RenderState.getStencilFunc">
			<summary>
			Returns the stencil function.
			</summary>  
			<returns>Stencil function.</returns>
		</member>
		<member name="M:Unigine.RenderState.setStencilPass(int)">
			<summary>
			Sets a new stencil mode.
			</summary> 
			<param name="pass"> New stencil mode to be set (one of the STENCIL_* variables.) </param> 
		</member>
		<member name="M:Unigine.RenderState.getStencilPass">
			<summary>
			Returns the stencil mode.
			</summary>  
			<returns>The stencil mode (one of the STENCIL_* variables.)</returns>
		</member>
		<member name="M:Unigine.RenderState.setStencilRef(int)">
			<summary>
			Sets a new stencil reference value.
			</summary> 
			<param name="ref"> New stencil reference value to be set. </param> 
		</member>
		<member name="M:Unigine.RenderState.getStencilRef">
			<summary>
			Returns the stencil reference value.
			</summary>  
			<returns>Stencil reference value.</returns>
		</member>
		<member name="M:Unigine.RenderState.setStructuredBuffer(int,Unigine.Ptr{Unigine.StructuredBuffer})">
			<summary>
			Sets given StructuredBuffer to the render state.
			</summary> 
			<param name="num"> StructuredBuffer unit number. </param>
			<param name="buffer"> A pointer to the StructuredBuffer. </param> 
		</member>
		<member name="M:Unigine.RenderState.setTexture(int,int,Unigine.Ptr{Unigine.Texture})">
			<summary>
			Sets the texture.
			</summary> 
			<param name="binding"> Binding. </param>
			<param name="num"> Texture unit number (texture slot). </param>
			<param name="texture"> Texture smart pointer. </param> 
		</member>
		<member name="M:Unigine.RenderState.getTexture(int)">
			<summary>
			Returns the current texture.
			</summary> 
			<param name="num"> Texture unit number (texture slot). </param> 
			<returns>Texture smart pointer.</returns>
		</member>
		<member name="M:Unigine.RenderState.setViewport(int,int,int,int)">
			<summary>
			Sets the viewport size and position.
			</summary> 
			<param name="x"> The X coordinate. </param>
			<param name="y"> The Y coordinate. </param>
			<param name="width"> The width. </param>
			<param name="height"> The height. </param> 
		</member>
		<member name="M:Unigine.RenderState.getCoordX">
			<summary>
			Returns the X-coordinate of the viewport.
			</summary>  
			<returns>X-coordinate of the viewport.</returns>
		</member>
		<member name="M:Unigine.RenderState.getCoordY">
			<summary>
			Returns the Y-coordinate of the viewport.
			</summary>  
			<returns>Y-coordinate of the viewport.</returns>
		</member>
		<member name="M:Unigine.RenderState.getHeight">
			<summary>
			Returns the viewport height.
			</summary>  
			<returns>Viewport height.</returns>
		</member>
		<member name="M:Unigine.RenderState.getWidth">
			<summary>
			Returns the viewport width.
			</summary>  
			<returns>Viewport width.</returns>
		</member>
		<member name="M:Unigine.RenderState.clearBuffer(int,Unigine.Math.vec4,float,int)">
			<summary>
			Clears the specified buffer.
			</summary> 
			<param name="buffer"> Buffer mask determines which buffers are to be cleared. One or combination of BUFFER_* variables.clearBuffer(BUFFER_COLOR); // clears color bufferclearBuffer(BUFFER_DEPTH); // clears depth bufferclearBuffer(BUFFER_STENCIL); // clears stencil buffer//masks can be combined:clearBuffer(BUFFER_COLOR | BUFFER_STENCIL); // clears color and stencil buffer//there is a separate BUFFER_DEPTH_STENCIL mask for convenienceclearBuffer(BUFFER_DEPTH_STENCIL); </param>
			<param name="color"> Color value to be used. </param>
			<param name="depth"> Depth value to be used. </param>
			<param name="stencil"> Stencil value to be used. </param> 
		</member>
		<member name="M:Unigine.RenderState.clearStates">
			<summary>
			Clears all current render states. This method is used to prevent certain rendering code segment from being affected by other segments. See the usage example, that illustrates the typical use case.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.clearStructuredBuffer(Unigine.Ptr{Unigine.StructuredBuffer})">
			<summary>
			Clears the specified structured buffer.
			</summary> 
			<param name="buffer"> Structured buffer to be cleared. </param> 
		</member>
		<member name="M:Unigine.RenderState.clearStructuredBuffers">
			<summary>
			Clears all current structured buffers.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.clearTexture(Unigine.Ptr{Unigine.Texture})">
			<summary>
			Clears the specified texture.
			</summary> 
			<param name="texture"> Texture to be cleared. </param> 
		</member>
		<member name="M:Unigine.RenderState.clearTextures">
			<summary>
			Clears all textures.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.flushRender">
			<summary>
			Flushes the render.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.flushStates">
			<summary>
			Flushes the current render state to GPU. See the usage example, that illustrates the typical use case.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.saveState">
			<summary>
			Saves the current render state. This method is to be used together with the restoreState() method to enclose a segment of code, that changes the render state. See the usage example, that illustrates the typical use case.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.restoreState">
			<summary>
			Restores the current render state, that was saved by calling the saveState() method. These two methods are used together to enclose a segment of code, that changes the render state. See the usage example, that illustrates the typical use case.
			</summary>  
		</member>
		<member name="M:Unigine.RenderState.dispatch(int,int,int)">
			<summary>
			Executes commands in a compute shader (similar to ID3D11DeviceContext::Dispatch() method). A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector given by (x,y,z).
			</summary> 
			<param name="group_threads_x"> Local X work-group size of the compute shader. </param>
			<param name="group_threads_y"> Local Y work-group size of the compute shader. </param>
			<param name="group_threads_z"> Local Z work-group size of the compute shader. </param> 
		</member>
		<member name="F:Unigine.RenderState.BIND_ALL">
			<summary>
			A flag indicating that texture should be bound to all shaders.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BIND_FRAGMENT">
			<summary>
			A flag indicating that texture should be bound to fragment shaders only.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_NONE">
			<summary>
			None blending factor.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ZERO">
			<summary>
			Zero blending factor. Each component of the color is multiplied by (0, 0, 0, 0).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE">
			<summary>
			One blending factor. Each component of the color is multiplied by (1, 1, 1, 1).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_SRC_COLOR">
			<summary>
			Source color blending factor. Each component of the color is multiplied by the source color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_SRC_COLOR">
			<summary>
			Inverse source color blending factor. Each component of the color is multiplied by the inverse of the source color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_SRC_ALPHA">
			<summary>
			Source alpha blending factor. Each component of the color is multiplied by the alpha value of the source.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_SRC_ALPHA">
			<summary>
			Inverse source alpha blending factor. Each component of the color is multiplied by the inverse of the alpha value of the source.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_DEST_COLOR">
			<summary>
			Destination color blending factor. Each component of the color is multiplied by the destination color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_DEST_COLOR">
			<summary>
			Inverse destination color blending factor. Each component of the color is multiplied by the inverse of the destination color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_DEST_ALPHA">
			<summary>
			Destination alpha blending factor. Each component of the color is multiplied by the alpha value of the destination.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_DEST_ALPHA">
			<summary>
			Inverse destination alpha blending factor. Each component of the color is multiplied by the inverse of the alpha value of the destination.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_SRC1_COLOR">
			<summary>
			Source color blending factor (for dual source blending). Each component of the color is multiplied by the source color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_SRC1_COLOR">
			<summary>
			Inverse source color blending factor (for dual source blending). Each component of the color is multiplied by the inverse of the source color.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_SRC1_ALPHA">
			<summary>
			Source alpha blending factor. Each component of the color is multiplied by the alpha value of the source.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_ONE_MINUS_SRC1_ALPHA">
			<summary>
			Inverse source alpha blending factor (for dual source blending). Each component of the color is multiplied by the inverse of the alpha value of the source.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_ALL">
			<summary>
			Buffer mask indicating that all color channels, depth, and stencil buffers are available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_ALPHA">
			<summary>
			Buffer mask indicating that A channel of the buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_BLUE">
			<summary>
			Buffer mask indicating that B channel of the buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_COLOR">
			<summary>
			Buffer mask indicating that all color channels of the buffer are available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_DEPTH">
			<summary>
			Buffer mask indicating that depth buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_DEPTH_STENCIL">
			<summary>
			Buffer mask indicating that depth and stencil buffers are available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_GREEN">
			<summary>
			Buffer mask indicating that G channel of the buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_NONE">
			<summary>
			Buffer mask indicating that all color channels, depth, and stencil buffers are not available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_RED">
			<summary>
			Buffer mask indicating that R channel of the buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BUFFER_STENCIL">
			<summary>
			Buffer mask indicating that stencil buffer is available for rendering.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.CULL_BACK">
			<summary>
			A flag indicating that back-facing polygons should be culled.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.CULL_FRONT">
			<summary>
			A flag indicating that front-facing polygons should be culled.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.CULL_NONE">
			<summary>
			A flag tat disables the polygon culling.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_ALWAYS">
			<summary>
			A flag indicating depth function that performs the comparison which always succeeds (always passes).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_EQUAL">
			<summary>
			A flag indicating depth function that performs the comparison which is an equal-to operation (passes if the incoming depth value is equal to the stored depth value).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_NOT_EQUAL">
			<summary>
			A flag indicating depth function that performs the comparison which is a not-equal-to operation (passes if the incoming depth value is not equal to the stored depth value).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_GEQUAL">
			<summary>
			A flag indicating depth function that performs the comparison which is a greater-than or equal-to operation (passes if the incoming depth value is greater than or equal to the stored depth value).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_LEQUAL">
			<summary>
			A flag indicating depth function that performs the comparison which is a less-than or equal-to operation (passes if the incoming depth value is less than or equal to the stored depth value).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.DEPTH_NONE">
			<summary>
			A flag that disables the depth comparison function.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.FILL_SOLID">
			<summary>
			A flag that specifies how polygons will be rasterized (the interior of the polygon is filled)
		</summary>
		</member>
		<member name="F:Unigine.RenderState.FILL_WIREFRAME">
			<summary>
			A flag that specifies how polygons will be rasterized (boundary edges of the polygon are drawn as line segments.)
		</summary>
		</member>
		<member name="F:Unigine.RenderState.FRONT_CCW">
			<summary>
			Counterclockwise orientation mode of the front-facing polygon.s
		</summary>
		</member>
		<member name="F:Unigine.RenderState.FRONT_CW">
			<summary>
			Clockwise orientation mode of the front-facing polygons.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.FRONT_INVERT">
			<summary>
			Back-facing mode for polygons.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_KEEP">
			<summary>
			A flag indicating stencil buffer operation that does not update the entry in the stencil buffer (stencil value unchanged).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_INCR">
			<summary>
			A flag indicating stencil buffer operation that increments the stencil-buffer entry (stencil value incremented).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_REPLACE">
			<summary>
			A flag indicating stencil buffer operation that replaces the stencil-buffer entry with a reference value (stencil value replaced by stencil reference value).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_NONE">
			<summary>
			A flag that disables the stencil test.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_LESS">
			<summary>
			A flag indicating stencil function that performs a comparison which is a less-than operation (passes if reference value is less than stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_EQUAL">
			<summary>
			A flag indicating stencil function that performs a comparison which is an equal-to operation (passes if reference value is equal to stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_LESS_EQUAL">
			<summary>
			A flag indicating stencil function that performs a comparison which is a less-than-or-equal-to operation (passes if reference value is less than or equal to stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_GREATER">
			<summary>
			A flag indicating stencil function that performs a comparison which is a greater-than operation (passes if reference value is greater than stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_NOT_EQUAL">
			<summary>
			A flag indicating stencil function that performs a comparison which is an not-equal-to operation (passes if reference value is not equal to stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_GREATER_EQUAL">
			<summary>
			A flag indicating stencil function that performs a comparison which is a greater-than-or-equal-to operation (passes if reference value is greater than or equal to stencil buffer).
		</summary>
		</member>
		<member name="F:Unigine.RenderState.STENCIL_ALWAYS">
			<summary>
			A flag indicating stencil function that performs the comparison which always succeeds.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_OP_ADD">
			<summary>
			ADD blending operation: source and destination colors are added to each other. O = sS + dD. The source and dest are multiplied by blending parameters.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_OP_SUBTRACT">
			<summary>
			SUBTRACT blending operation: subtracts the destination from the source. O = sS - dD. The source and dest are multiplied by blending parameters.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_OP_REVERSE_SUBTRACT">
			<summary>
			REVERSE SUBTRACT blending operation: subtracts the source from the destination. O = dD - sS. The source and dest are multiplied by blending parameters.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_OP_MIN">
			<summary>
			MIN blending operation: output color is the component-wise minimum value of the source and dest colors. So for RGB it means that Or = min(Sr, Dr), Og = min(Sg, Dg), and so forth.
		</summary>
		</member>
		<member name="F:Unigine.RenderState.BLEND_OP_MAX">
			<summary>
			MAX blending operation: output color is the component-wise maximum  value of the source and dest colors. So for RGB it means that Or = max(Sr, Dr), Og = max(Sg, Dg), and so forth.
		</summary>
		</member>
	</members>
</doc>