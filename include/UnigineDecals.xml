<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Decal.setMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets a new material for the decal.
			</summary> 
			<param name="mat"> Smart pointer to the material to be used for the decal. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaterial const">
			<summary>
			Returns the material used for the decal.
			</summary>  
			<returns>Smart pointer to the material used for the decal.</returns>
		</member>
		<member name="M:Unigine.Decal.getMaterialInherit const">
			<summary>
			Inherits material for the decal (i.e. creates a material instance). Modifications made in a new material instance will not affect the source material.					A child material will be created only once, all subsequent calls to this method will return the first created child material.
			</summary>  
			<returns>Smart pointer to the inherited material.</returns>
		</member>
		<member name="M:Unigine.Decal.isMaterialInherited const">
			<summary>
			Returns the value indicating if a given material is inherited (instanced). Modifications made in a material instance do not affect the source material.
			</summary>  
			<returns>1 if the material is inherited successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaxFadeDistance(float)">
			<summary>
			Updates a maximum fade-out distance, across which the decal smoothly becomes invisible due to the alpha fading. It is counted starting from the maximum visibility distance value.
			</summary> 
			<param name="distance"> A new minimum fade-out distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaxFadeDistance const">
			<summary>
			Returns a maximum fade-out distance, across which the decal smoothly becomes invisible due to the alpha fading. It is counted starting from the maximum visibility distance value.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaxVisibleDistance(float)">
			<summary>
			Updates the maximum visibility distance, starting at which the decal begins to fade out until becomes completely invisible.
			</summary> 
			<param name="distance"> A maximum visibility distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaxVisibleDistance const">
			<summary>
			Returns a maximum visibility distance, starting at which the decal begins to fade out until becomes completely invisible.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setMinFadeDistance(float)">
			<summary>
			Updates a minimum fade-in distance, across which the decal smoothly becomes visible due to the alpha fading. It is counted starting from the minimum visibility distance value.
			</summary> 
			<param name="distance"> A new minimum fade-in distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMinFadeDistance const">
			<summary>
			Returns a minimum fade-in distance, across which the decal smoothly becomes visible due to the alpha fading. It is counted starting from the minimum visibility distance value.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setMinVisibleDistance(float)">
			<summary>
			Updates a minimum visibility distance, starting at which the decal begins to fade in and then becomes completely visible.
			</summary> 
			<param name="distance"> A new minimum visibility distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMinVisibleDistance const">
			<summary>
			Returns the minimum visibility distance, starting at which the decal begins to fade in and then becomes completely visible.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setOpacity(float)">
			<summary>
			Sets opacity for the decal. This parameter enables you to control whether the decal should be opaque or semi-transparent.
			</summary> 
			<param name="opacity"> New opacity value to be set in the [0.0f; 1.0f] range (1.0f - the decal is fully opaque). </param> 
		</member>
		<member name="M:Unigine.Decal.getOpacity const">
			<summary>
			Returns the current opacity for the decal.
			</summary>  
			<returns>Current opacity value in the [0.0f; 1.0f] range (1.0f - the decal is fully opaque).</returns>
		</member>
		<member name="M:Unigine.Decal.setRadius(float)">
			<summary>
			Sets the new height of the projection box/pyramid along the Z axis.
			</summary> 
			<param name="radius"> Height of the projection box/pyramid along the Z axis, in units. </param> 
		</member>
		<member name="M:Unigine.Decal.getRadius const">
			<summary>
			Returns the current height of the projection box along the Z axis.
			</summary>  
			<returns>The height of the projection box along the Z axis, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setViewportMask(int)">
			<summary>
			Sets a bit mask for rendering a decal into the viewport. The decal is rendered, if its mask matches the camera viewport mask and the viewport mask of the decal's material.
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a mask. </param> 
		</member>
		<member name="M:Unigine.Decal.getViewportMask const">
			<summary>
			Returns the current bit mask for rendering into the viewport. The decal is rendered, if its mask matches the camera viewport mask and the viewport mask of the decal's material.
			</summary>  
			<returns>The integer value, each bit of which is used to set a mask.</returns>
		</member>
		<member name="M:Unigine.Decal.setIntersectionMask(int)">
			<summary>
			Sets a new intersection mask for the decal. This mask can be used to cut out areas intersected by the decal from grass, mesh clutter and world clutter					(e.g. to remove grass or forest from the surface of roads projected using decals).					The areas will be cut out only if intersection masks of grass and clutter objects matches this mask (one bit at least).
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.Decal.getIntersectionMask const">
			<summary>
			Returns the current intersection mask of the decal. This mask can be used to cut out areas intersected by the decal from grass, mesh clutter and world clutter					(e.g. to remove grass or forest from the surface of roads projected using decals).					The areas will be cut out only if intersection masks of grass and clutter objects matches this mask (one bit at least).
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.Decal.isTerrainHole const">
			<summary>
			Returns a value indicating if the decal is used to create a hole in the terrain.
			</summary>  
			<returns>1 if the decal is used to create a terrain hole; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Decal.inside(Unigine.Math.vec3)">
			<summary>
			Returns a value indicating if the point with the given coordinates is inside the decal (in object-space).
			</summary> 
			<param name="p"> Point coordinates. </param> 
			<returns>1 if the point is inside the decal; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaterialPath(char)">
			<summary>
			Sets the material for the decal by path.
			</summary> 
			<param name="path"> Material path. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaterialPath const">
			<summary>
			Returns the path to the material used for the decal.
			</summary>  
			<returns>Material path.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaterialGUID(Unigine.UGUID)">
			<summary>
			Sets the material for the decal by GUID.
			</summary> 
			<param name="materialguid"> Material GUID. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaterialGUID const">
			<summary>
			Returns the GUID of the material used for the decal.
			</summary>  
			<returns>Material GUID.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.#ctor">
			<summary>
			Constructor. Creates a new Mesh Decal.
			</summary>  
		</member>
		<member name="M:Unigine.DecalMesh.#ctor(char)">
			<summary>
			DecalMesh constructor. Creates a Mesh Decal with a base mesh loaded from the specified file.
			</summary> 
			<param name="path"> Path to the base mesh file. </param> 
		</member>
		<member name="M:Unigine.DecalMesh.setMeshPath(char)">
			<summary>
			Sets a new path to the source mesh for the current decal mesh. If the mesh is in the procedural mode, it will be reset.					The mesh should contain a single surface. In case if the mesh contains several surfaces, only the one with the 0 index will be used. Thus, the area of the decal will differ from the initial mesh.
			</summary> 
			<param name="path"> New path to the source .mesh-file to be set. </param> 
		</member>
		<member name="M:Unigine.DecalMesh.getMeshPath const">
			<summary>
			Returns the path to the source .mesh-file currently used as a base for the decal.
			</summary>  
			<returns>Path to the source .mesh-file.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.type">
			<summary>
			Returns a DecalMesh type identifier.
			</summary>  
			<returns>Type identifier.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshInfo">
			<summary>
			Returns the base mesh that stores data on mesh bounds, surfaces, their number, names, and bounds, but doesn't contain any geometry.				It's highly recommended NOT to edit the returned mesh.
			</summary>  
			<returns>A base static mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshForce">
			<summary>
			Returns the base mesh used for the object. The returned static mesh won't be loaded to VRAM.				It's highly recommended NOT to edit the returned mesh.
			</summary>  
			<returns>A base static mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshAsync">
			<summary>
			Returns the base mesh used for the object asynchronously. This function can be called if the mesh hasn't been loaded yet.				It's highly recommended NOT to edit the returned mesh.
			</summary>  
			<returns>A base static mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshForceVRAM">
			<summary>
			Returns the base mesh used for the object and loads it to video memory (VRAM). At that, the static mesh will also be loaded to memory (RAM).				Loading to VRAM must be performed in the main thread only.
			</summary>  
			<returns>A base static mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshAsyncVRAM">
			<summary>
			Returns the base mesh used for the object asynchronously and loads it to video memory (VRAM). At that, the static mesh will also be loaded to memory (RAM).				Loading to VRAM must be performed in the main thread only.
			</summary>  
			<returns>A base static mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.loadAsyncVRAM">
			<summary>
			Asynchronously loads the mesh to video memory (VRAM) if the async streaming mode for meshes is enabled. Otherwise, the forced loading is performed. This method is recommended for implementing your own prefetch system (i.e. asynchronous pre-loading of meshes to video memory before they are used).				Loading to VRAM must be performed in the main thread only.
			</summary>  
			<returns>true if the mesh is loaded successfully, otherwise false. If the mesh is already loaded to VRAM, true will be returned.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.loadAsyncRAM">
			<summary>
			Asynchronously loads the mesh to memory (RAM) if the async streaming mode for meshes is enabled. Otherwise, the forced loading is performed.  This method is recommended for implementing your own prefetch system (i.e. asynchronous pre-loading of meshes to video memory before they are used).
			</summary>  
			<returns>true if the mesh is loaded successfully, otherwise false. If the mesh is already loaded to RAM, true will be returned.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.loadForceVRAM">
			<summary>
			Performs force-loading of the mesh to video memory (VRAM) immediately. The forced loading to VRAM is performed in the main thread.				Loading to VRAM must be performed in the main thread only.
			</summary>  
			<returns>true if the mesh is loaded successfully, otherwise false. If the mesh is already loaded to VRAM, true will be returned.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.loadForceRAM">
			<summary>
			Performs force-loading of the mesh to memory (RAM) immediately.
			</summary>  
			<returns>true if the mesh is loaded successfully, otherwise false. If the mesh is already loaded to RAM, true will be returned.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.asyncCalculateNodes(int)">
			<summary>
			Asynchronously calculates the mesh surface internal spatial tree used for quick calculation of collisions and intersections. This method is recommended for implementing your own prefetch system (i.e. asynchronous pre-loading of meshes to memory before they are used).
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>true if the internal tree is calculated successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.asyncCalculateEdges(int)">
			<summary>
			Asynchronously calculates the edges of the mesh surface geometry. This method is recommended for implementing your own prefetch system (i.e. asynchronous pre-loading of meshes to memory before they are used).
			</summary> 
			<param name="surface"> Mesh surface number. </param> 
			<returns>true if the edges are calculated successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.setMeshProceduralMode(bool)">
			<summary>
			Sets a value indicating if the base mesh used for the object is procedural. A procedural mesh is a mesh created via code, such meshes have a specific streaming mode - they are always kept in memory after creation and never unloaded until the object is destroyed via code or the mesh returns to its normal mode (streaming from a source file). Changing of the base static mesh is possible only if it is in the procedural mode.
			</summary> 
			<param name="meshproceduralmode"> true to switch the base mesh used for the object to procedural mode; otherwise, false - normal mode (the base mesh is streamed from a source file). </param> 
		</member>
		<member name="M:Unigine.DecalMesh.isMeshProceduralMode const">
			<summary>
			Returns a value indicating if the base mesh used for the object is procedural. A procedural mesh is a mesh created via code, such meshes have a specific streaming mode - they are always kept in memory after creation and never unloaded until the object is destroyed via code or the mesh returns to its normal mode (streaming from a source file). Changing of the base static mesh is possible only if it is in the procedural mode.
			</summary>  
			<returns>true if the base mesh used for the object is procedural; otherwise, false - normal mode (the base mesh is streamed from a source file).</returns>
		</member>
		<member name="M:Unigine.DecalMesh.isMeshNull const">
			<summary>
			Returns a value indicating if the base mesh used for the object is null (does not exist, unassigned, not loaded, etc.).
			</summary>  
			<returns>true if the base mesh used for the object is null; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.isMeshLoadedRAM const">
			<summary>
			Returns a value indicating if the base mesh used for the object is loaded to memory (RAM).
			</summary>  
			<returns>true if the base mesh used for the object is loaded to RAM; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.isMeshLoadedVRAM const">
			<summary>
			Returns a value indicating if the base mesh used for the object is loaded to video memory (VRAM).
			</summary>  
			<returns>true if the base mesh used for the object is loaded to VRAM; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.applyMeshProcedural(Unigine.Ptr{Unigine.Mesh})">
			<summary>
			Sets the specified mesh as the source mesh for the object.
			
			</summary> 
			<param name="mesh"> Source mesh to be applied. </param> 
		</member>
		<member name="M:Unigine.DecalMesh.getStatDrawCalls const">
			<summary>
			Returns the number of draw calls (DIP) for the decal during the last frame.
			</summary>  
			<returns>Number of draw calls (DIP) for the decal during the last frame.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getStatDrawCountViewport const">
			<summary>
			Returns the number of times the decal was drawn in the viewport last frame.
			</summary>  
			<returns>Number of times the decal was drawn in the viewport last frame.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getStatDrawCountReflection const">
			<summary>
			Returns the number of times the decal was drawn during reflections rendering in the last frame.
			</summary>  
			<returns>Number of times the decal was drawn during rendering in the last frame.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getStatDrawCountShadow const">
			<summary>
			Returns the number of times the decal was drawn during shadows rendering in the last frame.
			</summary>  
			<returns>Number of times the decal was drawn during shadows rendering in the last frame.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getStatFrame const">
			<summary>
			Returns the number of Engine frame, in which the decal was drawn last time.
			</summary>  
			<returns>Number of frame, in which the decal was drawn last time.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.#ctor">
			<summary>
			Constructor. Creates a new orthographic decal with default parameters.
			</summary>  
		</member>
		<member name="M:Unigine.DecalOrtho.setHeight(float)">
			<summary>
			Sets a new length of the projection box along the Y axis.
			</summary> 
			<param name="height"> The length of the projection box along the Y axis, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalOrtho.getHeight const">
			<summary>
			Returns the current length of the projection box along the Y axis.
			</summary>  
			<returns>The length of the projection box along the Y axis, in units.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.getProjection const">
			<summary>
			Returns the projection matrix.
			</summary>  
			<returns>The projection matrix of the decal.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.setWidth(float)">
			<summary>
			Sets the new length of the projection box along the X axis.
			</summary> 
			<param name="width"> The length of the projection box along the X axis, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalOrtho.getWidth const">
			<summary>
			Returns the current length of the projection box along the X axis, in units.
			</summary>  
			<returns>The length of the projection box along the X axis, in units.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.setZNear(float)">
			<summary>
			Sets a new value of the near clipping plane.
			</summary> 
			<param name="znear"> A value of the near clipping plane, ranging from 0 to 1. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalOrtho.getZNear const">
			<summary>
			Returns the value of the near clipping plane.
			</summary>  
			<returns>The value of the near clipping plane, ranging from 0 to 1.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.type">
			<summary>
			Returns a type identifier.
			</summary>  
			<returns>Type identifier.</returns>
		</member>
		<member name="M:Unigine.DecalProj.#ctor">
			<summary>
			Constructor. Creates a new projected decal with default parameters.
			</summary>  
		</member>
		<member name="M:Unigine.DecalProj.setAspect(float)">
			<summary>
			Sets the new aspect ratio of the decal, in units.
			</summary> 
			<param name="aspect"> The aspect ratio of the decal, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalProj.getAspect const">
			<summary>
			Returns the current aspect ratio of the decal.
			</summary>  
			<returns>The aspect ratio of the decal, in units.</returns>
		</member>
		<member name="M:Unigine.DecalProj.setFov(float)">
			<summary>
			Sets a new field of view of the decal's projector.
			</summary> 
			<param name="fov"> A field of view of the decal's projector, in degrees. The provided value will be clamped in the range [1;90]. </param> 
		</member>
		<member name="M:Unigine.DecalProj.getFov const">
			<summary>
			Returns the current field of view of the decal's projector.
			</summary>  
			<returns>The field of view of the decal's projector, in degrees.</returns>
		</member>
		<member name="M:Unigine.DecalProj.getProjection const">
			<summary>
			Returns the projection matrix.
			</summary>  
			<returns>The projection matrix of the decal.</returns>
		</member>
		<member name="M:Unigine.DecalProj.setZNear(float)">
			<summary>
			Sets a distance to the near clipping plane of the decal.
			</summary> 
			<param name="znear"> A new distance to the near clipping plane, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalProj.getZNear const">
			<summary>
			Returns the distance to the near clipping plane of the decal.
			</summary>  
			<returns>The distance to the near clipping plane, in units.</returns>
		</member>
		<member name="M:Unigine.DecalProj.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Decal type identifier.</returns>
		</member>
	</members>
</doc>