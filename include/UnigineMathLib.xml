<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Math.abs(float)">
			<summary>
			Returns the absolute value of the argument.
			</summary> 
			<param name="v"> Float value. </param> 
			<returns>Absolute value.</returns>
		</member>
		<member name="M:Unigine.Math.abs(double)">
			<summary>
			Returns the absolute value of the argument.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>Absolute value.</returns>
		</member>
		<member name="M:Unigine.Math.abs(int)">
			<summary>
			Returns the absolute value of the argument.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>Absolute value.</returns>
		</member>
		<member name="M:Unigine.Math.abs(longlong)">
			<summary>
			Returns the absolute value of the argument.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>Absolute value.</returns>
		</member>
		<member name="M:Unigine.Math.abs(Unigine.vec2)">
			<summary>
			Returns the absolute values of the vector components.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.abs(Unigine.vec3)">
			<summary>
			Returns the absolute values of the vector components.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.abs(Unigine.vec4)">
			<summary>
			Returns the absolute values of the vector components.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.abs(Unigine.dvec2)">
			<summary>
			Returns the absolute values of the vector components.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.abs(Unigine.dvec3)">
			<summary>
			Returns the absolute values of the vector components.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.abs(Unigine.dvec4)">
			<summary>
			Returns the absolute values of the vector components.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.abs(Unigine.ivec2)">
			<summary>
			Returns the absolute values of the vector components.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.abs(Unigine.ivec3)">
			<summary>
			Returns the absolute values of the vector components.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.abs(Unigine.ivec4)">
			<summary>
			Returns the absolute values of the vector components.
			</summary> 
			<param name="v"> Source vector. </param> 
			<returns>Vector with absolute values.</returns>
		</member>
		<member name="M:Unigine.Math.add3(float*UNIGINE_RESTRICT,float*UNIGINE_RESTRICT,float*UNIGINE_RESTRICT)">
			<summary>
			Returns the result of a componentwise addition of three components of vectors by storing it in the array.
			</summary> 
			<param name="ret"> Array to store the return value. </param>
			<param name="v0"> Pointer to vector. </param>
			<param name="v1"> Pointer to vector. </param> 
			<returns>Pointer to the array that stores the return value.</returns>
		</member>
		<member name="M:Unigine.Math.bezier(float,float,float)">
			<summary>
			Calculates the value of a cubic Bezier function for t = time.													A cubic Bezier curve is represented by				4 points. Po				 is the start point, P1				 and P2				 are control points 1 and 2 and P3				 is the end point. The start and end point denote the beginning and end points of the path and the control points determine how the path moves from the start to the finish. As can be seen from the image, the only variable changing is t which determines how far the path has progressed from P0 to P3. Cubic Bezier curves are used as timing functions particularly for keyframe interpolation.
			</summary> 
			<param name="times"> Coordinates of the four points of the curve along the horizontal T (times) axis in the range [0.0f, 1.0f]. </param>
			<param name="values"> Coordinates of the four points of the curve along the vertical V (values) axis in the range [0.0f, 1.0f]. </param>
			<param name="time"> Time in the range [0, 1], for which the value of the Bezier function is to be calculated. </param> 
			<returns>Value of the Bezier function.</returns>
		</member>
		<member name="M:Unigine.Math.bezier(float,double,float)">
			<summary>
			Calculates the value of a cubic Bezier function for t = time.													A cubic Bezier curve is represented by				4 points. Po				 is the start point, P1				 and P2				 are control points 1 and 2 and P3				 is the end point. The start and end point denote the beginning and end points of the path and the control points determine how the path moves from the start to the finish. As can be seen from the image, the only variable changing is t which determines how far the path has progressed from P0 to P3. Cubic Bezier curves are used as timing functions particularly for keyframe interpolation.
			</summary> 
			<param name="times"> Coordinates of the four points of the curve along the horizontal T (times) axis in the range [0.0f, 1.0f]. </param>
			<param name="values"> Coordinates of the four points of the curve along the vertical V (values) axis in the range [0.0f, 1.0f]. </param>
			<param name="time"> Time in the range [0, 1], for which the value of the Bezier function is to be calculated. </param> 
			<returns>Value of the Bezier function.</returns>
		</member>
		<member name="M:Unigine.Math.blueNoise(int,int)">
			<summary>
			Returns a blue noise value for the given pixel coordinates.
			</summary> 
			<param name="x"> X coordinate of the pixel. </param>
			<param name="y"> Y coordinate of the pixel. </param> 
			<returns>Blue noise value.</returns>
		</member>
		<member name="M:Unigine.Math.ceil(float)">
			<summary>
			Ceiling function that returns the smallest integer value that is not less than the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Smallest integer value not less than v.</returns>
		</member>
		<member name="M:Unigine.Math.ceil(double)">
			<summary>
			Ceiling function that returns the smallest integer value that is not less than the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Smallest integer value not less than v.</returns>
		</member>
		<member name="M:Unigine.Math.ceil(Unigine.vec2)">
			<summary>
			Ceiling function that returns the vector storing the smallest integer values that are not less than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the smallest integer values not less than v.</returns>
		</member>
		<member name="M:Unigine.Math.ceil(Unigine.vec3)">
			<summary>
			Ceiling function that returns the vector storing the smallest integer values that are not less than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the smallest integer values not less than v.</returns>
		</member>
		<member name="M:Unigine.Math.ceil(Unigine.vec4)">
			<summary>
			Ceiling function that returns the vector storing the smallest integer values that are not less than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the smallest integer values not less than v.</returns>
		</member>
		<member name="M:Unigine.Math.ceil(Unigine.dvec2)">
			<summary>
			Ceiling function that returns the vector storing the smallest integer values that are not less than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the smallest integer values not less than v.</returns>
		</member>
		<member name="M:Unigine.Math.ceil(Unigine.dvec3)">
			<summary>
			Ceiling function that returns the vector storing the smallest integer values that are not less than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the smallest integer values not less than v.</returns>
		</member>
		<member name="M:Unigine.Math.ceil(Unigine.dvec4)">
			<summary>
			Ceiling function that returns the vector storing the smallest integer values that are not less than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the smallest integer values not less than v.</returns>
		</member>
		<member name="M:Unigine.Math.ceilInt(float)">
			<summary>
			Returns the smallest value that's greater than or equal to the argument, stored as an integer.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>Resulting int value.</returns>
		</member>
		<member name="M:Unigine.Math.ceilInt(double)">
			<summary>
			Returns the smallest value that's greater than or equal to the argument, stored as an integer.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>Resulting int value.</returns>
		</member>
		<member name="M:Unigine.Math.changeRange(double,Unigine.dvec4)">
			<summary>
			Transforms the value from the source range to the corresponding value within target range.
			</summary> 
			<param name="value"> The value within the source range. </param>
			<param name="range"> The vector containing 4 values: values X and Y define the source range, values Z and W define the target range. </param> 
			<returns>The value within the target range.</returns>
		</member>
		<member name="M:Unigine.Math.checkMask(int,int)">
			<summary>
			Checks if any of the bits specified in bits are set in mask.
			</summary> 
			<param name="mask"> Bit mask to be checked. </param>
			<param name="bits"> Bits in the mask to be checked. </param> 
			<returns>true if there is at least one bit that is specified in both mask and bits, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Math.checkMask(unsignedint,unsignedint)">
			<summary>
			Checks if any of the bits specified in bits are set in mask.
			</summary> 
			<param name="mask"> Bit mask to be checked. </param>
			<param name="bits"> Bits in the mask to be checked. </param> 
			<returns>true if there is at least one bit that is specified in both mask and bits, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Math.checkMask(unsignedint,int)">
			<summary>
			Checks if any of the bits specified in bits are set in mask.
			</summary> 
			<param name="mask"> Bit mask to be checked. </param>
			<param name="bits"> Bits in the mask to be checked. </param> 
			<returns>true if there is at least one bit that is specified in both mask and bits, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Math.checkMask(int,unsignedint)">
			<summary>
			Checks if any of the bits specified in bits are set in mask.
			</summary> 
			<param name="mask"> Bit mask to be checked. </param>
			<param name="bits"> Bits in the mask to be checked. </param> 
			<returns>true if there is at least one bit that is specified in both mask and bits, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Math.checkRange(float,float,float)">
			<summary>
			Checks if the input value is within the specified range.
			</summary> 
			<param name="value"> Input value. </param>
			<param name="range_min"> Minimum value of the range. </param>
			<param name="range_max"> Maximum value of the range. </param> 
			<returns>true if the value is within the range, otherwise — false.</returns>
		</member>
		<member name="M:Unigine.Math.checkRange(double,double,double)">
			<summary>
			Checks if the input value is within the specified range.
			</summary> 
			<param name="value"> Input value. </param>
			<param name="range_min"> Minimum value of the range. </param>
			<param name="range_max"> Maximum value of the range. </param> 
			<returns>true if the value is within the range, otherwise — false.</returns>
		</member>
		<member name="M:Unigine.Math.checkRange(int,int,int)">
			<summary>
			Checks if the input value is within the specified range.
			</summary> 
			<param name="value"> Input value. </param>
			<param name="range_min"> Minimum value of the range. </param>
			<param name="range_max"> Maximum value of the range. </param> 
			<returns>true if the value is within the range, otherwise — false.</returns>
		</member>
		<member name="M:Unigine.Math.checkRange(longlong,longlong,longlong)">
			<summary>
			Checks if the input value is within the specified range.
			</summary> 
			<param name="value"> Input value. </param>
			<param name="range_min"> Minimum value of the range. </param>
			<param name="range_max"> Maximum value of the range. </param> 
			<returns>true if the value is within the range, otherwise — false.</returns>
		</member>
		<member name="M:Unigine.Math.checkRange(short,short,short)">
			<summary>
			Checks if the input value is within the specified range.
			</summary> 
			<param name="value"> Input value. </param>
			<param name="range_min"> Minimum value of the range. </param>
			<param name="range_max"> Maximum value of the range. </param> 
			<returns>true if the value is within the range, otherwise — false.</returns>
		</member>
		<member name="M:Unigine.Math.checkRange(char,char,char)">
			<summary>
			Checks if the input value is within the specified range.
			</summary> 
			<param name="value"> Input value. </param>
			<param name="range_min"> Minimum value of the range. </param>
			<param name="range_max"> Maximum value of the range. </param> 
			<returns>true if the value is within the range, otherwise — false.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(double,double,double)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(float,float,float)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(int,int,int)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(char,char,char)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(longlong,longlong,longlong)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(Unigine.dvec2,Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(Unigine.ivec2,Unigine.ivec2,Unigine.ivec2)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> The value. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(Unigine.vec2,Unigine.vec2,Unigine.vec2)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(Unigine.dvec3,Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(Unigine.ivec3,Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(Unigine.vec3,Unigine.vec3,Unigine.vec3)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(bvec4,bvec4,bvec4)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(Unigine.dvec4,Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(Unigine.ivec4,Unigine.ivec4,Unigine.ivec4)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(Unigine.vec4,Unigine.vec4,Unigine.vec4)">
			<summary>
			Clamps a value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.clamp(Type,Type,Type)">
			<summary>
			Clamps the value within the specified min and max limits.
			</summary> 
			<param name="v"> Value to be clamped. </param>
			<param name="v0"> Minimum value. </param>
			<param name="v1"> Maximum value. </param> 
			<returns>Clamped value.</returns>
		</member>
		<member name="M:Unigine.Math.compare(int,int)">
			<summary>
			Compares two scalars of the int type.
			</summary> 
			<param name="v0"> First int scalar. </param>
			<param name="v1"> Second int scalar. </param> 
			<returns>1 if v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(float,float)">
			<summary>
			Checks if the two scalars of the float type are exactly equal.
			</summary> 
			<param name="v0"> First float scalar. </param>
			<param name="v1"> Second float scalar. </param> 
			<returns>1 if v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(double,double)">
			<summary>
			Checks if the two scalars of the double type are exactly equal.
			</summary> 
			<param name="v0"> First double scalar. </param>
			<param name="v1"> Second double scalar. </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(float,float,float)">
			<summary>
			Compares two values to determine if they can be considered equal within a given tolerance (epsilon).
			</summary> 
			<param name="v0"> First scalar. </param>
			<param name="v1"> Second scalar. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(double,double,double)">
			<summary>
			Compares two values to determine if they can be considered equal within a given tolerance (epsilon).
			</summary> 
			<param name="v0"> First scalar. </param>
			<param name="v1"> Second scalar. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.vec2,Unigine.vec2)">
			<summary>
			Compares two vectors according to the degree of precision equal to 1.0e-6f.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>1 if v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.vec2,Unigine.vec2,float)">
			<summary>
			Compares two vectors according to the specified degree of precision.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Compares two vectors according to the degree of precision equal to 1.0e-6f.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.dvec2,Unigine.dvec2,double)">
			<summary>
			Compares two vectors according to the specified degree of precision.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.vec3,Unigine.vec3)">
			<summary>
			Compares two vectors according to the degree of precision equal to 1.0e-6f.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.vec3,Unigine.vec3,float)">
			<summary>
			Compares two vectors according to the specified degree of precision.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Compares two vectors according to the degree of precision equal to 1.0e-6f.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.dvec3,Unigine.dvec3,double)">
			<summary>
			Compares two vectors according to the specified degree of precision.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.vec4,Unigine.vec4)">
			<summary>
			Compares two vectors according to the degree of precision equal to 1.0e-6f.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.vec4,Unigine.vec4,float)">
			<summary>
			Compares two vectors according to the specified degree of precision.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Compares two vectors according to the degree of precision equal to 1.0e-6f.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.dvec4,Unigine.dvec4,double)">
			<summary>
			Compares two vectors according to the specified degree of precision.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the v0 is equal to v1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.quat,Unigine.quat)">
			<summary>
			Compares two quaternions according to the degree of precision equal to 1.0e-6f.
			</summary> 
			<param name="q0"> First quaternion. </param>
			<param name="q1"> Second quaternion. </param> 
			<returns>1 if the q0 is equal to q1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.quat,Unigine.quat,float)">
			<summary>
			Compares two quaternions according to the specified degree of precision.
			</summary> 
			<param name="q0"> First quaternion. </param>
			<param name="q1"> Second quaternion. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the q0 is equal to q1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(mat2,mat2)">
			<summary>
			Compares two matrices according to the degree of precision equal to 1.0e-6f.
			</summary> 
			<param name="m0"> First matrix. </param>
			<param name="m1"> Second matrix. </param> 
			<returns>1 if the m0 is equal to m1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(mat2,mat2,float)">
			<summary>
			Compares two matrices according to the specified degree of precision.
			</summary> 
			<param name="m0"> First matrix. </param>
			<param name="m1"> Second matrix. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the m0 is equal to m1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(mat3,mat3)">
			<summary>
			Compares two matrices according to the degree of precision equal to 1.0e-6f.
			</summary> 
			<param name="m0"> First matrix. </param>
			<param name="m1"> Second matrix. </param> 
			<returns>1 if the m0 is equal to m1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(mat3,mat3,float)">
			<summary>
			Compares two matrices according to the specified degree of precision.
			</summary> 
			<param name="m0"> First matrix. </param>
			<param name="m1"> Second matrix. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the m0 is equal to m1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.mat4,Unigine.mat4)">
			<summary>
			Compares two matrices according to the degree of precision equal to 1.0e-6f.
			</summary> 
			<param name="m0"> First matrix. </param>
			<param name="m1"> Second matrix. </param> 
			<returns>1 if the m0 is equal to m1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.mat4,Unigine.mat4,float)">
			<summary>
			Compares two matrices according to the specified degree of precision.
			</summary> 
			<param name="m0"> First matrix. </param>
			<param name="m1"> Second matrix. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the m0 is equal to m1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.dmat4,Unigine.dmat4)">
			<summary>
			Compares two matrices according to the degree of precision equal to 1.0e-6f.
			</summary> 
			<param name="m0"> First matrix. </param>
			<param name="m1"> Second matrix. </param> 
			<returns>1 if the m0 is equal to m1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.compare(Unigine.dmat4,Unigine.dmat4,double)">
			<summary>
			Compares two matrices according to the specified degree of precision.
			</summary> 
			<param name="m0"> First matrix. </param>
			<param name="m1"> Second matrix. </param>
			<param name="epsilon"> Epsilon (degree of precision). </param> 
			<returns>1 if the m0 is equal to m1; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.conjugate(Unigine.quat)">
			<summary>
			Returns the conjugate of a given quaternion.
			</summary> 
			<param name="q"> Quaternion. </param> 
			<returns>Conjugate of a given quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.conjugate(Unigine.quat,Unigine.quat)">
			<summary>
			Returns the conjugate of a given quaternion.
			</summary> 
			<param name="ret"> Argument to store the result. </param>
			<param name="q"> Quaternion. </param> 
			<returns>Conjugate of a given quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.cross(Unigine.vec2,Unigine.vec2)">
			<summary>
			Cross product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Cross product of the two 2d vectors: v0.x * v1.y - v0.y*v1.x.</returns>
		</member>
		<member name="M:Unigine.Math.cross(Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Cross product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.cross(Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Cross product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.cross(Unigine.vec3,Unigine.vec3)">
			<summary>
			Cross product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.cross(Unigine.ivec3,Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Cross product of vectors.
			</summary> 
			<param name="ret"> Output vector, to which the resulting vector will be put. </param>
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.cross(Unigine.vec3,Unigine.vec3,Unigine.vec3)">
			<summary>
			Cross product of vectors.
			</summary> 
			<param name="ret"> Output vector, to which the resulting vector will be put. </param>
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.cross(Unigine.vec4,Unigine.vec3,Unigine.vec3)">
			<summary>
			Cross product of vectors.
			</summary> 
			<param name="ret"> Output vector, to which the resulting vector will be put. </param>
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.cross(Unigine.dvec3,Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Cross product of vectors.
			</summary> 
			<param name="ret"> Output vector, to which the resulting vector will be put. </param>
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.cross(Unigine.dvec4,Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Cross product of vectors.
			</summary> 
			<param name="ret"> Output vector, to which the resulting vector will be put. </param>
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.cross3(float*UNIGINE_RESTRICT,float*UNIGINE_RESTRICT,float*UNIGINE_RESTRICT)">
			<summary>
			Returns the cross product of three components of vectors by storing it in the array.
			</summary> 
			<param name="ret"> Array to store the return value. </param>
			<param name="v0"> Pointer to vector. </param>
			<param name="v1"> Pointer to vector. </param> 
			<returns>Pointer to the array that stores the return value.</returns>
		</member>
		<member name="M:Unigine.Math.distance(Unigine.vec2,Unigine.vec2)">
			<summary>
			Calculates the distance between the two given vectors. The distance is calculated as: length(v0 - v1).
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Distance between the two given vectors.</returns>
		</member>
		<member name="M:Unigine.Math.distance(Unigine.vec3,Unigine.vec3)">
			<summary>
			Calculates the distance between the two given vectors. The distance is calculated as: length(v0 - v1).
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Distance between the two given vectors.</returns>
		</member>
		<member name="M:Unigine.Math.distance(Unigine.vec4,Unigine.vec4)">
			<summary>
			Calculates the distance between the two given vectors. The distance is calculated as: length(v0 - v1).
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Distance between the two given vectors.</returns>
		</member>
		<member name="M:Unigine.Math.distance2(Unigine.vec2,Unigine.vec2)">
			<summary>
			Calculates the squared distance between the two given vectors. The squared distance is calculated as: length2(v0 - v1). This method is much faster than distance() - the calculation is basically the same only without the slow Sqrt call. If you simply want to compare distances, then it is faster to compare squared distances against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Squared distance between the two given vectors.</returns>
		</member>
		<member name="M:Unigine.Math.distance2(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Calculates the squared distance between the two given vectors. The squared distance is calculated as: length2(v0 - v1). This method is much faster than distance() - the calculation is basically the same only without the slow Sqrt call. If you simply want to compare distances, then it is faster to compare squared distances against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Squared distance between the two given vectors.</returns>
		</member>
		<member name="M:Unigine.Math.distance2(Unigine.vec3,Unigine.vec3)">
			<summary>
			Calculates the squared distance between the two given vectors. The squared distance is calculated as: length2(v0 - v1). This method is much faster than distance() - the calculation is basically the same only without the slow Sqrt call. If you simply want to compare distances, then it is faster to compare squared distances against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Squared distance between the two given vectors.</returns>
		</member>
		<member name="M:Unigine.Math.distance2(Unigine.vec4,Unigine.vec4)">
			<summary>
			Calculates the squared distance between the two given vectors. The squared distance is calculated as: length2(v0 - v1). This method is much faster than distance() - the calculation is basically the same only without the slow Sqrt call. If you simply want to compare distances, then it is faster to compare squared distances against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Squared distance between the two given vectors.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.vec2,Unigine.vec2)">
			<summary>
			Dot product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.vec3,Unigine.vec3)">
			<summary>
			Dot product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Dot product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.vec3,Unigine.vec4)">
			<summary>
			Dot product of vectors. In this case, w component of the four-component vector is added to the dot product of first three components of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.vec4,Unigine.vec3)">
			<summary>
			Dot product of vectors. In this case, w component of the four-component vector is added to the dot product of first three components of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.vec4,Unigine.vec4)">
			<summary>
			Dot product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Dot product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.ivec2,Unigine.ivec2)">
			<summary>
			Dot product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.ivec4,Unigine.ivec3)">
			<summary>
			Dot product of vectors. In this case, w component of the four-component vector is added to the dot product of first three components of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.ivec4,Unigine.ivec4)">
			<summary>
			Dot product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Dot product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.dvec3,Unigine.dvec4)">
			<summary>
			Dot product of vectors. In this case, w component of the four-component vector is added to the dot product of first three components of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.dvec4,Unigine.dvec3)">
			<summary>
			Dot product of vectors. In this case, w component of the four-component vector is added to the dot product of first three components of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot(Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Dot product of vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot2(float,float,float)">
			<summary>
			Returns the dot product between a 2-component vector v and another 2-component vector defined by (x, y).
			</summary> 
			<param name="v"> Pointer to the first vector. </param>
			<param name="x"> X component of the second vector. </param>
			<param name="y"> Y component of the second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot3(Unigine.dvec3,Unigine.dvec4)">
			<summary>
			Dot product of three components of vectors. W components of four-component vectors are ignored.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot3(Unigine.dvec4,Unigine.dvec3)">
			<summary>
			Dot product of three components of vectors. W components of four-component vectors are ignored.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot3(Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Dot product of three components of vectors. W components of four-component vectors are ignored.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot3(Unigine.vec3,Unigine.vec4)">
			<summary>
			Dot product of three components of vectors. W components of four-component vectors are ignored.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot3(Unigine.vec4,Unigine.vec3)">
			<summary>
			Dot product of three components of vectors. W components of four-component vectors are ignored.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot3(Unigine.vec4,Unigine.vec4)">
			<summary>
			Dot product of three components of vectors. W components of four-component vectors are ignored.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dot3(float,float,float,float)">
			<summary>
			Returns the dot product between a 3-component vector v and another 3-component vector defined by (x, y, z).
			</summary> 
			<param name="v"> Pointer to the first vector. </param>
			<param name="x"> X component of the second vector. </param>
			<param name="y"> Y component of the second vector. </param>
			<param name="z"> Z component of the second vector. </param> 
			<returns>Resulting scalar.</returns>
		</member>
		<member name="M:Unigine.Math.dtof(double)">
			<summary>
			Converts a double value to an integer value.
			</summary> 
			<param name="v"> Double value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.dtoi(double)">
			<summary>
			Converts a double value to an integer value.
			</summary> 
			<param name="v"> Double value. </param> 
			<returns>Integer value.</returns>
		</member>
		<member name="M:Unigine.Math.dtol(double)">
			<summary>
			Converts a double value to a long value.
			</summary> 
			<param name="v"> Double value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.floor(double)">
			<summary>
			Rounds an argument down to the nearest integer.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Largest integer value not greater than arg.</returns>
		</member>
		<member name="M:Unigine.Math.floor(float)">
			<summary>
			Rounds an argument down to the nearest integer.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Largest integer value not greater than arg.</returns>
		</member>
		<member name="M:Unigine.Math.floor(Unigine.vec2)">
			<summary>
			Ceiling function that returns the vector storing the largest integer values that are not greater than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the largest integer values not greater than v.</returns>
		</member>
		<member name="M:Unigine.Math.floor(Unigine.vec3)">
			<summary>
			Ceiling function that returns the vector storing the largest integer values that are not greater than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the largest integer values not greater than v.</returns>
		</member>
		<member name="M:Unigine.Math.floor(Unigine.vec4)">
			<summary>
			Ceiling function that returns the vector storing the largest integer values that are not greater than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the largest integer values not greater than v.</returns>
		</member>
		<member name="M:Unigine.Math.floor(Unigine.dvec2)">
			<summary>
			Ceiling function that returns the vector storing the largest integer values that are not greater than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the largest integer values not greater than v.</returns>
		</member>
		<member name="M:Unigine.Math.floor(Unigine.dvec3)">
			<summary>
			Ceiling function that returns the vector storing the largest integer values that are not greater than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the largest integer values not greater than v.</returns>
		</member>
		<member name="M:Unigine.Math.floor(Unigine.dvec4)">
			<summary>
			Ceiling function that returns the vector storing the largest integer values that are not greater than the argument.
			</summary> 
			<param name="v"> Vector storing values. </param> 
			<returns>Vector storing the largest integer values not greater than v.</returns>
		</member>
		<member name="M:Unigine.Math.floorInt(float)">
			<summary>
			Returns the largest value that is less than or equal to the argument, stored as an integer.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>Resulting int value.</returns>
		</member>
		<member name="M:Unigine.Math.floorInt(double)">
			<summary>
			Returns the largest value that is less than or equal to the argument, stored as an integer.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>Resulting int value.</returns>
		</member>
		<member name="M:Unigine.Math.frac(float)">
			<summary>
			Returns the fractional part of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Fractional part of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.frac(double)">
			<summary>
			Returns the fractional part of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Fractional part of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.frac(Unigine.vec3)">
			<summary>
			Returns the fractional part every component of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Fractional part of every component of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.frac(Unigine.vec4)">
			<summary>
			Returns the fractional part every component of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Fractional part of every component of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.ftoc(float)">
			<summary>
			Converts a float value to a char value.
			</summary> 
			<param name="v"> Float value. </param> 
			<returns>Char value.</returns>
		</member>
		<member name="M:Unigine.Math.ftoi(float)">
			<summary>
			Converts a float value to an integer value.
			</summary> 
			<param name="v"> Float value. </param> 
			<returns>Integer value.</returns>
		</member>
		<member name="M:Unigine.Math.ftol(float)">
			<summary>
			Converts a float value to a long value.
			</summary> 
			<param name="v"> Float value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.getAngle(Unigine.quat,Unigine.quat)">
			<summary>
			Returns the angle (in degrees) between the given first and second quaternions. The angle returned is the unsigned acute angle between the two quaternions. This means the smaller of the two possible angles is used.
			</summary> 
			<param name="q0"> First quaternion (from which the angular difference is measured). </param>
			<param name="q1"> Second quaternion (to which the angular difference is measured). </param> 
			<returns>Angle between the given quaternions, in degrees within the range [0.0; 180.0].</returns>
		</member>
		<member name="M:Unigine.Math.getAngle(Unigine.vec3,Unigine.vec3)">
			<summary>
			Returns the angle (in degrees) between the given first and second vectors. The angle returned is the unsigned acute angle between the two vectors. This means the smaller of the two possible angles is used.
			</summary> 
			<param name="v0"> First vector (from which the angular difference is measured). </param>
			<param name="v1"> Second vector (to which the angular difference is measured). </param> 
			<returns>Angle between the given vectors, in degrees within the range [0.0; 180.0].</returns>
		</member>
		<member name="M:Unigine.Math.getAngle(Unigine.vec3,Unigine.vec3,Unigine.vec3)">
			<summary>
			Returns the signed angle (in degrees) between the given first and second vectors relative to the specified "up" vector.
			</summary> 
			<param name="v0"> First vector (from which the angular difference is measured). </param>
			<param name="v1"> Second vector (to which the angular difference is measured). </param>
			<param name="up"> Up vector, around which the other two vectors are rotated. </param> 
			<returns>Angle between the given vectors, in degrees within the range [-180.0; 180.0].</returns>
		</member>
		<member name="M:Unigine.Math.getBit(Type,int)">
			<summary>
			Extracts a specific bit from an integer value and returns it as a boolean.
			</summary> 
			<param name="value"> Value. </param>
			<param name="bit"> The bit of the value. </param> 
			<returns>true if the specified bit in the value is set, othewise false.</returns>
		</member>
		<member name="M:Unigine.Math.gradient4(float,Unigine.vec4)">
			<summary>
			Returns a gradient value for the specified argument using four key components. The gradient value is determined as follows:				smoothstep() method.
			</summary> 
			<param name="x"> Argument. </param>
			<param name="gradient"> Vector with four key components. </param> 
			<returns>Gradient value.</returns>
		</member>
		<member name="M:Unigine.Math.hashInteger(unsignedint)">
			<summary>
			Computes a 32-bit hash value from an input value.
			</summary> 
			<param name="v"> Input value. </param> 
			<returns>Hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashInteger(float)">
			<summary>
			Computes a 32-bit hash value from an input value.
			</summary> 
			<param name="v"> Input value. </param> 
			<returns>Hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashInteger(int)">
			<summary>
			Computes a 32-bit hash value from an input value.
			</summary> 
			<param name="v"> Input value. </param> 
			<returns>Hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashInteger(unsignedlonglong)">
			<summary>
			Computes a 64-bit hash value from an input value.
			</summary> 
			<param name="v"> Input value. </param> 
			<returns>Hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashInteger(double)">
			<summary>
			Computes a 64-bit hash value from an input value.
			</summary> 
			<param name="v"> Input value. </param> 
			<returns>Hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashInteger(longlong)">
			<summary>
			Computes a 64-bit hash value from an input value.
			</summary> 
			<param name="v"> Input value. </param> 
			<returns>Hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashMixer(unsignedint,unsignedint)">
			<summary>
			Mixes two hash values.
			</summary> 
			<param name="hash_0"> Input value. </param>
			<param name="hash_1"> Input value. </param> 
			<returns>Mixed hash.</returns>
		</member>
		<member name="M:Unigine.Math.hashMixer(unsignedlonglong,unsignedlonglong)">
			<summary>
			Mixes two hash values.
			</summary> 
			<param name="hash_0"> Input value. </param>
			<param name="hash_1"> Input value. </param> 
			<returns>Mixed hash.</returns>
		</member>
		<member name="M:Unigine.Math.hashCombine(unsignedint,unsignedint)">
			<summary>
			Returns a hash obtained by mixing the hash provided as an argument with a hash obtained for the specified value.
			</summary> 
			<param name="hash"> Input hash. </param>
			<param name="value"> Input value. </param> 
			<returns>Combined hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashCombine(unsignedint,float)">
			<summary>
			Returns a hash obtained by mixing the hash provided as an argument with a hash obtained for the specified value.
			</summary> 
			<param name="hash"> Input hash. </param>
			<param name="value"> Input value. </param> 
			<returns>Combined hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashCombine(unsignedint,int)">
			<summary>
			Returns a hash obtained by mixing the hash provided as an argument with a hash obtained for the specified value.
			</summary> 
			<param name="hash"> Input hash. </param>
			<param name="value"> Input value. </param> 
			<returns>Combined hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashCombine(unsignedlonglong,unsignedlonglong)">
			<summary>
			Returns a hash obtained by mixing the hash provided as an argument with a hash obtained for the specified value.
			</summary> 
			<param name="hash"> Input hash. </param>
			<param name="value"> Input value. </param> 
			<returns>Combined hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashCombine(unsignedlonglong,double)">
			<summary>
			Returns a hash obtained by mixing the hash provided as an argument with a hash obtained for the specified value.
			</summary> 
			<param name="hash"> Input hash. </param>
			<param name="value"> Input value. </param> 
			<returns>Combined hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashCombine(unsignedlonglong,longlong)">
			<summary>
			Returns a hash obtained by mixing the hash provided as an argument with a hash obtained for the specified value.
			</summary> 
			<param name="hash"> Input hash. </param>
			<param name="value"> Input value. </param> 
			<returns>Combined hash value.</returns>
		</member>
		<member name="M:Unigine.Math.hashCast64To32(unsignedlonglong)">
			<summary>
			Casts the 64-bit hash value to the 32-bit hash value.
			</summary> 
			<param name="value"> Input 64-bit hash value. </param> 
			<returns>32-bit hash value.</returns>
		</member>
		<member name="M:Unigine.Math.inverse(Unigine.quat)">
			<summary>
			Returns inverse of the quaternion.
			</summary> 
			<param name="q"> Quaternion. </param> 
			<returns>Return value.</returns>
		</member>
		<member name="M:Unigine.Math.inverse(Unigine.quat,Unigine.quat)">
			<summary>
			Returns inverse of the quaternion.
			</summary> 
			<param name="ret"> Argument to store the output. </param>
			<param name="q"> Quaternion. </param> 
			<returns>Return value.</returns>
		</member>
		<member name="M:Unigine.Math.inverseLerp(float,float,float)">
			<summary>
			Returns the value calculated according to the following formula: (v - v0) / (v1 - v0) clamped within 0.0f and 1.0f.
			</summary> 
			<param name="v0"> The value specifying the beginning of the interval. </param>
			<param name="v1"> The value specifying the ending of the interval. </param>
			<param name="v"> The value within the specified interval. </param> 
			<returns>Coefficient of the value within a specified interval.</returns>
		</member>
		<member name="M:Unigine.Math.inverseLerp(double,double,double)">
			<summary>
			Returns the value calculated according to the following formula: (v - v0) / (v1 - v0) clamped within 0.0 and 1.0.
			</summary> 
			<param name="v0"> The value specifying the beginning of the interval. </param>
			<param name="v1"> The value specifying the ending of the interval. </param>
			<param name="v"> The value within the specified interval. </param> 
			<returns>Coefficient of the value within a specified interval.</returns>
		</member>
		<member name="M:Unigine.Math.inverseLerp(Unigine.vec2,Unigine.vec2,Unigine.vec2)">
			<summary>
			Returns the vector with two float values calculated according to the following formula: (v - v0) / (v1 - v0) clamped within 0.0f and 1.0f.
			</summary> 
			<param name="v0"> Vector storing the values that specify the beginnings of the intervals. </param>
			<param name="v1"> Vector storing the values that specify the endings of the intervals. </param>
			<param name="v"> The values within the specified intervals. </param> 
			<returns>Coefficients of the values within a specified intervals.</returns>
		</member>
		<member name="M:Unigine.Math.inverseLerp(Unigine.vec3,Unigine.vec3,Unigine.vec3)">
			<summary>
			Returns the vector with three float values calculated according to the following formula: (v - v0) / (v1 - v0) clamped within 0.0f and 1.0f.
			</summary> 
			<param name="v0"> Vector storing the values that specify the beginnings of the intervals. </param>
			<param name="v1"> Vector storing the values that specify the endings of the intervals. </param>
			<param name="v"> The values within the specified intervals. </param> 
			<returns>Coefficients of the values within a specified intervals.</returns>
		</member>
		<member name="M:Unigine.Math.inverseLerp(Unigine.vec4,Unigine.vec4,Unigine.vec4)">
			<summary>
			Returns the vector with four float values calculated according to the following formula: (v - v0) / (v1 - v0) clamped within 0.0f and 1.0f.
			</summary> 
			<param name="v0"> Vector storing the values that specify the beginnings of the intervals. </param>
			<param name="v1"> Vector storing the values that specify the endings of the intervals. </param>
			<param name="v"> The values within the specified intervals. </param> 
			<returns>Coefficients of the values within a specified intervals.</returns>
		</member>
		<member name="M:Unigine.Math.inverseLerp(Unigine.dvec2,Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Returns the vector with two double values calculated according to the following formula: (v - v0) / (v1 - v0) clamped within 0.0 and 1.0.
			</summary> 
			<param name="v0"> Vector storing the values that specify the beginnings of the intervals. </param>
			<param name="v1"> Vector storing the values that specify the endings of the intervals. </param>
			<param name="v"> The values within the specified intervals. </param> 
			<returns>Coefficients of the values within a specified intervals.</returns>
		</member>
		<member name="M:Unigine.Math.inverseLerp(Unigine.dvec3,Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Returns the vector with three double values calculated according to the following formula: (v - v0) / (v1 - v0) clamped within 0.0 and 1.0.
			</summary> 
			<param name="v0"> Vector storing the values that specify the beginnings of the intervals. </param>
			<param name="v1"> Vector storing the values that specify the endings of the intervals. </param>
			<param name="v"> The values within the specified intervals. </param> 
			<returns>Coefficients of the values within a specified intervals.</returns>
		</member>
		<member name="M:Unigine.Math.inverseLerp(Unigine.dvec4,Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Returns the vector with four double values calculated according to the following formula: (v - v0) / (v1 - v0) clamped within 0.0 and 1.0.
			</summary> 
			<param name="v0"> Vector storing the values that specify the beginnings of the intervals. </param>
			<param name="v1"> Vector storing the values that specify the endings of the intervals. </param>
			<param name="v"> The values within the specified intervals. </param> 
			<returns>Coefficients of the values within a specified intervals.</returns>
		</member>
		<member name="M:Unigine.Math.contrastLerp(Unigine.vec4,Unigine.vec4,float,float,float)">
			<summary>
			Performs a smooth interpolation between two vectors (point_a and point_b) using a specified coefficient range to create a smooth transition effect.
			</summary> 
			<param name="point_a"> Vector. </param>
			<param name="point_b"> Vector. </param>
			<param name="coef_min_bound"> The minimum value defining the range of the coefficient for the smoothstep function, creating a softened transition over the range. </param>
			<param name="coef_max_bound"> The maximum value defining the range of the coefficient for the smoothstep function, creating a softened transition over the range. </param>
			<param name="coef"> The coefficient value that determines the interpolation position between vectors. </param> 
			<returns>.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(float)">
			<summary>
			Returns a value indicating that the given value is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="x"> Value. </param> 
			<returns>true if the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(double)">
			<summary>
			Returns a value indicating that the given value is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="x"> Value. </param> 
			<returns>true if the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(Vector2)">
			<summary>
			Returns a value indicating that any component of the argument is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(Vector3)">
			<summary>
			Returns a value indicating that any component of the argument is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(Vector4)">
			<summary>
			Returns a value indicating that any component of the argument is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(Unigine.vec2)">
			<summary>
			Returns a value indicating that any component of the argument is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(Unigine.vec3)">
			<summary>
			Returns a value indicating that any component of the argument is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(Unigine.vec4)">
			<summary>
			Returns a value indicating that any component of the argument is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(Unigine.quat)">
			<summary>
			Returns a value indicating that any component of the argument is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(Unigine.dvec2)">
			<summary>
			Returns a value indicating that any component of the argument is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(Unigine.dvec3)">
			<summary>
			Returns a value indicating that any component of the argument is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isFinite(Unigine.dvec4)">
			<summary>
			Returns a value indicating that any component of the argument is a finite number, meaning it is neither NaN nor infinity (positive or negative).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument is a finite number; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(float)">
			<summary>
			Returns a value indicating whether the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="x"> Value. </param> 
			<returns>true if the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(double)">
			<summary>
			Returns a value indicating whether the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="x"> Value. </param> 
			<returns>true if the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(Vector2)">
			<summary>
			Returns a value indicating whether any component of the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(Vector3)">
			<summary>
			Returns a value indicating whether any component of the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(Vector4)">
			<summary>
			Returns a value indicating whether any component of the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(Unigine.vec2)">
			<summary>
			Returns a value indicating whether any component of the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(Unigine.vec3)">
			<summary>
			Returns a value indicating whether any component of the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(Unigine.vec4)">
			<summary>
			Returns a value indicating whether any component of the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(Unigine.quat)">
			<summary>
			Returns a value indicating whether any component of the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(Unigine.dvec2)">
			<summary>
			Returns a value indicating whether any component of the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(Unigine.dvec3)">
			<summary>
			Returns a value indicating whether any component of the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isInf(Unigine.dvec4)">
			<summary>
			Returns a value indicating whether any component of the argument evaluates to negative or positive infinity.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if any component of the argument evaluates to negative or positive infinity; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(float)">
			<summary>
			Returns a value that indicates whether the argument is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(double)">
			<summary>
			Returns a value that indicates whether the argument is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(Vector2)">
			<summary>
			Returns a value that indicates whether the argument contains at least one component, which is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument contains at least one component, which is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(Vector3)">
			<summary>
			Returns a value that indicates whether the argument contains at least one component, which is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument contains at least one component, which is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(Vector4)">
			<summary>
			Returns a value that indicates whether the argument contains at least one component, which is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument contains at least one component, which is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(Unigine.vec2)">
			<summary>
			Returns a value that indicates whether the argument contains at least one component, which is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument contains at least one component, which is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(Unigine.vec3)">
			<summary>
			Returns a value that indicates whether the argument contains at least one component, which is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument contains at least one component, which is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(Unigine.vec4)">
			<summary>
			Returns a value that indicates whether the argument contains at least one component, which is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument contains at least one component, which is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(Unigine.quat)">
			<summary>
			Returns a value that indicates whether the argument contains at least one component, which is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument contains at least one component, which is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(Unigine.dvec2)">
			<summary>
			Returns a value that indicates whether the argument contains at least one component, which is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument contains at least one component, which is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(Unigine.dvec3)">
			<summary>
			Returns a value that indicates whether the argument contains at least one component, which is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument contains at least one component, which is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isNan(Unigine.dvec4)">
			<summary>
			Returns a value that indicates whether the argument contains at least one component, which is not a number (NaN).
			</summary> 
			<param name="v"> Value. </param> 
			<returns>true if the argument contains at least one component, which is not a number (NaN); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Math.isrgb(float)">
			<summary>
			Converts sRGB color value to RGB format.
			</summary> 
			<param name="x"> sRGB value to convert. </param> 
			<returns>RGB color value.</returns>
		</member>
		<member name="M:Unigine.Math.isrgb(Unigine.vec2)">
			<summary>
			Converts sRGB color value to RGB format.
			</summary> 
			<param name="color"> sRGB value to convert. </param> 
			<returns>RGB color value.</returns>
		</member>
		<member name="M:Unigine.Math.isrgb(Unigine.vec3)">
			<summary>
			Converts sRGB color value to RGB format.
			</summary> 
			<param name="color"> sRGB value to convert. </param> 
			<returns>RGB color value.</returns>
		</member>
		<member name="M:Unigine.Math.isrgb(Unigine.vec4)">
			<summary>
			Converts sRGB color value and alpha to RGB format.
			</summary> 
			<param name="color"> sRGB value to convert. </param> 
			<returns>RGB color value.</returns>
		</member>
		<member name="M:Unigine.Math.isrgbColor(Unigine.vec4)">
			<summary>
			Converts sRGB color value to RGB format without converting alpha.
			</summary> 
			<param name="color"> sRGB value to convert. </param> 
			<returns>RGB color value.</returns>
		</member>
		<member name="M:Unigine.Math.itod(int)">
			<summary>
			Converts an integer value to a double value.
			</summary> 
			<param name="v"> Integer value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.itof(int)">
			<summary>
			Converts an integer value to a float value.
			</summary> 
			<param name="v"> Integer value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.itos(int)">
			<summary>
			Converts an integer value to a scalar value (float or double, depending on the precision).
			</summary> 
			<param name="v"> Integer value. </param> 
			<returns>Scalar value (float or double, depending on the precision).</returns>
		</member>
		<member name="M:Unigine.Math.length(Unigine.vec2)">
			<summary>
			Calculates the length of a given vector.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Vector length.</returns>
		</member>
		<member name="M:Unigine.Math.length(Unigine.dvec2)">
			<summary>
			Calculates the length of a given vector.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Vector length.</returns>
		</member>
		<member name="M:Unigine.Math.length(Unigine.vec3)">
			<summary>
			Calculates the length of a given vector.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Vector length.</returns>
		</member>
		<member name="M:Unigine.Math.length(Unigine.dvec3)">
			<summary>
			Calculates the length of a given vector.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Vector length.</returns>
		</member>
		<member name="M:Unigine.Math.length(Unigine.vec4)">
			<summary>
			Calculates the length of a given vector.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Vector length.</returns>
		</member>
		<member name="M:Unigine.Math.length(Unigine.dvec4)">
			<summary>
			Calculates the length of a given vector.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Vector length.</returns>
		</member>
		<member name="M:Unigine.Math.length2(Unigine.vec2)">
			<summary>
			Calculates the squared length of a given vector. This method is much faster than length() - the calculation is basically the same only without the slow Sqrt call. If you are using lengths simply to compare distances, then it is faster to compare squared lengths against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Squared length of the vector (X2 + Y2 + Z2).</returns>
		</member>
		<member name="M:Unigine.Math.length2(Unigine.dvec2)">
			<summary>
			Calculates the squared length of a given vector. This method is much faster than length() - the calculation is basically the same only without the slow Sqrt call. If you are using lengths simply to compare distances, then it is faster to compare squared lengths against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Squared length of the vector (X2 + Y2 + Z2).</returns>
		</member>
		<member name="M:Unigine.Math.length2(Unigine.ivec2)">
			<summary>
			Calculates the squared length of a given vector. If you are using lengths simply to compare distances, then it is faster to compare squared lengths against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Squared length of the vector (X2 + Y2 + Z2).</returns>
		</member>
		<member name="M:Unigine.Math.length2(Unigine.vec3)">
			<summary>
			Calculates the squared length of a given vector. This method is much faster than length() - the calculation is basically the same only without the slow Sqrt call. If you are using lengths simply to compare distances, then it is faster to compare squared lengths against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Squared length of the vector (X2 + Y2 + Z2).</returns>
		</member>
		<member name="M:Unigine.Math.length2(Unigine.dvec3)">
			<summary>
			Calculates the squared length of a given vector. This method is much faster than length() - the calculation is basically the same only without the slow Sqrt call. If you are using lengths simply to compare distances, then it is faster to compare squared lengths against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Squared length of the vector (X2 + Y2 + Z2).</returns>
		</member>
		<member name="M:Unigine.Math.length2(Unigine.ivec3)">
			<summary>
			Calculates the squared length of a given vector. If you are using lengths simply to compare distances, then it is faster to compare squared lengths against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Squared length of the vector (X2 + Y2 + Z2).</returns>
		</member>
		<member name="M:Unigine.Math.length2(Unigine.vec4)">
			<summary>
			Calculates the squared length of a given vector. This method is much faster than length() - the calculation is basically the same only without the slow Sqrt call. If you are using lengths simply to compare distances, then it is faster to compare squared lengths against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Squared length of the vector (X2 + Y2 + Z2).</returns>
		</member>
		<member name="M:Unigine.Math.length2(Unigine.dvec4)">
			<summary>
			Calculates the squared length of a given vector. This method is much faster than length() - the calculation is basically the same only without the slow Sqrt call. If you are using lengths simply to compare distances, then it is faster to compare squared lengths against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Squared length of the vector (X2 + Y2 + Z2).</returns>
		</member>
		<member name="M:Unigine.Math.length2(Unigine.ivec4)">
			<summary>
			Calculates the squared length of a given vector. If you are using lengths simply to compare distances, then it is faster to compare squared lengths against the squares of distances as the comparison gives the same result.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Squared length of the vector (X2 + Y2 + Z2).</returns>
		</member>
		<member name="M:Unigine.Math.lerp(float,float,float)">
			<summary>
			Returns the interpolated value according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First float value. </param>
			<param name="v1"> Second float value. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated value.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(double,double,double)">
			<summary>
			Returns the interpolated value according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First double value. </param>
			<param name="v1"> Second double value. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated value.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(int,int,int)">
			<summary>
			Returns the interpolated value according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First int value. </param>
			<param name="v1"> Second int value. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated value.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(longlong,longlong,longlong)">
			<summary>
			Returns the interpolated value according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First long long value. </param>
			<param name="v1"> Second long long value. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated value.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.vec2,Unigine.vec2,float)">
			<summary>
			Returns the interpolated vector according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated vector.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.vec3,Unigine.vec3,float)">
			<summary>
			Returns the interpolated vector according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated vector.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.vec4,Unigine.vec4,float)">
			<summary>
			Returns the interpolated vector according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated vector.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.dvec2,Unigine.dvec2,double)">
			<summary>
			Returns the interpolated vector according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated vector.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.dvec3,Unigine.dvec3,double)">
			<summary>
			Returns the interpolated vector according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated vector.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.dvec4,Unigine.dvec4,double)">
			<summary>
			Returns the interpolated vector according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated vector.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.ivec2,Unigine.ivec2,int)">
			<summary>
			Returns the interpolated vector according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated vector.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.ivec3,Unigine.ivec3,int)">
			<summary>
			Returns the interpolated vector according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated vector.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.ivec4,Unigine.ivec4,int)">
			<summary>
			Returns the interpolated vector according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated vector.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.mat4,Unigine.mat4,Unigine.mat4,float)">
			<summary>
			Returns the interpolated matrix according to the following formula: m0 + (m					1 - m					0) * k				.
			</summary> 
			<param name="ret"> The matrix to store the result. </param>
			<param name="m0"> The value of the first matrix. </param>
			<param name="m1"> The value of the second matrix. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>The resulting matrix.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.dmat4,Unigine.dmat4,Unigine.dmat4,double)">
			<summary>
			Returns the interpolated matrix according to the following formula: m0 + (m					1 - m					0) * k				.
			</summary> 
			<param name="ret"> The matrix to store the result. </param>
			<param name="m0"> The value of the first matrix. </param>
			<param name="m1"> The value of the second matrix. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>The resulting matrix.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Unigine.dmat4,Unigine.dmat4,double)">
			<summary>
			Returns the interpolated matrix according to the following formula: m0 + (m					1 - m					0) * k				.
			</summary> 
			<param name="m0"> The value of the first matrix. </param>
			<param name="m1"> The value of the second matrix. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>The resulting matrix.</returns>
		</member>
		<member name="M:Unigine.Math.lerp(Type,Type,Type)">
			<summary>
			Returns the interpolated value according to the following formula: v0 + (v					1 - v					0) * k				.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated value.</returns>
		</member>
		<member name="M:Unigine.Math.lerpOne(float,float)">
			<summary>
			Performs the interpolation: v0 * (1.0f - k) + k.
			</summary> 
			<param name="v0"> Value for interpolation. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated value.</returns>
		</member>
		<member name="M:Unigine.Math.lerpOne(double,double)">
			<summary>
			Performs the interpolation: v0 * (1.0f - k) + k.
			</summary> 
			<param name="v0"> Value for interpolation. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated value.</returns>
		</member>
		<member name="M:Unigine.Math.lerpZero(float,float)">
			<summary>
			Performs the interpolation of the following type: v0 * (1.0f - k).
			</summary> 
			<param name="v0"> Value for interpolation. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated value.</returns>
		</member>
		<member name="M:Unigine.Math.lerpZero(double,double)">
			<summary>
			Performs the interpolation of the following type: v0 * (1.0f - k).
			</summary> 
			<param name="v0"> Value for interpolation. </param>
			<param name="k"> Interpolation coefficient. </param> 
			<returns>Interpolated value.</returns>
		</member>
		<member name="M:Unigine.Math.lerp3(Unigine.vec4,Unigine.vec4,Unigine.vec4,float)">
			<summary>
			Performs linear interpolation between three vectors.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param>
			<param name="v2"> Third vector. </param>
			<param name="k"> Interpolation coefficient in the range [0.0f, 1.0f]. </param> 
			<returns>Interpolated vector.</returns>
		</member>
		<member name="M:Unigine.Math.ltof(longlong)">
			<summary>
			Converts a long value to a float value.
			</summary> 
			<param name="v"> Long value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.ltod(longlong)">
			<summary>
			Converts a long value to a double value.
			</summary> 
			<param name="v"> Long value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.max(float,float)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(double,double)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(int,int)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(longlong,longlong)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(Unigine.vec2,Unigine.vec2)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(Unigine.vec3,Unigine.vec3)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(Unigine.vec4,Unigine.vec4)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(Unigine.ivec2,Unigine.ivec2)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(Unigine.ivec4,Unigine.ivec4)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(bvec4,bvec4)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.max(Type,Type)">
			<summary>
			Compares the arguments and returns the maximum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Maximum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(float,float)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(double,double)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(int,int)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(longlong,longlong)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(Unigine.vec2,Unigine.vec2)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(Unigine.vec3,Unigine.vec3)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(Unigine.vec4,Unigine.vec4)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(Unigine.ivec2,Unigine.ivec2)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(Unigine.ivec4,Unigine.ivec4)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(bvec4,bvec4)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.min(Type,Type)">
			<summary>
			Compares the arguments and returns the minimum value.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
			<returns>Minimum value.</returns>
		</member>
		<member name="M:Unigine.Math.mul3(float*UNIGINE_RESTRICT,float*UNIGINE_RESTRICT,float)">
			<summary>
			Returns the result of a componentwise multiplication of a 3-component vector with a scalar value.
			</summary> 
			<param name="ret"> Array to store the return value. </param>
			<param name="v0"> 3-component vector. </param>
			<param name="v1"> Scalar value. </param> 
			<returns>Pointer to the array that stores the return value.</returns>
		</member>
		<member name="M:Unigine.Math.normalize(Unigine.quat)">
			<summary>
			Normalizes a quaternion, makes its magnitude equal to 1. When normalized, a quaternion keeps the same oreintation but its magnitude is equal to 1.
			</summary> 
			<param name="v"> A quaternion to be normalized. </param> 
			<returns>Normalized quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.normalize(Unigine.vec2)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1.
			</summary> 
			<param name="v"> A two-component vec2 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalize(Unigine.vec3)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1.
			</summary> 
			<param name="v"> A three-component vec3 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalize(Unigine.vec4)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1.
			</summary> 
			<param name="v"> A four-component vec4 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalize(Unigine.dvec2)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1.
			</summary> 
			<param name="v"> A two-component dvec2 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalize(Unigine.dvec3)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1.
			</summary> 
			<param name="v"> A three-component dvec3 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalize(Unigine.dvec4)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1.
			</summary> 
			<param name="v"> A four-component dvec4 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalizeAngle(float)">
			<summary>
			Normalizes an input angle to the range (−180, 180).
			</summary> 
			<param name="angle"> Angle value, in degrees. </param> 
			<returns>Normalized angle value, in degrees.</returns>
		</member>
		<member name="M:Unigine.Math.normalizeValid(Unigine.quat)">
			<summary>
			Normalizes a quaternion, makes its magnitude equal to 1. When normalized, a quaternion keeps the same oreintation but its magnitude is equal to 1. Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary> 
			<param name="v"> A quaternion to be normalized. </param> 
			<returns>Normalized quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.normalizeValid(Unigine.vec2)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1. Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary> 
			<param name="v"> A two-component vec2 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalizeValid(Unigine.vec3)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1. Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary> 
			<param name="v"> A three-component vec3 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalizeValid(Unigine.vec4)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1. Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary> 
			<param name="v"> A four-component vec4 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalizeValid(Unigine.dvec2)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1. Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary> 
			<param name="v"> A two-component dvec2 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalizeValid(Unigine.dvec3)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1. Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary> 
			<param name="v"> A three-component dvec3 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalizeValid(Unigine.dvec4)">
			<summary>
			Normalizes a vector, makes its magnitude equal to 1. When normalized, a vector keeps the same direction but its length is equal to 1. Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary> 
			<param name="v"> A four-component dvec4 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalize2(float)">
			<summary>
			Normalizes a 2-component vector, making it a unit vector (a vector with a length of 1) while preserving its direction.
			</summary> 
			<param name="v"> Pointer to the vector. </param> 
		</member>
		<member name="M:Unigine.Math.normalize3(float)">
			<summary>
			Normalizes a 3-component vector, making it a unit vector (a vector with a length of 1) while preserving its direction.
			</summary> 
			<param name="v"> Pointer to the vector. </param> 
		</member>
		<member name="M:Unigine.Math.normalize3(Unigine.vec4)">
			<summary>
			Normalizes a vector making its magnitude equal to 1. The vector is normalized as if it has only the first three components (the fourth one is ignored).
			</summary> 
			<param name="v"> A four-component vec4 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalize3(Unigine.dvec4)">
			<summary>
			Normalizes a vector making its magnitude equal to 1. The vector is normalized as if it has only the first three components (the fourth one is ignored).
			</summary> 
			<param name="v"> A four-component dvec4 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalizeValid3(Unigine.vec4)">
			<summary>
			Normalizes a vector making its magnitude equal to 1. The vector is normalized as if it has only the first three components (the fourth one is ignored). Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary> 
			<param name="v"> A four-component vec4 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.normalizeValid3(Unigine.dvec4)">
			<summary>
			Normalizes a vector making its magnitude equal to 1. The vector is normalized as if it has only the first three components (the fourth one is ignored). Check for the zero vector is performed: if the argument is a zero vector, then a zero vector is returned.
			</summary> 
			<param name="v"> A four-component dvec4 vector to be normalized. </param> 
			<returns>Normalized vector.</returns>
		</member>
		<member name="M:Unigine.Math.npot(int)">
			<summary>
			Rounds up to the nearest power of two value.
			</summary> 
			<param name="arg"> Argument. </param> 
			<returns>The nearest upper power of 2 number.</returns>
		</member>
		<member name="M:Unigine.Math.ispot(int)">
			<summary>
			Checks if the argument value is a power of two by using bitwise operations. Doesn't check the zero value.
			</summary> 
			<param name="v"> Argument value. </param> 
			<returns>1 if the value is a power of two; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.isqrt(int)">
			<summary>
			Returns the integer square root of the argument value by using bitwise operations.
			</summary> 
			<param name="v"> Argument value. </param> 
			<returns>Integer square root of the value.</returns>
		</member>
		<member name="M:Unigine.Math.overlay(float,float,float)">
			<summary>
			Performs overlay A over B with blending coefficient.
			</summary> 
			<param name="x"> Blending coefficient. </param> 
			<returns>Resulting value.</returns>
		</member>
		<member name="M:Unigine.Math.rcp(float)">
			<summary>
			Returns the reciprocal of the specified argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Reciprocal of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.rcp(double)">
			<summary>
			Returns the reciprocal of the specified argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Reciprocal of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.rcpFast(float)">
			<summary>
			Returns the approximated (quicker calculated) reciprocal of the specified argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Reciprocal of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.rerange(float,float,float,float,float)">
			<summary>
			Returns the value that corresponds to the input value remapped within the limits of the output range.
			</summary> 
			<param name="in"> Input value. </param>
			<param name="in_range_min"> Minimum value of the input range. </param>
			<param name="in_range_max"> Maximum value of the input range. </param>
			<param name="out_range_min"> Minimum value of the output range. </param>
			<param name="out_range_max"> Maximum value of the output range. </param> 
			<returns>Output value that corresponds to the input value remapped in the output range.</returns>
		</member>
		<member name="M:Unigine.Math.rerange(double,double,double,double,double)">
			<summary>
			Returns the value that corresponds to the input value remapped within the limits of the output range.
			</summary> 
			<param name="in"> Input value. </param>
			<param name="in_range_min"> Minimum value of the input range. </param>
			<param name="in_range_max"> Maximum value of the input range. </param>
			<param name="out_range_min"> Minimum value of the output range. </param>
			<param name="out_range_max"> Maximum value of the output range. </param> 
			<returns>Output value that corresponds to the input value remapped in the output range.</returns>
		</member>
		<member name="M:Unigine.Math.reverseBits(unsignedint)">
			<summary>
			Returns the value with the reversed order of the bits.
			</summary> 
			<param name="value"> Value to be converted. </param> 
			<returns>Resulting value.</returns>
		</member>
		<member name="M:Unigine.Math.rotate(Unigine.quat)">
			<summary>
			Returns a resulting matrix for rotation by the specified angle around the axis specified as a quaternion/vector/vector components.
			</summary> 
			<param name="q"> Quaternion. </param> 
			<returns>Resulting rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotate3(Unigine.quat)">
			<summary>
			Returns a resulting matrix for rotation by the specified angle around the axis specified as a quaternion/vector/vector components. The resulting matrix size for this method is 3 x 3.
			</summary> 
			<param name="q"> Quaternion. </param> 
			<returns>Resulting rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.round(double)">
			<summary>
			Rounds an argument to the nearest integer value.				In halfway cases, when an argument has a fractional part of exactly 0.5, the function rounds away from zero to the integer with larger magnitude.											3.5	 -&gt; 4						- 3.5	 -&gt;	- 4
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Nearest integer value to the argument.</returns>
		</member>
		<member name="M:Unigine.Math.round(float)">
			<summary>
			Rounds an argument to the nearest integer value.				In halfway cases, when an argument has a fractional part of exactly 0.5, the function rounds away from zero to the integer with larger magnitude.											3.5	 -&gt; 4						- 3.5	 -&gt;	- 4
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Nearest integer value to the argument.</returns>
		</member>
		<member name="M:Unigine.Math.roundFast(float)">
			<summary>
			Rounds an argument to the nearest integer value by adding 0.5 to the argument and discarding the decimal part.				This method works for positive numbers but has limitations for negative numbers because it doesn't handle rounding in the traditional way for negative values.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Nearest integer value to the argument.</returns>
		</member>
		<member name="M:Unigine.Math.saturate(float)">
			<summary>
			Clamps the value within the range of 0.0 to 1.0.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Argument value clamped within the range of 0.0 to 1.0.</returns>
		</member>
		<member name="M:Unigine.Math.saturate(double)">
			<summary>
			Clamps the value within the range of 0.0 to 1.0.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Argument value clamped within the range of 0.0 to 1.0.</returns>
		</member>
		<member name="M:Unigine.Math.saturate(Unigine.dvec2)">
			<summary>
			Clamps the values of vector components within the range of 0.0 to 1.0.
			</summary>  
		</member>
		<member name="M:Unigine.Math.saturate(Unigine.vec2)">
			<summary>
			Clamps the values of vector components within the range of 0.0 to 1.0.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Vector with components clamped within the range of 0.0 to 1.0.</returns>
		</member>
		<member name="M:Unigine.Math.saturate(Unigine.dvec3)">
			<summary>
			Clamps the values of vector components within the range of 0.0 to 1.0.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Vector with components clamped within the range of 0.0 to 1.0.</returns>
		</member>
		<member name="M:Unigine.Math.saturate(Unigine.vec3)">
			<summary>
			Clamps the values of vector components within the range of 0.0 to 1.0.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Vector with components clamped within the range of 0.0 to 1.0.</returns>
		</member>
		<member name="M:Unigine.Math.saturate(Unigine.dvec4)">
			<summary>
			Clamps the values of vector components within the range of 0.0 to 1.0.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Vector with components clamped within the range of 0.0 to 1.0.</returns>
		</member>
		<member name="M:Unigine.Math.saturate(Unigine.vec4)">
			<summary>
			Clamps the values of vector components within the range of 0.0 to 1.0.
			</summary> 
			<param name="v"> Vector. </param> 
			<returns>Vector with components clamped within the range of 0.0 to 1.0.</returns>
		</member>
		<member name="M:Unigine.Math.sign(float)">
			<summary>
			Returns the sign of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Sign of the argument. 1.0 if v &gt;= 0.0 ; -1.0 if v &lt; 0.0.</returns>
		</member>
		<member name="M:Unigine.Math.sign(double)">
			<summary>
			Returns the sign of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Sign of the argument. 1.0 if v &gt;= 0.0 ; -1.0 if v &lt; 0.0.</returns>
		</member>
		<member name="M:Unigine.Math.signMask(int)">
			<summary>
			Returns the sign of the argument value.
			</summary> 
			<param name="v"> Value. </param> 
			<returns>0 if the value is positive or zero, -1, if the value is negative.</returns>
		</member>
		<member name="M:Unigine.Math.slerp(Unigine.quat,Unigine.quat,float)">
			<summary>
			Spherical interpolation between two given quaternions.
			</summary> 
			<param name="q0"> The value of the first quaternion. </param>
			<param name="q1"> The value of the second quaternion. </param>
			<param name="k"> The current position (from 0 to 1). </param> 
			<returns>Resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.smoothstep(float)">
			<summary>
							Returns a smooth Hermite interpolation between 0 and 1, if x is in the range [0, 1].																	It is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.
			</summary> 
			<param name="x"> Value to be interpolated. </param> 
			<returns>One of the following values:0 if x is less than 0;1 if x is greater than 1;interpolated value between 0 and 1 if x is in the range [0, 1].</returns>
		</member>
		<member name="M:Unigine.Math.smoothstep(double)">
			<summary>
							Returns a smooth Hermite interpolation between 0 and 1, if x is in the range [0, 1].																	It is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.
			</summary> 
			<param name="x"> Value to be interpolated. </param> 
			<returns>One of the following values:0 if x is less than 0;1 if x is greater than 1;interpolated value between 0 and 1 if x is in the range [0, 1].</returns>
		</member>
		<member name="M:Unigine.Math.smoothstep(float,float,float)">
			<summary>
							Returns a smooth Hermite interpolation between 0 and 1, if x is in the range [edge0, edge1].																	It is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.
			</summary> 
			<param name="edge0"> Left edge value. </param>
			<param name="edge1"> Right edge value. </param>
			<param name="x"> Value to be interpolated. </param> 
			<returns>One of the following values:0 if x is less than edge0;1 if x is greater than edge1;interpolated value between 0 and 1 if x is in the range [edge0, edge1].</returns>
		</member>
		<member name="M:Unigine.Math.smoothstep(double,double,double)">
			<summary>
							Returns a smooth Hermite interpolation between 0 and 1, if x is in the range [edge0, edge1].																	It is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.
			</summary> 
			<param name="edge0"> Left edge value. </param>
			<param name="edge1"> Right edge value. </param>
			<param name="x"> Value to be interpolated. </param> 
			<returns>One of the following values:0 if x is less than edge0;1 if x is greater than edge1;interpolated value between 0 and 1 if x is in the range [edge0, edge1].</returns>
		</member>
		<member name="M:Unigine.Math.smootherstep(float)">
			<summary>
							Returns a smooth interpolation between 0 and 1 using a fifth-order polynomial function, if x is in the range [0, 1].																	It is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.
			</summary> 
			<param name="x"> Value to be interpolated. </param> 
			<returns>One of the following values:0 if x is less than 0;1 if x is greater than 1;interpolated value between 0 and 1 if x is in the range [0, 1].</returns>
		</member>
		<member name="M:Unigine.Math.smootherstep(double)">
			<summary>
							Returns a smooth interpolation between 0 and 1 using a fifth-order polynomial function, if x is in the range [0, 1].																	It is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.
			</summary> 
			<param name="x"> Value to be interpolated. </param> 
			<returns>One of the following values:0 if x is less than 0;1 if x is greater than 1;interpolated value between 0 and 1 if x is in the range [0, 1].</returns>
		</member>
		<member name="M:Unigine.Math.smootherstep(float,float,float)">
			<summary>
							Returns a smooth interpolation between 0 and 1 using a fifth-order polynomial function, if x is in the range [edge0, edge1].																	It is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.
			</summary> 
			<param name="edge0"> Left edge value. </param>
			<param name="edge1"> Right edge value. </param>
			<param name="x"> Value to be interpolated. </param> 
			<returns>One of the following values:0 if x is less than edge0;1 if x is greater than edge1;interpolated value between 0 and 1 if x is in the range [edge0, edge1].</returns>
		</member>
		<member name="M:Unigine.Math.smootherstep(double,double,double)">
			<summary>
							Returns a smooth interpolation between 0 and 1 using a fifth-order polynomial function, if x is in the range [edge0, edge1].																	It is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.
			</summary> 
			<param name="edge0"> Left edge value. </param>
			<param name="edge1"> Right edge value. </param>
			<param name="x"> Value to be interpolated. </param> 
			<returns>One of the following values:0 if x is less than edge0;1 if x is greater than edge1;interpolated value between 0 and 1 if x is in the range [edge0, edge1].</returns>
		</member>
		<member name="M:Unigine.Math.srgb(float)">
			<summary>
			Converts RGB color value to sRGB format.
			</summary> 
			<param name="x"> Value to convert. </param> 
			<returns>sRGB color value.</returns>
		</member>
		<member name="M:Unigine.Math.srgb(Unigine.vec2)">
			<summary>
			Converts RGB color value to sRGB format.
			</summary> 
			<param name="color"> Value to convert. </param> 
			<returns>sRGB color value.</returns>
		</member>
		<member name="M:Unigine.Math.srgb(Unigine.vec3)">
			<summary>
			Converts RGB color value to sRGB format.
			</summary> 
			<param name="color"> Value to convert. </param> 
			<returns>sRGB color value.</returns>
		</member>
		<member name="M:Unigine.Math.srgb(Unigine.vec4)">
			<summary>
			Converts RGB color value and alpha to sRGB format.
			</summary> 
			<param name="color"> Value to convert. </param> 
			<returns>sRGB color value.</returns>
		</member>
		<member name="M:Unigine.Math.srgbColor(Unigine.vec4)">
			<summary>
			Converts RGB color value to sRGB format without converting alpha.
			</summary> 
			<param name="color"> Value to convert. </param> 
			<returns>sRGB color value.</returns>
		</member>
		<member name="M:Unigine.Math.step(float,float)">
			<summary>
			Checks whether the value a is greater than or equal to b.
			</summary> 
			<param name="a"> Value. </param>
			<param name="b"> Value. </param> 
			<returns>true if a is greater than or equal to b, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Math.stoi(Scalar)">
			<summary>
			Converts a scalar value (float or double, depending on the precision) to an integer value.
			</summary> 
			<param name="v"> Scalar value (float or double, depending on the precision). </param> 
			<returns>Integer value.</returns>
		</member>
		<member name="M:Unigine.Math.sub3(float*UNIGINE_RESTRICT,float*UNIGINE_RESTRICT,float*UNIGINE_RESTRICT)">
			<summary>
			Returns the result of a componentwise subtraction of three components of vectors by storing it in the array.
			</summary> 
			<param name="ret"> Array to store the return value. </param>
			<param name="v0"> Pointer to vector. </param>
			<param name="v1"> Pointer to vector. </param> 
			<returns>Pointer to the array that stores the return value.</returns>
		</member>
		<member name="M:Unigine.Math.swap(Type,Type)">
			<summary>
			Swaps two values.
			</summary> 
			<param name="v0"> First value. </param>
			<param name="v1"> Second value. </param> 
		</member>
		<member name="M:Unigine.Math.swap(Type,Type,int)">
			<summary>
			Swaps two arrays.
			</summary> 
			<param name="v0"> The first array. </param>
			<param name="v1"> The second array. </param>
			<param name="size"> The array size. </param> 
		</member>
		<member name="M:Unigine.Math.floatToIntBits(float)">
			<summary>
			Returns an integer corresponding to the bits of the given value.
			</summary> 
			<param name="value"> Value to be converted. </param> 
			<returns>Resulting value.</returns>
		</member>
		<member name="M:Unigine.Math.floatToUIntBits(float)">
			<summary>
			Returns an unsigned integer corresponding to the bits of the given value.
			</summary> 
			<param name="value"> Value to be converted. </param> 
			<returns>Resulting value.</returns>
		</member>
		<member name="M:Unigine.Math.intBitsToFloat(int)">
			<summary>
			Returns the float corresponding to the given bits.
			</summary> 
			<param name="value"> Value to be converted. </param> 
			<returns>Resulting value.</returns>
		</member>
		<member name="M:Unigine.Math.intBitsToFloat(unsignedint)">
			<summary>
			Returns the float corresponding to the given bits.
			</summary> 
			<param name="value"> Value to be converted. </param> 
			<returns>Resulting value.</returns>
		</member>
		<member name="M:Unigine.Math.floatToLongBits(double)">
			<summary>
			Returns a long long value corresponding to the given value.
			</summary> 
			<param name="value"> Value to be converted. </param> 
			<returns>Resulting value.</returns>
		</member>
		<member name="M:Unigine.Math.floatToULongBits(double)">
			<summary>
			Returns a long long value corresponding to the given value.
			</summary> 
			<param name="value"> Value to be converted. </param> 
			<returns>Resulting value.</returns>
		</member>
		<member name="M:Unigine.Math.longBitsToFloat(longlong)">
			<summary>
			Returns the double corresponding to the given bits.
			</summary> 
			<param name="value"> Value to be converted. </param> 
			<returns>Resulting value.</returns>
		</member>
		<member name="M:Unigine.Math.longBitsToFloat(unsignedlonglong)">
			<summary>
			Returns the double corresponding to the given bits.
			</summary> 
			<param name="value"> Value to be converted. </param> 
			<returns>Resulting value.</returns>
		</member>
		<member name="M:Unigine.Math.doubleIntToLong(unsignedint,unsignedint)">
			<summary>
			Returns a conversion of two unsigned integer values to a unsigned long long value.
			</summary> 
			<param name="a1"> Source value. </param>
			<param name="a2"> Source value. </param> 
			<returns>Resulting value.</returns>
		</member>
		<member name="M:Unigine.Math.toFloat(double)">
			<summary>
			Converts a double value to a float value.
			</summary> 
			<param name="v"> Double value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.toFloat(longdouble)">
			<summary>
			Converts a long double value to a float value.
			</summary> 
			<param name="v"> Long double value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.toFloat(char)">
			<summary>
			Converts a character value to a float value.
			</summary> 
			<param name="v"> Char value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.toFloat(int)">
			<summary>
			Converts an integer value to a float value.
			</summary> 
			<param name="v"> Integer value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.toFloat(longlong)">
			<summary>
			Converts a long value to a float value.
			</summary> 
			<param name="v"> Long value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.toFloat(unsignedint)">
			<summary>
			Converts an unsigned int value to a float value.
			</summary> 
			<param name="v"> Unsigned int value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.toFloat(unsignedchar)">
			<summary>
			Converts an unsigned char value to a float value.
			</summary> 
			<param name="v"> Unsigned char value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.toFloat(bool)">
			<summary>
			Converts a boolean value to a float value.
			</summary> 
			<param name="v"> Boolean value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.toFloat(half)">
			<summary>
			Converts a half value to a float value.
			</summary> 
			<param name="v"> Half value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.toFloat(String)">
			<summary>
			Converts a const String value to a float value.
			</summary> 
			<param name="v"> const String value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.toFloat(char)">
			<summary>
			Converts a const char pointer value to a float value.
			</summary> 
			<param name="v"> const char ptr value. </param> 
			<returns>Float value.</returns>
		</member>
		<member name="M:Unigine.Math.toHalf(float)">
			<summary>
			Converts a float value to a half value.
			</summary> 
			<param name="v"> Float value. </param> 
			<returns>Half value.</returns>
		</member>
		<member name="M:Unigine.Math.toHalf(double)">
			<summary>
			Converts a double value to a half value.
			</summary> 
			<param name="v"> Double value. </param> 
			<returns>Half value.</returns>
		</member>
		<member name="M:Unigine.Math.toHalf(longdouble)">
			<summary>
			Converts a long double value to a half value.
			</summary> 
			<param name="v"> Long double value. </param> 
			<returns>Half value.</returns>
		</member>
		<member name="M:Unigine.Math.toHalf(char)">
			<summary>
			Converts a char value to a half value.
			</summary> 
			<param name="v"> Char value. </param> 
			<returns>Half value.</returns>
		</member>
		<member name="M:Unigine.Math.toHalf(int)">
			<summary>
			Converts an int value to a half value.
			</summary> 
			<param name="v"> Int value. </param> 
			<returns>Half value.</returns>
		</member>
		<member name="M:Unigine.Math.toHalf(longlong)">
			<summary>
			Converts a long long value to a half value.
			</summary> 
			<param name="v"> Long long value. </param> 
			<returns>Half value.</returns>
		</member>
		<member name="M:Unigine.Math.toHalf(unsignedint)">
			<summary>
			Converts an unsigned int value to a half value.
			</summary> 
			<param name="v"> Unsigned int value. </param> 
			<returns>Half value.</returns>
		</member>
		<member name="M:Unigine.Math.toHalf(unsignedchar)">
			<summary>
			Converts an unsigned char value to a half value.
			</summary> 
			<param name="v"> Unsigned char value. </param> 
			<returns>Half value.</returns>
		</member>
		<member name="M:Unigine.Math.toHalf(bool)">
			<summary>
			Converts a bool value to a half value.
			</summary> 
			<param name="v"> Bool value. </param> 
			<returns>Half value.</returns>
		</member>
		<member name="M:Unigine.Math.toHalf(String)">
			<summary>
			Converts a const String value to a half value.
			</summary> 
			<param name="v"> Const String value. </param> 
			<returns>Half value.</returns>
		</member>
		<member name="M:Unigine.Math.toHalf(char)">
			<summary>
			Converts a const char pointer value to a half value.
			</summary> 
			<param name="v"> Const char ptr value. </param> 
			<returns>Half value.</returns>
		</member>
		<member name="M:Unigine.Math.toDouble(float)">
			<summary>
			Converts a float value to a double value.
			</summary> 
			<param name="value"> Float value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.toDouble(char)">
			<summary>
			Converts a character value to a double value.
			</summary> 
			<param name="value"> Char value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.toDouble(int)">
			<summary>
			Converts an integer value to a double value.
			</summary> 
			<param name="value"> Integer value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.toDouble(longlong)">
			<summary>
			Converts a long value to a double value.
			</summary> 
			<param name="value"> Long value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.toDouble(bool)">
			<summary>
			Converts a boolean value to a double value.
			</summary> 
			<param name="value"> Boolean value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.toDouble(unsignedint)">
			<summary>
			Converts an unsigned int value to a double value.
			</summary> 
			<param name="v"> Unsigned int value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.toDouble(unsignedchar)">
			<summary>
			Converts an unsigned char value to a double value.
			</summary> 
			<param name="v"> Unsigned char value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.toDouble(half)">
			<summary>
			Converts a half value to a double value.
			</summary> 
			<param name="v"> Half value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.toDouble(String)">
			<summary>
			Converts a const String value to a double value.
			</summary> 
			<param name="v"> const String value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.toDouble(char)">
			<summary>
			Converts a const char pointer value to double value.
			</summary> 
			<param name="v"> const char ptr value. </param> 
			<returns>Double value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(double)">
			<summary>
			Converts a double value to a Scalar value.
			</summary> 
			<param name="value"> Double value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(longdouble)">
			<summary>
			Converts a long double value to a Scalar value.
			</summary> 
			<param name="value"> Long double value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(float)">
			<summary>
			Converts a float value to a Scalar value.
			</summary> 
			<param name="value"> Float value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(char)">
			<summary>
			Converts a char value to a Scalar value.
			</summary> 
			<param name="value"> Char value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(int)">
			<summary>
			Converts an int value to a Scalar value.
			</summary> 
			<param name="value"> Int value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(longlong)">
			<summary>
			Converts a long long value to a Scalar value.
			</summary> 
			<param name="value"> Long long value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(unsignedint)">
			<summary>
			Converts an unsigned int value to a Scalar value.
			</summary> 
			<param name="value"> Unsigned int value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(unsignedchar)">
			<summary>
			Converts an unsigned char value to a Scalar value.
			</summary> 
			<param name="value"> Unsigned char value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(bool)">
			<summary>
			Converts a bool value to a Scalar value.
			</summary> 
			<param name="value"> Bool value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(half)">
			<summary>
			Converts a half value to a Scalar value.
			</summary> 
			<param name="value"> Half value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(String)">
			<summary>
			Converts a const String value to a Scalar value.
			</summary> 
			<param name="value"> Const String value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toScalar(char)">
			<summary>
			Converts a const char value to a Scalar value.
			</summary> 
			<param name="value"> Const char value. </param> 
			<returns>Scalar value.</returns>
		</member>
		<member name="M:Unigine.Math.toInt(float)">
			<summary>
			Converts a float value to an integer value.
			</summary> 
			<param name="value"> Float value. </param> 
			<returns>Integer value.</returns>
		</member>
		<member name="M:Unigine.Math.toInt(double)">
			<summary>
			Converts a double value to an integer value.
			</summary> 
			<param name="value"> Double value. </param> 
			<returns>Integer value.</returns>
		</member>
		<member name="M:Unigine.Math.toInt(char)">
			<summary>
			Converts a character value to an integer value.
			</summary> 
			<param name="value"> Char value. </param> 
			<returns>Integer value.</returns>
		</member>
		<member name="M:Unigine.Math.toInt(longlong)">
			<summary>
			Converts a long value to an integer value.
			</summary> 
			<param name="value"> Long value. </param> 
			<returns>Integer value.</returns>
		</member>
		<member name="M:Unigine.Math.toInt(bool)">
			<summary>
			Converts a boolean value to an integer value.
			</summary> 
			<param name="value"> Boolean value. </param> 
			<returns>Integer value.</returns>
		</member>
		<member name="M:Unigine.Math.toInt(unsignedint)">
			<summary>
			Converts an unsigned int value to an int value.
			</summary> 
			<param name="v"> Unsigned int value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toInt(unsignedchar)">
			<summary>
			Converts an unsigned char value to an int value.
			</summary> 
			<param name="v"> Unsigned char value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toInt(half)">
			<summary>
			Converts a half value to an int value.
			</summary> 
			<param name="v"> Half value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toInt(String)">
			<summary>
			Converts a const String value to an int value.
			</summary> 
			<param name="v"> const String value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toInt(char)">
			<summary>
			Converts a const char pointer value to an int value.
			</summary> 
			<param name="v"> const char ptr value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toUInt(float)">
			<summary>
			Converts a float value to an unsigned int value.
			</summary> 
			<param name="value"> Float value. </param> 
			<returns>Unsigned int value.</returns>
		</member>
		<member name="M:Unigine.Math.toUInt(double)">
			<summary>
			Converts a double value to an unsigned int value.
			</summary> 
			<param name="value"> Double value. </param> 
			<returns>Unsigned int value.</returns>
		</member>
		<member name="M:Unigine.Math.toUInt(char)">
			<summary>
			Converts a char value to an unsigned int value.
			</summary> 
			<param name="value"> Char value. </param> 
			<returns>Unsigned int value.</returns>
		</member>
		<member name="M:Unigine.Math.toUInt(int)">
			<summary>
			Converts an int value to an unsigned int value.
			</summary> 
			<param name="value"> Int value. </param> 
			<returns>Unsigned int value.</returns>
		</member>
		<member name="M:Unigine.Math.toUInt(longlong)">
			<summary>
			Converts a long long value to an unsigned int value.
			</summary> 
			<param name="value"> Long long value. </param> 
			<returns>Unsigned int value.</returns>
		</member>
		<member name="M:Unigine.Math.toUInt(unsignedchar)">
			<summary>
			Converts an unsigned char value to an unsigned int value.
			</summary> 
			<param name="value"> Unsigned char value. </param> 
			<returns>Unsigned int value.</returns>
		</member>
		<member name="M:Unigine.Math.toUInt(bool)">
			<summary>
			Converts a bool value to an unsigned int value.
			</summary> 
			<param name="value"> Bool value. </param> 
			<returns>Unsigned int value.</returns>
		</member>
		<member name="M:Unigine.Math.toUInt(half)">
			<summary>
			Converts a half value to an unsigned int value.
			</summary> 
			<param name="value"> Half value. </param> 
			<returns>Unsigned int value.</returns>
		</member>
		<member name="M:Unigine.Math.toUInt(String)">
			<summary>
			Converts a const String value to an unsigned int value.
			</summary> 
			<param name="value"> Const String value. </param> 
			<returns>Unsigned int value.</returns>
		</member>
		<member name="M:Unigine.Math.toUInt(char)">
			<summary>
			Converts a const char pointer value to an unsigned int value.
			</summary> 
			<param name="value"> Const char ptr value. </param> 
			<returns>Unsigned int value.</returns>
		</member>
		<member name="M:Unigine.Math.toLong(int)">
			<summary>
			Converts an integer value to a long value.
			</summary> 
			<param name="value"> Integer value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.toLong(float)">
			<summary>
			Converts a float value to a long value.
			</summary> 
			<param name="value"> Float value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.toLong(double)">
			<summary>
			Converts a double value to a long value.
			</summary> 
			<param name="value"> Double value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.toLong(char)">
			<summary>
			Converts a character value to a long value.
			</summary> 
			<param name="value"> Char value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.toLong(bool)">
			<summary>
			Converts a boolean value to a long value.
			</summary> 
			<param name="value"> Boolean value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.toLong(unsignedint)">
			<summary>
			Converts an unsigned int value to a long value.
			</summary> 
			<param name="v"> Unsigned int value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toLong(unsignedchar)">
			<summary>
			Converts an unsigned char value to a long value.
			</summary> 
			<param name="v"> Unsigned char value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toLong(half)">
			<summary>
			Converts a half value to a long value.
			</summary> 
			<param name="v"> Half value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toLong(String)">
			<summary>
			Converts a const String value to a long value.
			</summary> 
			<param name="v"> const String value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toLong(char)">
			<summary>
			Converts a const char pointer value to a long value.
			</summary> 
			<param name="v"> const char ptr value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toULong(int)">
			<summary>
			Converts an integer value to an unsigned long value.
			</summary> 
			<param name="value"> Integer value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.toULong(float)">
			<summary>
			Converts a float value to an unsigned long value.
			</summary> 
			<param name="value"> Float value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.toULong(double)">
			<summary>
			Converts a double value to an unsigned long value.
			</summary> 
			<param name="value"> Double value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.toULong(char)">
			<summary>
			Converts a character value to an unsigned long value.
			</summary> 
			<param name="value"> Char value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.toULong(bool)">
			<summary>
			Converts a boolean value to an unsigned long value.
			</summary> 
			<param name="value"> Boolean value. </param> 
			<returns>Long value.</returns>
		</member>
		<member name="M:Unigine.Math.toULong(unsignedint)">
			<summary>
			Converts an unsigned int value to an unsigned long value.
			</summary> 
			<param name="v"> Unsigned int value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toULong(unsignedchar)">
			<summary>
			Converts an unsigned char value to an unsigned long value.
			</summary> 
			<param name="v"> Unsigned char value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toULong(half)">
			<summary>
			Converts a half value to an unsigned long value.
			</summary> 
			<param name="v"> Half value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toULong(String)">
			<summary>
			Converts a const String value to an unsigned long value.
			</summary> 
			<param name="v"> const String value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toULong(char)">
			<summary>
			Converts a const char pointer value to an unsigned long value.
			</summary> 
			<param name="v"> const char ptr value. </param> 
			<returns>Int value.</returns>
		</member>
		<member name="M:Unigine.Math.toChar(float)">
			<summary>
			Converts a float value to a character value.
			</summary> 
			<param name="value"> Float value. </param> 
			<returns>Char value.</returns>
		</member>
		<member name="M:Unigine.Math.toChar(double)">
			<summary>
			Converts a double value to a character value.
			</summary> 
			<param name="value"> Double value. </param> 
			<returns>Char value.</returns>
		</member>
		<member name="M:Unigine.Math.toChar(int)">
			<summary>
			Converts an integer value to a character value.
			</summary> 
			<param name="value"> Integer value. </param> 
			<returns>Char value.</returns>
		</member>
		<member name="M:Unigine.Math.toChar(longlong)">
			<summary>
			Converts a long value to a character value.
			</summary> 
			<param name="value"> Long value. </param> 
			<returns>Char value.</returns>
		</member>
		<member name="M:Unigine.Math.toChar(bool)">
			<summary>
			Converts a boolean value to a character value.
			</summary> 
			<param name="value"> Boolean value. </param> 
			<returns>Char value.</returns>
		</member>
		<member name="M:Unigine.Math.toChar(unsignedint)">
			<summary>
			Converts an unsigned int value to a char value.
			</summary> 
			<param name="v"> Unsigned int value. </param> 
			<returns>Char value.</returns>
		</member>
		<member name="M:Unigine.Math.toChar(unsignedchar)">
			<summary>
			Converts an unsigned char value to a char value.
			</summary> 
			<param name="v"> Unsigned char value. </param> 
			<returns>Char value.</returns>
		</member>
		<member name="M:Unigine.Math.toChar(half)">
			<summary>
			Converts a half value to a char value.
			</summary> 
			<param name="v"> Half value. </param> 
			<returns>Char value.</returns>
		</member>
		<member name="M:Unigine.Math.toChar(String)">
			<summary>
			Converts a const String value to a char value.
			</summary> 
			<param name="v"> const String value. </param> 
			<returns>Char value.</returns>
		</member>
		<member name="M:Unigine.Math.toChar(char)">
			<summary>
			Converts a const char pointer value to char value.
			</summary> 
			<param name="v"> const char ptr value. </param> 
			<returns>Char value.</returns>
		</member>
		<member name="M:Unigine.Math.toShort(float)">
			<summary>
			Converts a float value to a short value.
			</summary> 
			<param name="value"> Float value. </param> 
			<returns>Short value.</returns>
		</member>
		<member name="M:Unigine.Math.toShort(double)">
			<summary>
			Converts a double value to a short value.
			</summary> 
			<param name="value"> Double value. </param> 
			<returns>Short value.</returns>
		</member>
		<member name="M:Unigine.Math.toShort(char)">
			<summary>
			Converts a char value to a short value.
			</summary> 
			<param name="value"> Char value. </param> 
			<returns>Short value.</returns>
		</member>
		<member name="M:Unigine.Math.toShort(int)">
			<summary>
			Converts an int value to a short value.
			</summary> 
			<param name="value"> Int value. </param> 
			<returns>Short value.</returns>
		</member>
		<member name="M:Unigine.Math.toShort(longlong)">
			<summary>
			Converts a long long value to a short value.
			</summary> 
			<param name="value"> Long long value. </param> 
			<returns>Short value.</returns>
		</member>
		<member name="M:Unigine.Math.toShort(unsignedchar)">
			<summary>
			Converts an unsigned char value to a short value.
			</summary> 
			<param name="value"> Unsigned char value. </param> 
			<returns>Short value.</returns>
		</member>
		<member name="M:Unigine.Math.toShort(bool)">
			<summary>
			Converts a bool value to a short value.
			</summary> 
			<param name="value"> Bool value. </param> 
			<returns>Short value.</returns>
		</member>
		<member name="M:Unigine.Math.toShort(half)">
			<summary>
			Converts a half value to a short value.
			</summary> 
			<param name="value"> Half value. </param> 
			<returns>Short value.</returns>
		</member>
		<member name="M:Unigine.Math.toShort(String)">
			<summary>
			Converts a const String value to a short value.
			</summary> 
			<param name="value"> Const String value. </param> 
			<returns>Short value.</returns>
		</member>
		<member name="M:Unigine.Math.toShort(char)">
			<summary>
			Converts a const char pointer value to a short value.
			</summary> 
			<param name="value"> Const char ptr value. </param> 
			<returns>Short value.</returns>
		</member>
		<member name="M:Unigine.Math.toUChar(float)">
			<summary>
			Converts a float value to an unsigned character value.
			</summary> 
			<param name="value"> Float value. </param> 
			<returns>Unsigned char value.</returns>
		</member>
		<member name="M:Unigine.Math.toUChar(double)">
			<summary>
			Converts a double value to an unsigned character value.
			</summary> 
			<param name="value"> Double value. </param> 
			<returns>Unsigned char value.</returns>
		</member>
		<member name="M:Unigine.Math.toUChar(int)">
			<summary>
			Converts an integer value to an unsigned character value.
			</summary> 
			<param name="value"> Integer value. </param> 
			<returns>Unsigned char value.</returns>
		</member>
		<member name="M:Unigine.Math.toUChar(longlong)">
			<summary>
			Converts a long value to an unsigned character value.
			</summary> 
			<param name="value"> Long value. </param> 
			<returns>Unsigned char value.</returns>
		</member>
		<member name="M:Unigine.Math.toUChar(bool)">
			<summary>
			Converts a boolean value to an unsigned character value.
			</summary> 
			<param name="value"> Boolean value. </param> 
			<returns>Unsigned char value.</returns>
		</member>
		<member name="M:Unigine.Math.toUChar(unsignedint)">
			<summary>
			Converts an unsigned int value to an unsigned char value.
			</summary> 
			<param name="v"> Unsigned int value. </param> 
			<returns>Unsigned char value.</returns>
		</member>
		<member name="M:Unigine.Math.toUChar(half)">
			<summary>
			Converts a half value to an unsigned char value.
			</summary> 
			<param name="v"> Half value. </param> 
			<returns>Unsigned char value.</returns>
		</member>
		<member name="M:Unigine.Math.toUChar(String)">
			<summary>
			Converts a const String value to an unsigned char value.
			</summary> 
			<param name="v"> const String value. </param> 
			<returns>Unsigned char value.</returns>
		</member>
		<member name="M:Unigine.Math.toUChar(char)">
			<summary>
			Converts a const char pointer value to an unsigned char value.
			</summary> 
			<param name="v"> const char ptr value. </param> 
			<returns>Unsigned char value.</returns>
		</member>
		<member name="M:Unigine.Math.toUShort(float)">
			<summary>
			Converts a float value to an unsigned short value.
			</summary> 
			<param name="value"> Float value. </param> 
			<returns>Unsigned short value.</returns>
		</member>
		<member name="M:Unigine.Math.toUShort(double)">
			<summary>
			Converts a double value to an unsigned short value.
			</summary> 
			<param name="value"> Double value. </param> 
			<returns>Unsigned short value.</returns>
		</member>
		<member name="M:Unigine.Math.toUShort(char)">
			<summary>
			Converts a char value to an unsigned short value.
			</summary> 
			<param name="value"> Char value. </param> 
			<returns>Unsigned short value.</returns>
		</member>
		<member name="M:Unigine.Math.toUShort(int)">
			<summary>
			Converts an int value to an unsigned short value.
			</summary> 
			<param name="value"> Int value. </param> 
			<returns>Unsigned short value.</returns>
		</member>
		<member name="M:Unigine.Math.toUShort(longlong)">
			<summary>
			Converts a long long value to an unsigned short value.
			</summary> 
			<param name="value"> Long long value. </param> 
			<returns>Unsigned short value.</returns>
		</member>
		<member name="M:Unigine.Math.toUShort(bool)">
			<summary>
			Converts a bool value to an unsigned short value.
			</summary> 
			<param name="value"> Bool value. </param> 
			<returns>Unsigned short value.</returns>
		</member>
		<member name="M:Unigine.Math.toUShort(half)">
			<summary>
			Converts a half value to an unsigned short value.
			</summary> 
			<param name="value"> Half value. </param> 
			<returns>Unsigned short value.</returns>
		</member>
		<member name="M:Unigine.Math.toUShort(String)">
			<summary>
			Converts a const String value to an unsigned short value.
			</summary> 
			<param name="value"> Const String value. </param> 
			<returns>Unsigned short value.</returns>
		</member>
		<member name="M:Unigine.Math.toUShort(char)">
			<summary>
			Converts a const char pointer value to an unsigned short value.
			</summary> 
			<param name="value"> Const char ptr value. </param> 
			<returns>Unsigned short value.</returns>
		</member>
		<member name="M:Unigine.Math.toBool(float)">
			<summary>
			Converts a float value to a boolean value.
			</summary> 
			<param name="value"> Float value. </param> 
			<returns>Boolean value.</returns>
		</member>
		<member name="M:Unigine.Math.toBool(double)">
			<summary>
			Converts a double value to a boolean value.
			</summary> 
			<param name="value"> Double value. </param> 
			<returns>Boolean value.</returns>
		</member>
		<member name="M:Unigine.Math.toBool(int)">
			<summary>
			Converts an integer value to a boolean value.
			</summary> 
			<param name="value"> Integer value. </param> 
			<returns>Boolean value.</returns>
		</member>
		<member name="M:Unigine.Math.toBool(char)">
			<summary>
			Converts a character value to a boolean value.
			</summary> 
			<param name="value"> Char value. </param> 
			<returns>Boolean value.</returns>
		</member>
		<member name="M:Unigine.Math.toBool(longlong)">
			<summary>
			Converts a long value to a boolean value.
			</summary> 
			<param name="value"> Long value. </param> 
			<returns>Boolean value.</returns>
		</member>
		<member name="M:Unigine.Math.toBool(unsignedint)">
			<summary>
			Converts an unsigned int value to a bool value.
			</summary> 
			<param name="v"> Unsigned int value. </param> 
			<returns>Boolean value.</returns>
		</member>
		<member name="M:Unigine.Math.toBool(unsignedchar)">
			<summary>
			Converts an unsigned char value to a bool value.
			</summary> 
			<param name="v"> Unsigned char value. </param> 
			<returns>Boolean value.</returns>
		</member>
		<member name="M:Unigine.Math.toBool(half)">
			<summary>
			Converts a half value to a bool value.
			</summary> 
			<param name="v"> Half value. </param> 
			<returns>Boolean value.</returns>
		</member>
		<member name="M:Unigine.Math.toBool(String)">
			<summary>
			Converts a const String value to a bool value.
			</summary> 
			<param name="v"> const String value. </param> 
			<returns>Boolean value.</returns>
		</member>
		<member name="M:Unigine.Math.toBool(char)">
			<summary>
			Converts a const char pointer value to a bool value.
			</summary> 
			<param name="v"> const char ptr value. </param> 
			<returns>Boolean value.</returns>
		</member>
		<member name="M:Unigine.Math.unsafeToMat2x2(float)">
			<summary>
			Performs an unsafe conversion of the specified pointer to a source array containing matrix data to the dedicated type used to store elements of a 2x2 matrix. Make sure that the number of elements and their positions in the pointed source array matches the target type, otherwise you may get wrong data or end up with a crash.
			</summary> 
			<param name="data"> Pointer to the matrix data. </param> 
			<returns>The value storing matrix float values.</returns>
		</member>
		<member name="M:Unigine.Math.unsafeToMat3x3(float)">
			<summary>
			Performs an unsafe conversion of the specified pointer to a source array containing matrix data to the dedicated type used to store elements of a 3x3 matrix. Make sure that the number of elements and their positions in the pointed source array matches the target type, otherwise you may get wrong data or end up with a crash.
			</summary> 
			<param name="data"> Pointer to the matrix data. </param> 
			<returns>The value storing matrix float values.</returns>
		</member>
		<member name="M:Unigine.Math.unsafeToMat4x3(float)">
			<summary>
			Performs an unsafe conversion of the specified pointer to a source array containing matrix data to the dedicated type used to store elements of a 4x3 matrix. Make sure that the number of elements and their positions in the pointed source array matches the target type, otherwise you may get wrong data or end up with a crash.
			</summary> 
			<param name="data"> Pointer to the matrix data. </param> 
			<returns>The value storing matrix float values.</returns>
		</member>
		<member name="M:Unigine.Math.unsafeToMat4x4(float)">
			<summary>
			Performs an unsafe conversion of the specified pointer to a source array containing matrix data to the dedicated type used to store elements of a 4x4 matrix. Make sure that the number of elements and their positions in the pointed source array matches the target type, otherwise you may get wrong data or end up with a crash.
			</summary> 
			<param name="data"> Pointer to the matrix data. </param> 
			<returns>The value storing matrix float values.</returns>
		</member>
		<member name="M:Unigine.Math.unsafeToDMat4x3(double)">
			<summary>
			Performs an unsafe conversion of the specified pointer to a source array containing matrix data to the dedicated type used to store elements of a 4x3 matrix. Make sure that the number of elements and their positions in the pointed source array matches the target type, otherwise you may get wrong data or end up with a crash.
			</summary> 
			<param name="data"> Pointer to the matrix data. </param> 
			<returns>The value storing matrix double values.</returns>
		</member>
		<member name="M:Unigine.Math.unsafeToDMat4x4(double)">
			<summary>
			Performs an unsafe conversion of the specified pointer to a source array containing matrix data to the dedicated type used to store elements of a 4x4 matrix. Make sure that the number of elements and their positions in the pointed source array matches the target type, otherwise you may get wrong data or end up with a crash.
			</summary> 
			<param name="data"> Pointer to the matrix data. </param> 
			<returns>The value storing matrix double values.</returns>
		</member>
		<member name="M:Unigine.Math.udiv(int,int)">
			<summary>
			Performs integer division with rounding up: it adds 1 to the result if there is a remainder from the division.
			</summary> 
			<param name="x"> First argument. </param>
			<param name="y"> Second argument. </param> 
			<returns>The rounded up quotient of two arguments that satisfies the following condition: y * z &gt;= x.</returns>
		</member>
		<member name="M:Unigine.Math.vogelDisk(uint,uint,float)">
			<summary>
			Returns a generated set of points with X and Y coordinates in the [-1; 1] range that describe a circle with uniform distribution of samples inside. This method is suitable for getting uniform distribution of coordinates for a circle. For example you can use it is a loop to generate UV coordinates offset for making the uniform circular blur effect. You can use the current loop iteration index as the i argument and the maximum number of iterations — as count.
			</summary> 
			<param name="i"> Index of the current point for the disk. </param>
			<param name="count"> Number of points. </param>
			<param name="noise"> Normalized noise. </param> 
			<returns>Set of points with X and Y coordinates in the [-1; 1] range that describe a circle with uniform distribution of samples inside.</returns>
		</member>
		<member name="M:Unigine.Math.vogelDisk(uint,uint)">
			<summary>
			Returns a generated set of points with X and Y coordinates in the [-1; 1] range that describe a circle with uniform distribution of samples inside. This method is suitable for getting uniform distribution of coordinates for a circle. For example you can use it is a loop to generate UV coordinates offset for making the uniform circular blur effect. You can use the current loop iteration index as the i argument and the maximum number of iterations — as count.
			</summary> 
			<param name="i"> Index of the current point for the disk. </param>
			<param name="count"> Number of points. </param> 
			<returns>Set of points with X and Y coordinates in the [-1; 1] range that describe a circle with uniform distribution of samples inside.</returns>
		</member>
		<member name="M:Unigine.Math.operator==(ControlsPtr,ControlsPtr,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...)">
			<summary>
			Checks if two controls are actually the same controls.
			</summary> 
			<param name="c0"> The first control. </param>
			<param name="c1"> The second control. </param>
			<param name="g0"> The first gui. </param>
			<param name="g1"> The second gui. </param>
			<param name="i0"> Pointer to the first image. </param>
			<param name="i1"> Pointer to the second image. </param>
			<param name="m0"> The first material. </param>
			<param name="m1"> The second material. </param>
			<param name="m0"> Pointer to the first mesh. </param>
			<param name="m1"> Pointer to the second mesh. </param>
			<param name="p0"> Pointer to the first path. </param>
			<param name="p1"> Pointer to the second path. </param>
			<param name="m0"> The first property. </param>
			<param name="m1"> The second property. </param>
			<param name="s0"> The first shader. </param>
			<param name="s1"> The second shader. </param>
			<param name="s0"> The first stream. </param>
			<param name="s1"> The second stream. </param>
			<param name="t0"> The first texture. </param>
			<param name="t1"> The second texture. </param>
			<param name="t0"> The first render texture. </param>
			<param name="t1"> The second render texture. </param>
			<param name="ui0"> The first user interface. </param>
			<param name="ui1"> The second user interface. </param>
			<param name="w0"> First widget. </param>
			<param name="w1"> Second widget. </param>
			<param name="x0"> The first xml. </param>
			<param name="x1"> The second xml. </param> 
			<returns>Returns 1 if two values are the same; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.vec2,Unigine.vec2)">
			<summary>
			Vector equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.vec3,Unigine.vec3)">
			<summary>
			Vector equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.vec4,Unigine.vec4)">
			<summary>
			Vector equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Vector equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Vector equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Vector equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.ivec2,Unigine.ivec2)">
			<summary>
			Vector equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Vector equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.ivec4,Unigine.ivec4)">
			<summary>
			Vector equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(bvec4,bvec4)">
			<summary>
			Vector equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(svec4,svec4)">
			<summary>
			Vector equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.mat4,Unigine.mat4)">
			<summary>
			Matrix equal comparison.
			</summary> 
			<param name="m0"> The first matrix. </param>
			<param name="m1"> The second matrix. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.dmat4,Unigine.dmat4)">
			<summary>
			Matrix equal comparison.
			</summary> 
			<param name="m0"> The first matrix. </param>
			<param name="m1"> The second matrix. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(Unigine.quat,Unigine.quat)">
			<summary>
			Quaternion equal comparison.
			</summary> 
			<param name="q0"> The first quaternion. </param>
			<param name="q1"> The second quaternion. </param> 
		</member>
		<member name="M:Unigine.Math.operator==(String,String)">
			<summary>
			String equal comparison.
			</summary> 
			<param name="s0"> The first string. </param>
			<param name="s1"> The second string. </param> 
		</member>
		<member name="M:Unigine.Math.operator==">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator==">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator==(TypeInfo,TypeInfo)">
			<summary>
			Check if two TypeInfo classes are referenced the same types.
			</summary> 
			<param name="t0"> The first TypeIndo class. </param>
			<param name="t1"> The second TypeIndo class. </param> 
			<returns>Returns 1 if types are the same; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Math.operator!=(ControlsPtr,ControlsPtr,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...,...)">
			<summary>
			Checks if two controls are not the same controls.
			</summary> 
			<param name="c0"> The first control. </param>
			<param name="c1"> The second control. </param>
			<param name="g0"> The first gui. </param>
			<param name="g1"> The second gui. </param>
			<param name="i0"> Pointer to the first image. </param>
			<param name="i1"> Pointer to the second image. </param>
			<param name="m0"> The first material. </param>
			<param name="m1"> The second material. </param>
			<param name="m0"> Pointer to the first mesh. </param>
			<param name="m1"> Pointer to the second mesh. </param>
			<param name="p0"> Pointer to the first path. </param>
			<param name="p1"> Pointer to the second path. </param>
			<param name="m0"> The first property. </param>
			<param name="m1"> The second property. </param>
			<param name="s0"> The first shader. </param>
			<param name="s1"> The second shader. </param>
			<param name="s0"> The first stream. </param>
			<param name="s1"> The second stream. </param>
			<param name="t0"> The first texture. </param>
			<param name="t1"> The second texture. </param>
			<param name="t0"> The first render texture. </param>
			<param name="t1"> The second render texture. </param>
			<param name="ui0"> The first user interface. </param>
			<param name="ui1"> The second user interface. </param>
			<param name="w0"> First widget. </param>
			<param name="w1"> Second widget. </param>
			<param name="x0"> The first xml. </param>
			<param name="x1"> The second xml. </param> 
			<returns>Returns 1 if two values are not the same; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.vec2,Unigine.vec2)">
			<summary>
			Vector not equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.vec3,Unigine.vec3)">
			<summary>
			Vector not equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.vec4,Unigine.vec4)">
			<summary>
			Vector not equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Vector not equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Vector not equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Vector not equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.ivec2,Unigine.ivec2)">
			<summary>
			Vector not equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Vector not equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.ivec4,Unigine.ivec4)">
			<summary>
			Vector not equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(bvec4,bvec4)">
			<summary>
			Vector not equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(svec4,svec4)">
			<summary>
			Vector not equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.mat4,Unigine.mat4)">
			<summary>
			Matrix not equal comparison.
			</summary> 
			<param name="m0"> The first matrix. </param>
			<param name="m1"> The second matrix. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.dmat4,Unigine.dmat4)">
			<summary>
			Matrix not equal comparison.
			</summary> 
			<param name="m0"> The first matrix. </param>
			<param name="m1"> The second matrix. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(Unigine.quat,Unigine.quat)">
			<summary>
			Quaternion not equal comparison.
			</summary> 
			<param name="q0"> The first quaternion. </param>
			<param name="q1"> The second quaternion. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=(String,String)">
			<summary>
			String not equal comparison.
			</summary> 
			<param name="s0"> The first string. </param>
			<param name="s1"> The second string. </param> 
		</member>
		<member name="M:Unigine.Math.operator!=">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator!=">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator!=(TypeInfo,TypeInfo)">
			<summary>
			Check if two TypeInfo classes are not referenced the same types.
			</summary> 
			<param name="t0"> The first TypeIndo class. </param>
			<param name="t1"> The second TypeIndo class. </param> 
			<returns>Returns 1 if types are not the same; otherwise, 0 is returned.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec2,float)">
			<summary>
			Scalar multiplication.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec2,Unigine.vec2)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec3,float)">
			<summary>
			Scalar multiplication.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec3,Unigine.vec3)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec4,float)">
			<summary>
			Scalar multiplication.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec4,Unigine.vec4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec2,double)">
			<summary>
			Scalar multiplication.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec3,double)">
			<summary>
			Scalar multiplication.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec4,double)">
			<summary>
			Scalar multiplication.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.ivec2,int)">
			<summary>
			Scalar multiplication.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.ivec2,Unigine.ivec2)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.ivec3,int)">
			<summary>
			Scalar multiplication.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.ivec4,int)">
			<summary>
			Scalar multiplication.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.ivec4,Unigine.ivec4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.mat4,float)">
			<summary>
			Matrix multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the scalar. </param> 
			<returns>The resulting matrix.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.mat4,Unigine.vec3)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec3,Unigine.mat4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="m"> The value of the matrix. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.mat4,Unigine.vec4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec4,Unigine.mat4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="m"> The value of the matrix. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.mat4,Unigine.dvec3)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec3,Unigine.mat4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="m"> The value of the matrix. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.mat4,Unigine.dvec4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec4,Unigine.mat4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="m"> The value of the matrix. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.mat4,Unigine.mat4)">
			<summary>
			Matrix multiplication.
			</summary> 
			<param name="m0"> The value of the first matrix. </param>
			<param name="m1"> The value of the second matrix. </param> 
			<returns>The resulting matrix.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dmat4,double)">
			<summary>
			Matrix multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the scalar. </param> 
			<returns>The resulting matrix.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dmat4,Unigine.vec2)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec2,Unigine.dmat4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="m"> The value of the matrix. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dmat4,Unigine.vec3)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec3,Unigine.dmat4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="m"> The value of the matrix. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dmat4,Unigine.vec4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec4,Unigine.dmat4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="m"> The value of the matrix. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dmat4,Unigine.dvec2)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec2,Unigine.dmat4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="m"> The value of the matrix. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dmat4,Unigine.dvec3)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec3,Unigine.dmat4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="m"> The value of the matrix. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dmat4,Unigine.dvec4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="m"> The value of the matrix. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec4,Unigine.dmat4)">
			<summary>
			Vector multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="m"> The value of the matrix. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dmat4,Unigine.dmat4)">
			<summary>
			Matrix multiplication.
			</summary> 
			<param name="m0"> The value of the first matrix. </param>
			<param name="m1"> The value of the second matrix. </param> 
			<returns>The resulting matrix.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.quat,float)">
			<summary>
			Quaternion multiplication.
			</summary> 
			<param name="q"> The value of the quaternion. </param>
			<param name="v"> The value of the scalar. </param> 
			<returns>The resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.quat,Unigine.vec3)">
			<summary>
			Quaternion multiplication.
			</summary> 
			<param name="q"> The value of the quaternion. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.vec3,Unigine.quat)">
			<summary>
			Quaternion multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="q"> The value of the quaternion. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.quat,Unigine.dvec3)">
			<summary>
			Quaternion multiplication.
			</summary> 
			<param name="q"> The value of the quaternion. </param>
			<param name="v"> The value of the vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.dvec3,Unigine.quat)">
			<summary>
			Quaternion multiplication.
			</summary> 
			<param name="v"> The value of the vector. </param>
			<param name="q"> The value of the quaternion. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator*(Unigine.quat,Unigine.quat)">
			<summary>
			Quaternion multiplication.
			</summary> 
			<param name="q0"> The value of the first quaternion. </param>
			<param name="q1"> The value of the second quaternion. </param> 
			<returns>The resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.vec2,Unigine.vec2)">
			<summary>
			Vector addition.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.vec3,Unigine.vec3)">
			<summary>
			Vector addition.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.vec3,float)">
			<summary>
			Adds the float value to all vector components.
			</summary> 
			<param name="v0"> Vector. </param>
			<param name="v1"> Float value. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.vec4,Unigine.vec4)">
			<summary>
			Vector addition.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Vector addition.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Vector addition.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Vector addition.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.ivec2,Unigine.ivec2)">
			<summary>
			Vector addition.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Vector addition.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.ivec4,Unigine.ivec4)">
			<summary>
			Vector addition.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.mat4,Unigine.mat4)">
			<summary>
			Matrix addition.
			</summary> 
			<param name="m0"> The value of the first matrix. </param>
			<param name="m1"> The value of the second matrix. </param> 
			<returns>The resulting matrix.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.dmat4,Unigine.dmat4)">
			<summary>
			Matrix addition.
			</summary> 
			<param name="m0"> The value of the first matrix. </param>
			<param name="m1"> The value of the second matrix. </param> 
			<returns>The resulting matrix.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(Unigine.quat,Unigine.quat)">
			<summary>
			Quaternion addition.
			</summary> 
			<param name="q0"> The value of the first quaternion. </param>
			<param name="q1"> The value of the second quaternion. </param> 
			<returns>The resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.operator+(String,String)">
			<summary>
			String addition.
			</summary> 
			<param name="s0"> The first string. </param>
			<param name="s1"> The second string. </param> 
		</member>
		<member name="M:Unigine.Math.operator+">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator+">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.vec2,Unigine.vec2)">
			<summary>
			Vector subtraction.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.vec3,Unigine.vec3)">
			<summary>
			Vector subtraction.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.vec4,Unigine.vec4)">
			<summary>
			Vector subtraction.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Vector subtraction.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Vector subtraction.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.dvec4,Unigine.dvec4)">
			<summary>
			Vector subtraction.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.ivec2,Unigine.ivec2)">
			<summary>
			Vector subtraction.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Vector subtraction.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.ivec4,Unigine.ivec4)">
			<summary>
			Vector subtraction.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.mat4,Unigine.mat4)">
			<summary>
			Matrix subtraction.
			</summary> 
			<param name="m0"> The value of the first matrix. </param>
			<param name="m1"> The value of the second matrix. </param> 
			<returns>The resulting matrix.</returns>
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.dmat4,Unigine.dmat4)">
			<summary>
			Matrix subtraction.
			</summary> 
			<param name="m0"> The value of the first matrix. </param>
			<param name="m1"> The value of the second matrix. </param> 
			<returns>The resulting matrix.</returns>
		</member>
		<member name="M:Unigine.Math.operator-(Unigine.quat,Unigine.quat)">
			<summary>
			Quaternion subtraction.
			</summary> 
			<param name="q0"> The value of the first quaternion. </param>
			<param name="q1"> The value of the second quaternion. </param> 
			<returns>The resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.operator%(Unigine.ivec2,int)">
			<summary>
			Modulus operation.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator%(Unigine.ivec4,int)">
			<summary>
			Modulus operation.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator/(Unigine.ivec2,int)">
			<summary>
			Scalar division.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator/(Unigine.ivec2,Unigine.ivec2)">
			<summary>
			Vector division.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator/(Unigine.ivec3,int)">
			<summary>
			Scalar division.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator/(Unigine.ivec3,Unigine.ivec3)">
			<summary>
			Vector division.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator/(Unigine.vec2,Unigine.ivec2)">
			<summary>
			Vector division.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator/(Unigine.ivec4,int)">
			<summary>
			Scalar division.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The value of the scalar. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator/(Unigine.ivec4,Unigine.ivec4)">
			<summary>
			Vector division.
			</summary> 
			<param name="v0"> First vector. </param>
			<param name="v1"> Second vector. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator&lt;&lt;(Unigine.ivec2,int)">
			<summary>
			Left bit shift.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The shift amount. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator&lt;&lt;(Unigine.ivec3,int)">
			<summary>
			Left bit shift.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The shift amount. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator&lt;&lt;(Unigine.ivec4,int)">
			<summary>
			Left bit shift.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The shift amount. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator&gt;&gt;(Unigine.ivec2,int)">
			<summary>
			Right bit shift.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The shift amount. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator&gt;&gt;(Unigine.ivec3,int)">
			<summary>
			Right bit shift.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The shift amount. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.operator&gt;&gt;(Unigine.ivec4,int)">
			<summary>
			Right bit shift.
			</summary> 
			<param name="v0"> The value of the vector. </param>
			<param name="v1"> The shift amount. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.mod(float,float)">
			<summary>
			Returns the floating-point remainder of the division operation: first argument / second argument.
			</summary> 
			<param name="x"> Value. </param>
			<param name="y"> Value. </param> 
			<returns>Resulting float value.</returns>
		</member>
		<member name="M:Unigine.Math.mod(double,double)">
			<summary>
			Returns the floating-point remainder of the division operation: first argument / second argument.
			</summary> 
			<param name="x"> Value. </param>
			<param name="y"> Value. </param> 
			<returns>Resulting double value.</returns>
		</member>
		<member name="M:Unigine.Math.mad(float,float,float)">
			<summary>
			Returns the result of multiplication of the first value by the second value and addition of the third value (a * b + c).
			</summary> 
			<param name="a"> Value. </param>
			<param name="b"> Value. </param>
			<param name="c"> Value. </param> 
			<returns>Return value.</returns>
		</member>
		<member name="M:Unigine.Math.mad(double,double,double)">
			<summary>
			Returns the result of multiplication of the first value by the second value and addition of the third value (a * b + c).
			</summary> 
			<param name="a"> Value. </param>
			<param name="b"> Value. </param>
			<param name="c"> Value. </param> 
			<returns>Return value.</returns>
		</member>
		<member name="M:Unigine.Math.select(int,int,int)">
			<summary>
			Returns one of the two argument values (v0 and v1) based on the specified condition (c). This method is efficient for selecting between two values without branching, which can be beneficial in performance-critical code where branching might introduce overhead.
			</summary> 
			<param name="c"> Condition to be checked. </param>
			<param name="v0"> Value to be returned in case the condition is true (non-zero). </param>
			<param name="v1"> Value to be returned in case the condition is false (zero). </param> 
			<returns>One of the two argument values (v0 and v1) based on the specified condition.</returns>
		</member>
		<member name="M:Unigine.Math.select(int,float,float)">
			<summary>
			Returns one of the two argument values (v0 and v1) based on the specified condition (c). This method is efficient for selecting between two values without branching, which can be beneficial in performance-critical code where branching might introduce overhead.
			</summary> 
			<param name="c"> Condition to be checked. </param>
			<param name="v0"> Value to be returned in case the condition is true (non-zero). </param>
			<param name="v1"> Value to be returned in case the condition is false (zero). </param> 
			<returns>One of the two argument values (v0 and v1) based on the specified condition.</returns>
		</member>
		<member name="M:Unigine.Math.select(float,float,float)">
			<summary>
			Returns one of the two argument values (v0 and v1) based on the specified condition (c). This method is efficient for selecting between two values without branching, which can be beneficial in performance-critical code where branching might introduce overhead.
			</summary> 
			<param name="c"> Condition to be checked. </param>
			<param name="v0"> Value to be returned in case the condition is true (non-zero). </param>
			<param name="v1"> Value to be returned in case the condition is false (zero). </param> 
			<returns>One of the two argument values (v0 and v1) based on the specified condition.</returns>
		</member>
		<member name="M:Unigine.Math.operator&lt;(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Vector less than comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator&lt;(String,String)">
			<summary>
			String less than comparison.
			</summary> 
			<param name="s0"> The first string. </param>
			<param name="s1"> The second string. </param> 
		</member>
		<member name="M:Unigine.Math.operator&lt;">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator&lt;">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator&gt;(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Vector greater than comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator&gt;(String,String)">
			<summary>
			String greater than comparison.
			</summary> 
			<param name="s0"> The first string. </param>
			<param name="s1"> The second string. </param> 
		</member>
		<member name="M:Unigine.Math.operator&gt;">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator&gt;">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator&lt;=(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Vector less than or equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator&lt;=(String,String)">
			<summary>
			String less or equal to comparison.
			</summary> 
			<param name="s0"> The first string. </param>
			<param name="s1"> The second string. </param> 
		</member>
		<member name="M:Unigine.Math.operator&lt;=">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator&lt;=">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator&gt;=(Unigine.dvec2,Unigine.dvec2)">
			<summary>
			Vector greater than or equal comparison.
			</summary> 
			<param name="v0"> The first vector. </param>
			<param name="v1"> The second vector. </param> 
		</member>
		<member name="M:Unigine.Math.operator&gt;=(String,String)">
			<summary>
			String greater or equal to comparison.
			</summary> 
			<param name="s0"> The first string. </param>
			<param name="s1"> The second string. </param> 
		</member>
		<member name="M:Unigine.Math.operator&gt;=">
			<summary>
			
			</summary>  
		</member>
		<member name="M:Unigine.Math.operator&gt;=">
			<summary>
			
			</summary>  
		</member>
		<member name="F:Unigine.Math.AXIS_X">
			<summary>
			Positive X axis.
		</summary>
		</member>
		<member name="F:Unigine.Math.AXIS_Y">
			<summary>
			Positive Y axis.
		</summary>
		</member>
		<member name="F:Unigine.Math.AXIS_Z">
			<summary>
			Positive Z axis.
		</summary>
		</member>
		<member name="F:Unigine.Math.AXIS_NX">
			<summary>
			Negative X axis.
		</summary>
		</member>
		<member name="F:Unigine.Math.AXIS_NY">
			<summary>
			Negative Y axis.
		</summary>
		</member>
		<member name="F:Unigine.Math.AXIS_NZ">
			<summary>
			Negative Z axis.
		</summary>
		</member>
		<member name="F:Unigine.Math.ZERO">
			<summary>
			Vector filled with zeros (0).
		</summary>
		</member>
		<member name="F:Unigine.Math.ONE">
			<summary>
			Vector filled with ones (1).
		</summary>
		</member>
		<member name="F:Unigine.Math.EPS">
			<summary>
			Vector filled with epsilon constant (1e-6f).
		</summary>
		</member>
		<member name="F:Unigine.Math.INF">
			<summary>
			Vector filled with the infinity constant (1e+9f).
		</summary>
		</member>
		<member name="F:Unigine.Math.WHITE">
			<summary>
			White color vector (1, 1, 1, 1).
		</summary>
		</member>
		<member name="F:Unigine.Math.BLACK">
			<summary>
			Black color vector (0, 0, 0, 0).
		</summary>
		</member>
		<member name="F:Unigine.Math.RED">
			<summary>
			Red color vector (1, 0, 0, 1).
		</summary>
		</member>
		<member name="F:Unigine.Math.GREEN">
			<summary>
			Green color vector (0, 1, 0, 1).
		</summary>
		</member>
		<member name="F:Unigine.Math.BLUE">
			<summary>
			Blue color vector (0, 0, 1, 1).
		</summary>
		</member>
		<member name="M:Unigine.Math.exp(float)">
			<summary>
			Returns e raised to the specified power (ev				).
			</summary> 
			<param name="v"> Power. </param> 
			<returns>e raised to the specified power (ev).</returns>
		</member>
		<member name="M:Unigine.Math.exp(double)">
			<summary>
			Returns e raised to the specified power (ev				).
			</summary> 
			<param name="v"> Power. </param> 
			<returns>e raised to the specified power (ev).</returns>
		</member>
		<member name="M:Unigine.Math.expFast(float)">
			<summary>
			Returns e raised to the specified power (ev				) - the approximated (quicker calculated) value.
			</summary> 
			<param name="v"> Power. </param> 
			<returns>e raised to the specified power (ev).</returns>
		</member>
		<member name="M:Unigine.Math.exp2(float)">
			<summary>
			Returns 2 raised to the specified power (2v				).
			</summary> 
			<param name="v"> Power. </param> 
			<returns>2 raised to the specified power (2v).</returns>
		</member>
		<member name="M:Unigine.Math.exp2(double)">
			<summary>
			Returns 2 raised to the specified power (2v				).
			</summary> 
			<param name="v"> Power. </param> 
			<returns>2 raised to the specified power (2v).</returns>
		</member>
		<member name="M:Unigine.Math.exp2Fast(float)">
			<summary>
			Returns 2 raised to the specified power (2v				) - the approximated (quicker calculated) value.
			</summary> 
			<param name="v"> Power. </param> 
			<returns>2 raised to the specified power (2v).</returns>
		</member>
		<member name="M:Unigine.Math.log(float)">
			<summary>
			Returns the natural logarithm of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Natural logarithm of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.log(double)">
			<summary>
			Returns the natural logarithm of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Natural logarithm of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.logFast(float)">
			<summary>
			Returns the approximated (quicker calculated) natural logarithm of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Approximated natural logarithm of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.log2(int)">
			<summary>
			Returns the base-2 logarithm of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Base-2 logarithm of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.log2(float)">
			<summary>
			Returns the base-2 logarithm of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Base-2 logarithm of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.log2(double)">
			<summary>
			Returns the base-2 logarithm of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Base-2 logarithm of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.log2Fast(float)">
			<summary>
			Returns the approximated (quicker calculated) base-2 logarithm of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Approximated base-2 logarithm of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.log10(float)">
			<summary>
			Returns the base-10 logarithm of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Base-10 logarithm of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.log10(double)">
			<summary>
			Returns the base-10 logarithm of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Base-10 logarithm of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.pow(float,float)">
			<summary>
			Returns the argument raised to the specified power (xy				).
			</summary> 
			<param name="x"> Argument. </param>
			<param name="y"> Power. </param> 
			<returns>Argument raised to the specified power (xy).</returns>
		</member>
		<member name="M:Unigine.Math.pow(double,double)">
			<summary>
			Returns the argument raised to the specified power (xy				).
			</summary> 
			<param name="x"> Argument. </param>
			<param name="y"> Power. </param> 
			<returns>Argument raised to the specified power (xy).</returns>
		</member>
		<member name="M:Unigine.Math.powFast(float,float)">
			<summary>
			Returns the argument raised to the specified power (ab). Doesn't perform the check that the first argument is a negative value.
			</summary> 
			<param name="a"> Argument. </param>
			<param name="b"> Power. </param> 
			<returns>Argument raised to the specified power (ab).</returns>
		</member>
		<member name="M:Unigine.Math.pow2(float)">
			<summary>
			Returns the argument raised to the power of 2 (squared).
			</summary> 
			<param name="x"> Argument. </param> 
			<returns>Argument raised to the power of 2 (squared).</returns>
		</member>
		<member name="M:Unigine.Math.pow2(double)">
			<summary>
			Returns the argument raised to the power of 2 (squared).
			</summary> 
			<param name="x"> Argument. </param> 
			<returns>Argument raised to the power of 2 (squared).</returns>
		</member>
		<member name="M:Unigine.Math.pow2(int)">
			<summary>
			Returns the argument raised to the power of 2 (squared).
			</summary> 
			<param name="x"> Argument. </param> 
			<returns>Argument raised to the power of 2 (squared).</returns>
		</member>
		<member name="M:Unigine.Math.nextPow2(unsignedlonglong)">
			<summary>
			Returns the next power of 2 greater than or equal to a given argument.
			</summary> 
			<param name="x"> Argument. </param> 
			<returns>Power of 2 greater than or equal to a given argument.</returns>
		</member>
		<member name="M:Unigine.Math.dsqrt(double)">
			<summary>
			Returns the square root of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Square root of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.fsqrt(float)">
			<summary>
			Returns the square root of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Square root of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.rsqrt(float)">
			<summary>
			Returns the inverted square root of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Inverted square root of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.rsqrt(double)">
			<summary>
			Returns the inverted square root of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Inverted square root of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.ssqrt(Scalar)">
			<summary>
			Returns the square root of the argument.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Square root of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.sqrtFast(float)">
			<summary>
			Returns an approximation of the square root.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Approximated square root of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.rsqrtFast(float)">
			<summary>
			Returns an approximation of the inverted square root.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Approximation of the inverted square root of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.composeRotationXYZ(Unigine.vec3)">
			<summary>
							Composes a rotation matrix from the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - XYZ.					It is an order of the rings in the three-axis gimbal set: X axis used as the outer ring (independent ring), while Z axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="r"> Vector, containing Euler angles, in degrees - (yaw, roll, pitch). </param> 
			<returns>Composed rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.composeRotationXZY(Unigine.vec3)">
			<summary>
							Composes a rotation matrix from the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - XZY.					It is an order of the rings in the three-axis gimbal set: X axis used as the outer ring (independent ring), while Y axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="r"> Vector, containing Euler angles, in degrees - (yaw, roll, pitch). </param> 
			<returns>Composed rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.composeRotationYXZ(Unigine.vec3)">
			<summary>
							Composes a rotation matrix from the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - YXZ.					It is an order of the rings in the three-axis gimbal set: Y axis used as the outer ring (independent ring), while Z axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="r"> Vector, containing Euler angles, in degrees - (yaw, roll, pitch). </param> 
			<returns>Composed rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.composeRotationYZX(Unigine.vec3)">
			<summary>
							Composes a rotation matrix from the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - YZX.					It is an order of the rings in the three-axis gimbal set: Y axis used as the outer ring (independent ring), while X axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="r"> Vector, containing Euler angles, in degrees - (yaw, roll, pitch). </param> 
			<returns>Composed rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.composeRotationZXY(Unigine.vec3)">
			<summary>
							Composes a rotation matrix from the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - ZXY.					It is an order of the rings in the three-axis gimbal set: Z axis used as the outer ring (independent ring), while Y axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="r"> Vector, containing Euler angles, in degrees - (yaw, roll, pitch). </param> 
			<returns>Composed rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.composeRotationZYX(Unigine.vec3)">
			<summary>
							Composes a rotation matrix from the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - ZYX.					It is an order of the rings in the three-axis gimbal set: Z axis used as the outer ring (independent ring), while X axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="r"> Vector, containing Euler angles, in degrees - (yaw, roll, pitch). </param> 
			<returns>Composed rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.composeTransform(Unigine.mat4,Unigine.vec4,Unigine.quat)">
			<summary>
			Returns the transformation matrix for the specified position and rotation.
			</summary> 
			<param name="ret"> Output matrix, to which the resulting transformation matrix will be put. </param>
			<param name="rot"> Rotation quaternion. </param> 
			<returns>Resulting transformation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.composeTransform(Unigine.mat4,Unigine.vec3,Unigine.quat,Unigine.vec3)">
			<summary>
			Returns the transformation matrix for the specified position, rotation and scale. For more information see Matrix Transformations.
			</summary> 
			<param name="ret"> Output matrix, to which the resulting transformation matrix will be put. </param>
			<param name="position"> Position coordinates (world). </param>
			<param name="rot"> Rotation quaternion. </param>
			<param name="scale"> Scaling vector (scale.x, scale.y, scale.z). </param> 
			<returns>Resulting transformation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.composeTransform(Unigine.dmat4,Unigine.dvec3,Unigine.quat,Unigine.vec3)">
			<summary>
			Returns the transformation matrix for the specified position, rotation and scale. For more information see Matrix Transformations.
			</summary> 
			<param name="ret"> Output matrix, to which the resulting transformation matrix will be put. </param>
			<param name="rot"> Rotation quaternion. </param>
			<param name="scale"> Scaling vector (scale.x, scale.y, scale.z). </param> 
			<returns>Resulting transformation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.composeTransform(Unigine.mat4,Unigine.quat,Unigine.quat,Unigine.vec3)">
			<summary>
			Returns the transformation matrix for the specified position, rotation and scale. For more information see Matrix Transformations.
			</summary> 
			<param name="ret"> Output matrix, to which the resulting transformation matrix will be put. </param>
			<param name="scale"> Scaling vector (scale.x, scale.y, scale.z). </param> 
			<returns>Resulting transformation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.cubeTransform(int)">
			<summary>
			Returns a transformation matrix (cube viewing matrix) for the specified face of a cube map. Cube maps are often used in rendering for environment mapping, reflection, or skyboxes. Each face of a cube map corresponds to one of the six directions: positive and negative X, Y, and Z axes.
			</summary> 
			<param name="face"> Face number, one of the following: 0 (X+), 1 (X-), 2 (Y+), 3 (Y-), 4 (Z+),5 (Z-). </param> 
			<returns>Cube viewing matrix.</returns>
		</member>
		<member name="M:Unigine.Math.decomposePerspectiveFov(Unigine.mat4)">
			<summary>
			Decomposes a given perspective projection matrix, extracting the field of view angle.
			</summary> 
			<param name="projection"> Perspective projection matrix. </param> 
			<returns>Field of view angle.</returns>
		</member>
		<member name="M:Unigine.Math.decomposeProjection(Unigine.mat4,float,float)">
			<summary>
			Decomposes a given projection matrix, extracting distances to near and far clipping planes.
			</summary> 
			<param name="projection"> Projection matrix. </param>
			<param name="znear"> Near clipping plane. </param>
			<param name="zfar"> Far clipping plane. </param> 
		</member>
		<member name="M:Unigine.Math.decomposeProjection(Unigine.mat4,float,float,float)">
			<summary>
			Decomposes a given projection matrix, extracting distances to near and far clipping planes, and the field of view angle.
			</summary> 
			<param name="projection"> Projection matrix. </param>
			<param name="znear"> Near clipping plane. </param>
			<param name="zfar"> Far clipping plane. </param>
			<param name="fov"> Field of view angle. </param> 
		</member>
		<member name="M:Unigine.Math.decomposeRotationXYZ(mat3)">
			<summary>
							Decomposes a given rotation matrix to the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - XYZ.					It is an order of the rings in the three-axis gimbal set: X axis used as the outer ring (independent ring), while Z axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="t"> Rotation matrix to decompose. </param> 
			<returns>Vector, containing Euler angles, in degrees - (pitch, roll, yaw).</returns>
		</member>
		<member name="M:Unigine.Math.decomposeRotationXZY(mat3)">
			<summary>
							Decomposes a given rotation matrix to the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - XZY.					It is an order of the rings in the three-axis gimbal set: X axis used as the outer ring (independent ring), while Y axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="t"> Rotation matrix to decompose. </param> 
			<returns>Vector, containing Euler angles, in degrees - (pitch, yaw, roll).</returns>
		</member>
		<member name="M:Unigine.Math.decomposeRotationYXZ(mat3)">
			<summary>
							Decomposes a given rotation matrix to the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - YXZ.					It is an order of the rings in the three-axis gimbal set: Y axis used as the outer ring (independent ring), while Z axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="t"> Rotation matrix to decompose. </param> 
			<returns>Vector, containing Euler angles, in degrees - (roll, pitch, yaw).</returns>
		</member>
		<member name="M:Unigine.Math.decomposeRotationYZX(mat3)">
			<summary>
							Decomposes a given rotation matrix to the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - YZX.					It is an order of the rings in the three-axis gimbal set: Y axis used as the outer ring (independent ring), while X axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="t"> Rotation matrix to decompose. </param> 
			<returns>Vector, containing Euler angles, in degrees - (roll, yaw, pitch).</returns>
		</member>
		<member name="M:Unigine.Math.decomposeRotationZXY(mat3)">
			<summary>
							Decomposes a given rotation matrix to the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - ZXY.					It is an order of the rings in the three-axis gimbal set: Z axis used as the outer ring (independent ring), while Y axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="t"> Rotation matrix to decompose. </param> 
			<returns>Vector, containing Euler angles, in degrees - (yaw, pitch, roll).</returns>
		</member>
		<member name="M:Unigine.Math.decomposeRotationZYX(mat3)">
			<summary>
							Decomposes a given rotation matrix to the corresponding Euler angles. The Euler angles are specified in the axis rotation sequence - ZYX.					It is an order of the rings in the three-axis gimbal set: Z axis used as the outer ring (independent ring), while X axis as the inner one (its rotation depends on other 2 rings). 				When we talk about axes in UNIGINE we assume that:											X axis points to the right giving us a pitch angle.						Y axis points forward  giving us a roll angle.						Z axis points up giving us a yaw (heading) angle.										Players have a different coordinate system:													X axis points to the right giving us a pitch angle.							Y axis points up giving us a yaw (heading) angle.							Z axis points backward giving us a -roll angle.
			</summary> 
			<param name="t"> Rotation matrix to decompose. </param> 
			<returns>Vector, containing Euler angles, in degrees - (yaw, roll, pitch).</returns>
		</member>
		<member name="M:Unigine.Math.decomposeTransform(Unigine.mat4,Unigine.vec4,Unigine.quat)">
			<summary>
			Decomposes a given transformation matrix into a vector representing translation and uniform scale and a quaternion representing rotation.
			</summary> 
			<param name="m"> Transformation matrix to decompose. </param>
			<param name="position"> Output vector (X, Y, Z, W), to which translation and scale components of the transformation will be put. (X, Y, Z) - represent translation, W = (scale.X + scale.Y + scale.z) / 3. </param>
			<param name="rot"> Output quaternion, to which the rotation component of the transformation will pe put. </param> 
		</member>
		<member name="M:Unigine.Math.decomposeTransform(Unigine.mat4,Unigine.vec3,Unigine.quat,Unigine.vec3)">
			<summary>
			Decomposes a given transformation matrix into translation, rotation and scale components.
			</summary> 
			<param name="m"> Transformation matrix to decompose. </param>
			<param name="position"> Output vector, to which the translation component of the transformation will be put. </param>
			<param name="rot"> Output quaternion, to which the rotation component of the transformation will be put. </param>
			<param name="scale"> Output vector, to which the scale component of the transformation will be put. </param> 
		</member>
		<member name="M:Unigine.Math.decomposeTransform(Unigine.dmat4,Unigine.dvec3,Unigine.quat,Unigine.vec3)">
			<summary>
			Decomposes a given transformation matrix into translation, rotation and scale components.
			</summary> 
			<param name="m"> Transformation matrix to decompose. </param>
			<param name="position"> Output vector, to which the translation component of the transformation will be put. </param>
			<param name="rot"> Output quaternion, to which the rotation component of the transformation will be put. </param>
			<param name="scale"> Output vector, to which the scale component of the transformation will be put. </param> 
		</member>
		<member name="M:Unigine.Math.decomposeTransform(Unigine.mat4,Unigine.quat,Unigine.quat,Unigine.vec3)">
			<summary>
			Decomposes a given transformation matrix into a dual quaternion (representing both translation and rotation) and a scale vector. The dual-quaternion model is an accurate, computationally efficient, robust, and flexible method of representing rigid transforms and it is used in skeletal animation. See a Wikipedia article on dual quaternions and a beginners guide to dual-quaternions for more information.
			</summary> 
			<param name="m"> Transformation matrix to decompose. </param>
			<param name="q0"> Quaternion representing a real part of the dual quaternion. </param>
			<param name="q1"> Quaternion representing a dual part of the dual quaternion. </param>
			<param name="scale"> Scale part of the transformation. </param> 
		</member>
		<member name="M:Unigine.Math.determinant(mat2)">
			<summary>
			Returns the determinant of the given matrix.
			</summary> 
			<param name="m"> Matrix, for which the determinant is to be calculated. </param> 
			<returns>Matrix determinant.</returns>
		</member>
		<member name="M:Unigine.Math.determinant(mat3)">
			<summary>
			Returns the determinant of the given matrix.
			</summary> 
			<param name="m"> Matrix, for which the determinant is to be calculated. </param> 
			<returns>Matrix determinant.</returns>
		</member>
		<member name="M:Unigine.Math.determinant(Unigine.mat4)">
			<summary>
			Returns the determinant of the given matrix.
			</summary> 
			<param name="m"> Matrix, for which the determinant is to be calculated. </param> 
			<returns>Matrix determinant.</returns>
		</member>
		<member name="M:Unigine.Math.determinant(Unigine.dmat4)">
			<summary>
			Returns the determinant of the given matrix.
			</summary> 
			<param name="m"> Matrix, for which the determinant is to be calculated. </param> 
			<returns>Matrix determinant.</returns>
		</member>
		<member name="M:Unigine.Math.frustum(float,float,float,float,float,float)">
			<summary>
			Returns perspective projection matrix:				Coordinates of top, left, right, bottom are set relatively to center point of the znear plane.																										There are two different points (A and B) on the picture above. Since the top, left, right, bottom are coordinates relatively to the center point of the znear plane, coordinates of the A point should be A(left, bottom, znear). Coordinates of the B point are B(k * left, k * bottom, zfar), where k = zfar/znear.
			</summary> 
			<param name="left"> Left coordinate of the near clipping plane relatively to the center. </param>
			<param name="right"> Right coordinate of the near clipping plane relatively to the center. </param>
			<param name="bottom"> Bottom coordinate of the near clipping plane relatively to the center. </param>
			<param name="top"> Top coordinate of the near clipping plane relatively to the center. </param>
			<param name="znear"> Distance to the near depth clipping plane. </param>
			<param name="zfar"> Distance to the farther depth clipping plane. </param> 
			<returns>Perspective projection matrix.</returns>
		</member>
		<member name="M:Unigine.Math.inverse(mat2)">
			<summary>
			Returns inverse of a matrix. The inverse of a matrix is a matrix that if multiplied by the original would result in identity matrix: AA				-1 = A				-1A = I.
			</summary> 
			<param name="m"> Matrix to be inverted. </param> 
			<returns>Inverse of the matrix.</returns>
		</member>
		<member name="M:Unigine.Math.inverse(mat3)">
			<summary>
			Returns inverse of a matrix. The inverse of a matrix is a matrix that if multiplied by the original would result in identity matrix: AA				-1 = A				-1A = I.
			</summary> 
			<param name="m"> Matrix to be inverted. </param> 
			<returns>Inverse of the matrix.</returns>
		</member>
		<member name="M:Unigine.Math.inverse(Unigine.dmat4)">
			<summary>
			Returns inverse of a matrix. The inverse of a matrix is a matrix that if multiplied by the original would result in identity matrix: AA				-1 = A				-1A = I.
			</summary> 
			<param name="m"> Matrix to be inverted. </param> 
			<returns>Inverse of the matrix.</returns>
		</member>
		<member name="M:Unigine.Math.inverse(Unigine.dmat4,Unigine.dmat4)">
			<summary>
			Returns inverse of a matrix. The inverse of a matrix is a matrix that if multiplied by the original would result in identity matrix: AA				-1 = A				-1A = I.
			</summary> 
			<param name="ret"> Output matrix, to which the inverted matrix will be put. </param>
			<param name="m"> Matrix to be inverted. </param> 
			<returns>Inverse of the matrix.</returns>
		</member>
		<member name="M:Unigine.Math.inverse(Unigine.mat4)">
			<summary>
			Returns inverse of a matrix. The inverse of a matrix is a matrix that if multiplied by the original would result in identity matrix: AA				-1 = A				-1A = I.
			</summary> 
			<param name="m"> Matrix to be inverted. </param> 
			<returns>Inverse of the matrix.</returns>
		</member>
		<member name="M:Unigine.Math.inverse(Unigine.quat)">
			<summary>
			Returns inverse of a quaternion. The inverse of a quaternion is a quaternion that if multiplied by the original would result in identity matrix: qq				-1 = 1. If				q = a + bi + cj + dk, then q-1 = a - bi - cj - dk
			</summary> 
			<param name="q"> Quaternion to be inverted. </param> 
			<returns>Inverse of the quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.inverse4(Unigine.mat4)">
			<summary>
			Inverts a matrix that consists of a 3×4 sub-matrix (upper left) and a translation vector. The last row of the matrix is ignored. Compared to the inverse() function, this one is a bit faster and, which is more important, more stable. A matrix suitable for such inversion looks like this:				The function does the same as inverse (dmat4)
			</summary> 
			<param name="m"> Matrix to be inverted. </param> 
			<returns>Inverse of the matrix.</returns>
		</member>
		<member name="M:Unigine.Math.inverse4(Unigine.dmat4)">
			<summary>
			Inverts a matrix that consists of a 3×4 sub-matrix (upper left) and a translation vector. The last row of the matrix is ignored. Compared to the inverse() function, this one is a bit faster and, which is more important, more stable. A matrix suitable for such inversion looks like this:				The function does the same as inverse (dmat4)
			</summary> 
			<param name="m"> Matrix to be inverted. </param> 
			<returns>Inverse of the matrix.</returns>
		</member>
		<member name="M:Unigine.Math.inverse4(Unigine.dmat4,Unigine.dmat4)">
			<summary>
			Inverts a matrix that consists of a 3×4 sub-matrix (upper left) and a translation vector. The last row of the matrix is ignored. Compared to the inverse() function, this one is a bit faster and, which is more important, more stable. A matrix suitable for such inversion looks like this:				The function does the same as inverse (dmat4)
			</summary> 
			<param name="ret"> Output matrix, to which the orthonormalized matrix will be put. </param>
			<param name="m"> Matrix to be inverted. </param> 
			<returns>Inverse of the matrix.</returns>
		</member>
		<member name="M:Unigine.Math.jacobi(mat3,mat3)">
			<summary>
			Returns the Jacobian matrix for the given 3x3 matrix.
			</summary> 
			<param name="m"> Matrix, for which the Jacobian matrix is to be calculated. </param>
			<param name="v"> Output matrix, to which the calculated Jacobian matrix will be put. </param> 
			<returns>Jacobian matrix.</returns>
		</member>
		<member name="M:Unigine.Math.lookAt(Unigine.vec3,Unigine.vec3,Unigine.vec3,int)">
			<summary>
			Returns a view matrix for the given eye point, target point, up and forward direction vectors. The forward direction vector is oriented along the specified axis (negative Z, by default). This function is used to create a view matrix that positions and orients a camera or object in 3D space to "look at" a given target point.
			</summary> 
			<param name="position"> Coordinates of the eye point position. </param>
			<param name="target"> Coordinates of the target point position. </param>
			<param name="up"> Direction of the up vector. </param>
			<param name="axis"> Axis along which the forward direction vector is oriented (which axis should face the target). One of the AXIS_* values (by default it's AXIS_NZ). </param> 
			<returns>The viewing matrix.</returns>
		</member>
		<member name="M:Unigine.Math.lookAt(Unigine.dvec3,Unigine.dvec3,Unigine.vec3,int)">
			<summary>
			Returns a view matrix for the given eye point, target point, up and forward direction vectors. The forward direction vector is oriented along the specified axis (negative Z, by default). This function is used to create a view matrix that positions and orients a camera or object in 3D space to "look at" a given target point.
			</summary> 
			<param name="position"> Coordinates of the eye point position. </param>
			<param name="target"> Coordinates of the target point position. </param>
			<param name="up"> Direction of the up vector. </param>
			<param name="axis"> Axis along which the forward direction vector is oriented (which axis should face the target). One of the AXIS_* values (by default it's AXIS_NZ). </param> 
			<returns>The viewing matrix.</returns>
		</member>
		<member name="M:Unigine.Math.obliqueProjection(Unigine.mat4,Unigine.vec4)">
			<summary>
			Returns the oblique projection matrix.
			</summary> 
			<param name="projection"> Projection matrix. </param>
			<param name="plane"> Clipping plane coordinates. </param> 
			<returns>Oblique projection matrix.</returns>
		</member>
		<member name="M:Unigine.Math.orthoTangent(Unigine.vec4,Unigine.vec3)">
			<summary>
			Creates the ortho triangle tangent space basis.
			</summary> 
			<param name="tangent"> Tangent vector. </param>
			<param name="normal"> Normal vector. </param> 
			<returns>The tangent basis.</returns>
		</member>
		<member name="M:Unigine.Math.orthoTangent(Unigine.vec3,Unigine.vec3,Unigine.vec3)">
			<summary>
			Creates the ortho triangle tangent space basis.
			</summary> 
			<param name="tangent"> Tangent vector. </param>
			<param name="binormal"> Binormal vector. </param>
			<param name="normal"> Normal vector. </param> 
			<returns>The tangent basis.</returns>
		</member>
		<member name="M:Unigine.Math.ortho(float,float,float,float,float,float)">
			<summary>
			Returns parallel projection matrix:
			</summary> 
			<param name="left"> Left vertical clipping plane. </param>
			<param name="right"> Right vertical clipping plane. </param>
			<param name="bottom"> Bottom horizontal clipping plane. </param>
			<param name="top"> Top horizontal clipping plane. </param>
			<param name="znear"> Nearest depth clipping plane. </param>
			<param name="zfar"> Farther depth clipping plane. </param> 
			<returns>Parallel projection matrix.</returns>
		</member>
		<member name="M:Unigine.Math.orthonormalize(mat3)">
			<summary>
			Orthonormalizes a matrix.
			</summary> 
			<param name="m"> Matrix to be orthonormalized. </param> 
			<returns>Orthonormal matrix.</returns>
		</member>
		<member name="M:Unigine.Math.orthonormalize(Unigine.mat4)">
			<summary>
			Orthonormalizes a matrix.
			</summary> 
			<param name="m"> Matrix to be orthonormalized. </param> 
			<returns>Orthonormal matrix.</returns>
		</member>
		<member name="M:Unigine.Math.orthonormalize(Unigine.dmat4)">
			<summary>
			Orthonormalizes a matrix.
			</summary> 
			<param name="m"> Matrix to be orthonormalized. </param> 
			<returns>Orthonormal matrix.</returns>
		</member>
		<member name="M:Unigine.Math.orthonormalize(mat3,mat3)">
			<summary>
			Orthonormalizes a matrix.
			</summary> 
			<param name="ret"> Output matrix, to which the orthonormalized matrix will be put. </param>
			<param name="m"> Matrix to be orthonormalized. </param> 
			<returns>Orthonormal matrix.</returns>
		</member>
		<member name="M:Unigine.Math.orthonormalize(Unigine.mat4,Unigine.mat4)">
			<summary>
			Orthonormalizes a matrix.
			</summary> 
			<param name="ret"> Output matrix, to which the orthonormalized matrix will be put. </param>
			<param name="m"> Matrix to be orthonormalized. </param> 
			<returns>Orthonormal matrix.</returns>
		</member>
		<member name="M:Unigine.Math.orthonormalize(Unigine.dmat4,Unigine.dmat4)">
			<summary>
			Orthonormalizes a matrix.
			</summary> 
			<param name="ret"> Output matrix, to which the orthonormalized matrix will be put. </param>
			<param name="m"> Matrix to be orthonormalized. </param> 
			<returns>Orthonormal matrix.</returns>
		</member>
		<member name="M:Unigine.Math.isOrthoProjection(Unigine.mat4)">
			<summary>
			Returns a value indicating if the specified projection matrix represents an orthographic projection.
			</summary> 
			<param name="projection"> Projection matrix. </param> 
			<returns>true if there is the specified projection matrix represents an orthographic projection, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Math.isPerspectiveProjection(Unigine.mat4)">
			<summary>
			Returns a value indicating if the specified projection matrix represents a perspective projection.
			</summary> 
			<param name="projection"> Projection matrix. </param> 
			<returns>true if there is the specified projection matrix represents a perspective projection, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Math.perspective(float,float,float,float)">
			<summary>
			Returns perspective projection matrix.
			</summary> 
			<param name="fov"> Field of view angle. </param>
			<param name="aspect"> Aspect ratio. The aspect ratio is the ratio of width to height. </param>
			<param name="znear"> Nearest depth clipping plane. </param>
			<param name="zfar"> Farther depth clipping plane. </param> 
			<returns>Perspective projection matrix.</returns>
		</member>
		<member name="M:Unigine.Math.reflect(Unigine.vec4)">
			<summary>
			Returns reflection matrix about a given plane.
			</summary> 
			<param name="plane"> Reflection plane. </param> 
			<returns>Reflection matrix.</returns>
		</member>
		<member name="M:Unigine.Math.reflect(Unigine.dvec4)">
			<summary>
			Returns reflection matrix about a given plane.
			</summary> 
			<param name="plane"> Reflection plane. </param> 
			<returns>Reflection matrix.</returns>
		</member>
		<member name="M:Unigine.Math.reflect(Unigine.vec3,Unigine.vec3)">
			<summary>
			Reflects a given vector about a plane with the specified normal vector.
			</summary> 
			<param name="v0"> Vector to be reflected. </param>
			<param name="v1"> Normal vector to the reflection plane. </param> 
			<returns>Reflected vector.</returns>
		</member>
		<member name="M:Unigine.Math.reflect(Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Reflects a given vector about a plane with the specified normal vector.
			</summary> 
			<param name="v0"> Vector to be reflected. </param>
			<param name="v1"> Normal vector to the reflection plane. </param> 
			<returns>Reflected vector.</returns>
		</member>
		<member name="M:Unigine.Math.reflect(Unigine.vec3,Unigine.vec3,Unigine.vec3)">
			<summary>
			Reflects a given vector about a plane with the specified normal vector.
			</summary> 
			<param name="ret"> Reflected vector. </param>
			<param name="ret"> Output vector, to which the reflected vector will be put. </param>
			<param name="v0"> Vector to be reflected. </param>
			<param name="v1"> Normal vector to the reflection plane. </param> 
			<returns>Reflected vector.</returns>
		</member>
		<member name="M:Unigine.Math.reflect(Unigine.dvec3,Unigine.dvec3,Unigine.dvec3)">
			<summary>
			Reflects a given vector about a plane with the specified normal vector.
			</summary> 
			<param name="ret"> Output vector, to which the reflected vector will be put. </param>
			<param name="v0"> Vector to be reflected. </param>
			<param name="v1"> Normal vector to the reflection plane. </param> 
			<returns>Reflected vector.</returns>
		</member>
		<member name="M:Unigine.Math.removeScale(Unigine.mat4,Unigine.vec3)">
			<summary>
			Resets the transformation scale by replacing the scale component of the transformation matrix with a vec3_one (vector filled with ones). The original scale is stored in the vector argument.
			</summary> 
			<param name="ret"> Matrix to store the output. </param>
			<param name="scale"> Vector to store the scale component of the transformation. </param> 
			<returns>Output matrix.</returns>
		</member>
		<member name="M:Unigine.Math.removeScale(Unigine.mat4)">
			<summary>
			Resets the transformation scale by replacing the scale component of the transformation matrix with a vec3_one (vector filled with ones).
			</summary> 
			<param name="ret"> Matrix to store the output. </param> 
			<returns>Output matrix.</returns>
		</member>
		<member name="M:Unigine.Math.removeScale(Unigine.dmat4,Unigine.vec3)">
			<summary>
			Resets the transformation scale by replacing the scale component of the transformation matrix with a vec3_one (vector filled with ones). The original scale is stored in the vector argument.
			</summary> 
			<param name="ret"> Matrix to store the output. </param>
			<param name="scale"> Vector to store the scale component of the transformation. </param> 
			<returns>Output matrix.</returns>
		</member>
		<member name="M:Unigine.Math.removeScale(Unigine.dmat4)">
			<summary>
			Resets the transformation scale by replacing the scale component of the transformation matrix with a vec3_one (vector filled with ones).
			</summary> 
			<param name="ret"> Matrix to store the output. </param> 
			<returns>Output matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotateX(float)">
			<summary>
			Returns rotation matrix for the given angle around X axis:
			</summary> 
			<param name="angle"> Rotation angle, in degrees. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotateX(double)">
			<summary>
			Returns the X rotation matrix.
			</summary> 
			<param name="angle"> Rotation angle, in degrees. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotateY(float)">
			<summary>
			Returns rotation matrix for the given angle around Y axis:
			</summary> 
			<param name="angle"> Rotation angle, in degrees. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotateY(double)">
			<summary>
			Returns the Y rotation matrix.
			</summary> 
			<param name="angle"> Rotation angle, in degrees. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotateZ(float)">
			<summary>
			Returns rotation matrix for the given angle around Z axis:
			</summary> 
			<param name="angle"> Rotation angle, in degrees. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotateZ(double)">
			<summary>
			Returns the Z rotation matrix.
			</summary> 
			<param name="angle"> Rotation angle, in degrees. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotate(double,double,double,double)">
			<summary>
			Returns rotation matrix for the given angle around the given axis (X, Y, Z).
			</summary> 
			<param name="x"> X component of rotation axis. </param>
			<param name="y"> Y component of rotation axis. </param>
			<param name="z"> Z component of rotation axis. </param>
			<param name="angle"> Rotation angle, in degrees. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotate(float,float,float,float)">
			<summary>
			Returns rotation matrix for the given angle around the given axis (X, Y, Z).
			</summary> 
			<param name="x"> X component of rotation axis. </param>
			<param name="y"> Y component of rotation axis. </param>
			<param name="z"> Z component of rotation axis. </param>
			<param name="angle"> Rotation angle, in degrees. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotate(Unigine.quat)">
			<summary>
			Returns rotation matrix for the given quaternion.
			</summary> 
			<param name="q"> Rotation quaternion. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotate(Unigine.vec3,float)">
			<summary>
			Returns rotation matrix.
			</summary> 
			<param name="axis"> Rotation axis. This vector does not have to be normalized. </param>
			<param name="angle"> Rotation angle, in degrees. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotate(Unigine.dvec3,double)">
			<summary>
			Returns rotation matrix for the given angle around the given axis (X, Y, Z).
			</summary> 
			<param name="axis"> Rotation axis. This vector does not have to be normalized. </param>
			<param name="angle"> Rotation angle, in degrees. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotateTowards(Unigine.quat,Unigine.quat,float)">
			<summary>
			Rotates the source quaternion towards the target quaternion by an angular step of max_angle (note, that the rotation will not overshoot).
			</summary> 
			<param name="source"> Source quaternion. </param>
			<param name="target"> Target quaternion. </param>
			<param name="max_angle"> Angular step, in degrees. If a negative value is specified, 0 will be used instead. </param> 
			<returns>Resulting quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.rotateTowards(Unigine.vec3,Unigine.vec3,float)">
			<summary>
			Rotates the source vector towards the target vector by an angular step of max_angle (note, that the rotation will not overshoot).
			</summary> 
			<param name="source"> Source vector. </param>
			<param name="target"> Target vector. </param>
			<param name="max_angle"> Angular step, in degrees. If a negative value is specified, 0 will be used instead. </param> 
			<returns>Resulting vector.</returns>
		</member>
		<member name="M:Unigine.Math.rotation(Unigine.mat4)">
			<summary>
			Returns the rotation matrix for the given source matrix ignoring the translation column. For more information see Matrix Transformations.
			</summary> 
			<param name="m"> Source matrix. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotation(Unigine.dmat4)">
			<summary>
			Returns the rotation matrix for the given source matrix ignoring the translation column. For more information see Matrix Transformations.
			</summary> 
			<param name="m"> Source matrix. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotation(Unigine.mat4,Unigine.mat4)">
			<summary>
			Returns the rotation matrix for the given source matrix ignoring the translation column. For more information see Matrix Transformations.
			</summary> 
			<param name="ret"> Output matrix, to which the rotation matrix will be put. </param>
			<param name="m"> Source matrix. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotation(Unigine.dmat4,Unigine.dmat4)">
			<summary>
			Returns the rotation matrix for the given source matrix ignoring the translation column. For more information see Matrix Transformations.
			</summary> 
			<param name="ret"> Output matrix, to which the rotation matrix will be put. </param>
			<param name="m"> Source matrix. </param> 
			<returns>Rotation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.rotationFromDir(Unigine.vec3,Unigine.vec3)">
			<summary>
			Returns the rotation quaternion for the specified "forward" and "up" directions. For more information see Matrix Transformations.
			</summary> 
			<param name="forward"> Forward direction vector defining the direction to look in. </param>
			<param name="up"> Vector defining in which direction up is. </param> 
			<returns>Rotation quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.rotationFromDir(Unigine.vec3)">
			<summary>
			Returns the rotation quaternion for the specified "forward" direction (the default "up" vector is used). For more information see Matrix Transformations.
			</summary> 
			<param name="forward"> Forward direction vector defining the direction to look in. </param> 
			<returns>Rotation quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.rotationFromTo(Unigine.vec3,Unigine.vec3)">
			<summary>
			Returns the rotation quaternion for the specified source and target directions. For more information see Matrix Transformations.
			</summary> 
			<param name="from_dir"> Vector defining the initial direction. </param>
			<param name="to_dir"> Vector defining the target direction. </param> 
			<returns>Rotation quaternion.</returns>
		</member>
		<member name="M:Unigine.Math.scale(float,float,float)">
			<summary>
			Returns scaling matrix for the specified scaling vector (X, Y, Z):
			</summary> 
			<param name="x"> X component of the scaling vector. </param>
			<param name="y"> Y component of the scaling vector. </param>
			<param name="z"> Z component of the scaling vector. </param> 
			<returns>Scaling matrix.</returns>
		</member>
		<member name="M:Unigine.Math.scale(double,double,double)">
			<summary>
			Returns scaling matrix for the specified scaling vector (X, Y, Z):
			</summary> 
			<param name="x"> X component of the scaling vector. </param>
			<param name="y"> Y component of the scaling vector. </param>
			<param name="z"> Z component of the scaling vector. </param> 
			<returns>Scaling matrix.</returns>
		</member>
		<member name="M:Unigine.Math.scale(Unigine.vec3)">
			<summary>
			Returns the scaling matrix for the specified scaling vector (X, Y, Z):
			</summary> 
			<param name="v"> Scaling vector. </param> 
			<returns>Scaling matrix.</returns>
		</member>
		<member name="M:Unigine.Math.scale(Unigine.dvec3)">
			<summary>
			Returns the scaling matrix for the specified scaling vector (X, Y, Z):
			</summary> 
			<param name="v"> Scaling vector. </param> 
			<returns>Scaling matrix.</returns>
		</member>
		<member name="M:Unigine.Math.setTo(Unigine.dvec3,Unigine.dvec3,Unigine.vec3,int)">
			<summary>
			Returns the a transformation matrix, which puts an object to the specified position and sets it orientation to the specified target point. The forward direction vector is oriented along the specified axis (negative Z, by default). This function is similar to the lookAt() function, but instead of creating a view matrix for a camera, it creates a model matrix for positioning and orienting an object. This can be used to position objects in world space, aligning them to look at a target while maintaining a specific orientation relative to the "up" direction.
			</summary> 
			<param name="position"> Coordinates of the eye point position. </param>
			<param name="target"> Coordinates of the target point position. </param>
			<param name="up"> Direction of the up vector. </param>
			<param name="axis"> Axis along which the forward direction vector is oriented (which axis should face the target). One of the AXIS_* values (by default it's AXIS_NZ). </param> 
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.setTo(Unigine.vec3,Unigine.vec3,Unigine.vec3,int)">
			<summary>
			Returns the a transformation matrix, which puts an object to the specified position and sets it orientation to the specified target point. The forward direction vector is oriented along the specified axis (negative Z, by default). This function is similar to the lookAt() function, but instead of creating a view matrix for a camera, it creates a model matrix for positioning and orienting an object. This can be used to position objects in world space, aligning them to look at a target while maintaining a specific orientation relative to the "up" direction.
			</summary> 
			<param name="position"> Coordinates of the eye point position. </param>
			<param name="target"> Coordinates of the target point position. </param>
			<param name="up"> Direction of the up vector. </param>
			<param name="axis"> Axis along which the forward direction vector is oriented (which axis should face the target). One of the AXIS_* values (by default it's AXIS_NZ). </param> 
			<returns>Transformation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.symmetryProjection(Unigine.mat4)">
			<summary>
			Returns a symmetric projection matrix for the specified input projection matrix. Symmetric projection ensures that the view frustum is symmetric about the x and y axes, based on the original frustum dimensions. This could be useful in cases where asymmetry in the projection matrix might cause issues, such as distortion in the rendered scene or when performing specific visual effects (e.g., mirroring or aligning views). The result is a projection matrix that maintains the same depth-related behavior as the original one but ensures symmetry in the x and y directions.
			</summary> 
			<param name="projection"> Input projection matrix. </param> 
			<returns>Symmetric projection matrix.</returns>
		</member>
		<member name="M:Unigine.Math.translate(float,float,float)">
			<summary>
			Returns the translation matrix for the specified translation vector (X, Y, Z):
			</summary> 
			<param name="x"> X component of the translation vector. </param>
			<param name="y"> Y component of the translation vector. </param>
			<param name="z"> Z component of the translation vector. </param> 
			<returns>Translation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.translate(double,double,double)">
			<summary>
			Returns the translation matrix for the specified translation vector (X, Y, Z):
			</summary> 
			<param name="x"> X component of the translation vector. </param>
			<param name="y"> Y component of the translation vector. </param>
			<param name="z"> Z component of the translation vector. </param> 
			<returns>Translation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.translate(Unigine.vec3)">
			<summary>
			Returns the translation matrix for the specified translation vector (X, Y, Z):
			</summary> 
			<param name="v"> Translation vector. </param> 
			<returns>Translation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.translate(Unigine.dvec3)">
			<summary>
			Returns the translation matrix for the specified translation vector (X, Y, Z):
			</summary> 
			<param name="v"> Translation vector. </param> 
			<returns>Translation matrix.</returns>
		</member>
		<member name="M:Unigine.Math.transpose(mat2)">
			<summary>
			Transposes a given 2x2 matrix.
			</summary> 
			<param name="m"> Matrix to be transposed. </param> 
			<returns>Transposed matrix.</returns>
		</member>
		<member name="M:Unigine.Math.transpose(mat2,mat2)">
			<summary>
			Transposes a given 2x2 matrix.
			</summary> 
			<param name="ret"> Output matrix, to which the transposed matrix will be put. </param>
			<param name="m"> Matrix to be transposed. </param> 
			<returns>Transposed matrix.</returns>
		</member>
		<member name="M:Unigine.Math.transpose(mat3)">
			<summary>
			Transposes a given 3x3 matrix.
			</summary> 
			<param name="m"> Matrix to be transposed. </param> 
			<returns>Transposed matrix.</returns>
		</member>
		<member name="M:Unigine.Math.transpose(mat3,mat3)">
			<summary>
			Transposes a given 3x3 matrix.
			</summary> 
			<param name="ret"> Output matrix, to which the transposed matrix will be put. </param>
			<param name="m"> Matrix to be transposed. </param> 
		</member>
		<member name="M:Unigine.Math.transpose(Unigine.mat4)">
			<summary>
			Transposes a given 4x4 matrix.
			</summary> 
			<param name="m"> Matrix to be transposed. </param> 
			<returns>Transposed matrix.</returns>
		</member>
		<member name="M:Unigine.Math.transpose(Unigine.mat4,Unigine.mat4)">
			<summary>
			Transposes a given 4x4 matrix.
			</summary> 
			<param name="ret"> Output matrix, to which the transposed matrix will be put. </param>
			<param name="m"> Matrix to be transposed. </param> 
			<returns>Transposed matrix.</returns>
		</member>
		<member name="M:Unigine.Math.transpose3(Unigine.mat4)">
			<summary>
			Transposes the upper left 3×3 sub-matrix of a matrix.
			</summary> 
			<param name="m"> Matrix, a part of which will be transposed. </param> 
			<returns>Matrix, in which the upper left 3×3 sub-matrix is transposed. </returns>
		</member>
		<member name="M:Unigine.Math.transpose3(Unigine.mat4,outmat4,Unigine.mat4,Unigine.mat4)">
			<summary>
			Transposes the upper left 3×3 sub-matrix of a matrix.
			</summary> 
			<param name="ret"> Output matrix, to which the resulting matrix will be put. </param>
			<param name="m"> Matrix, a part of which will be transposed. </param> 
			<returns>Matrix, in which the upper left 3×3 sub-matrix is transposed. </returns>
		</member>
		<member name="F:Unigine.Math.AXIS_X">
			<summary>
			X axis.
		</summary>
		</member>
		<member name="F:Unigine.Math.AXIS_Y">
			<summary>
			Y axis.
		</summary>
		</member>
		<member name="F:Unigine.Math.AXIS_Z">
			<summary>
			Z axis.
		</summary>
		</member>
		<member name="F:Unigine.Math.AXIS_NX">
			<summary>
			Negative X axis.
		</summary>
		</member>
		<member name="F:Unigine.Math.AXIS_NY">
			<summary>
			Negative Y axis.
		</summary>
		</member>
		<member name="F:Unigine.Math.AXIS_NZ">
			<summary>
			Negative Z axis.
		</summary>
		</member>
		<member name="M:Unigine.Math.acos(float)">
			<summary>
			Returns the arccosine of the given argument - the angle in radians, whose cosine is equal to the argument. a == cos(acos(a)) for every value of a that is within acos()'s range.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Arccosine of the argument, in radians.</returns>
		</member>
		<member name="M:Unigine.Math.acos(double)">
			<summary>
			Returns the arccosine of the given argument - the angle in radians, whose cosine is equal to the argument. a == cos(acos(a)) for every value of a that is within acos()'s range.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Arccosine of the argument, in radians.</returns>
		</member>
		<member name="M:Unigine.Math.acosFast(float)">
			<summary>
			Returns the approximated, but calculated more quickly, arccosine of the given argument.
			</summary> 
			<param name="a"> Argument, in radians. </param> 
			<returns>Approximated arccosine of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.asin(float)">
			<summary>
			Returns the arcsine of the given argument - the angle in radians, whose sine is equal to the argument. a == sin(asin(a)) for every value of a that is within asin()'s range.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Arcsine of the argument, in radians.</returns>
		</member>
		<member name="M:Unigine.Math.asin(double)">
			<summary>
			Returns the arcsine of the given argument - the angle in radians, whose sine is equal to the argument. a == sin(asin(a)) for every value of a that is within asin()'s range.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Arcsine of the argument, in radians.</returns>
		</member>
		<member name="M:Unigine.Math.asinFast(float)">
			<summary>
			Returns the approximated, but calculated more quickly, arcsine of the given argument.
			</summary> 
			<param name="a"> Argument, in radians. </param> 
			<returns>Approximated arcsine of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.atan(float)">
			<summary>
			Returns the arctangent of the given argument - the angle in radians, whose tangent is equal to the argument. a == tan(atan(a)) for every value of a that is within atan()'s range.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Arctangent of the argument, in radians.</returns>
		</member>
		<member name="M:Unigine.Math.atan(double)">
			<summary>
			Returns the arctangent of the given argument - the angle in radians, whose tangent is equal to the argument. a == tan(atan(a)) for every value of a that is within atan()'s range.
			</summary> 
			<param name="v"> Argument. </param> 
			<returns>Arctangent of the argument, in radians.</returns>
		</member>
		<member name="M:Unigine.Math.atan2(float,float)">
			<summary>
			Returns the arctangent of two arguments (x and y). It is similar to calculating the arctangent of y / x, except that the signs of both arguments are used to determine the quadrant of the result.
			</summary> 
			<param name="y"> First argument. </param>
			<param name="x"> Second argument. </param> 
			<returns>Result in radians, which is between -PI and PI (inclusive).</returns>
		</member>
		<member name="M:Unigine.Math.atan2(double,double)">
			<summary>
			Returns the arctangent of two arguments (x and y). It is similar to calculating the arctangent of y / x, except that the signs of both arguments are used to determine the quadrant of the result.
			</summary> 
			<param name="y"> First argument. </param>
			<param name="x"> Second argument. </param> 
			<returns>Result in radians, which is between -PI and PI (inclusive).</returns>
		</member>
		<member name="M:Unigine.Math.cos(float)">
			<summary>
			Returns the cosine of the given argument.
			</summary> 
			<param name="a"> Argument, in radians. </param> 
			<returns>Cosine of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.cos(double)">
			<summary>
			Returns the cosine of the given argument.
			</summary> 
			<param name="a"> Argument, in radians. </param> 
			<returns>Cosine of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.cosFast(float)">
			<summary>
			Returns the approximated, but calculated more quickly, cosine of the given argument.
			</summary> 
			<param name="a"> Argument, in radians. </param> 
			<returns>Approximated cosine of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.cosFastFixed(float)">
			<summary>
			Returns the approximated, but calculated more quickly, cosine of the given argument in range [-pi*0.5, pi*0.5].
			</summary> 
			<param name="a"> Argument, in radians, in range [-pi*0.5, pi*0.5]. </param> 
			<returns>Approximated cosine of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.sin(float)">
			<summary>
			Returns the sine of the given argument.
			</summary> 
			<param name="a"> Argument, in radians. </param> 
			<returns>Sine of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.sin(double)">
			<summary>
			Returns the sine of the given argument.
			</summary> 
			<param name="a"> Argument, in radians. </param> 
			<returns>Sine of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.sinFast(float)">
			<summary>
			Returns the approximated, but calculated more quickly, sine of the given argument.
			</summary> 
			<param name="a"> Argument, in radians. </param> 
			<returns>Approximated sine of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.sinFastFixed(float)">
			<summary>
			Returns the approximated, but calculated more quickly, sine of the given argument in range [-pi*0.5, pi*0.5].
			</summary> 
			<param name="a"> Argument, in radians, in range [-pi*0.5, pi*0.5]. </param> 
			<returns>Approximated sine of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.sincos(float,float,float)">
			<summary>
			Calculates sine and cosine values for the specified angle value given in radians and puts them to out_sin and out_cos.
			</summary> 
			<param name="angle"> Angle, in radians. </param>
			<param name="s"> Variable, to which the calculated sine value is to be put. </param>
			<param name="c"> Variable, to which the calculated cosine value is to be put. </param> 
		</member>
		<member name="M:Unigine.Math.sincos(double,double,double)">
			<summary>
			Calculates sine and cosine values for the specified angle value given in radians and puts them to out_sin and out_cos.
			</summary> 
			<param name="angle"> Angle, in radians. </param>
			<param name="s"> Variable, to which the calculated sine value is to be put. </param>
			<param name="c"> Variable, to which the calculated cosine value is to be put. </param> 
		</member>
		<member name="M:Unigine.Math.sincosFast(float,float,float)">
			<summary>
			Calculates approximated sine and cosine values for the specified angle value given in radians and puts them to out_sin and out_cos.
			</summary> 
			<param name="angle"> Angle, in radians. </param>
			<param name="s"> Variable, to which the calculated sine value is to be put. </param>
			<param name="c"> Variable, to which the calculated cosine value is to be put. </param> 
		</member>
		<member name="M:Unigine.Math.tan(float)">
			<summary>
			Returns the tangent of the given argument.
			</summary> 
			<param name="a"> Argument, in radians. </param> 
			<returns>Tangent of the argument.</returns>
		</member>
		<member name="M:Unigine.Math.tan(double)">
			<summary>
			Returns the tangent of the given argument.
			</summary> 
			<param name="a"> Argument, in radians. </param> 
			<returns>Tangent of the argument.</returns>
		</member>
	</members>
</doc>