<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Engine.get">
			<summary>
			Returns a pointer to the existing engine instance.
			</summary>  
			<returns>Pointer to the existing engine.</returns>
		</member>
		<member name="M:Unigine.Engine.getArg(int) const">
			<summary>
			Returns a command line argument by its index.
			</summary> 
			<param name="num"> Index of the command line argument. </param> 
			<returns>Command line argument.</returns>
		</member>
		<member name="M:Unigine.Engine.getArgf(int) const">
			<summary>
			Returns a command line argument by its index converted to a floating point value.
			</summary> 
			<param name="num"> Index of the command line argument. </param> 
			<returns>Command line argument.</returns>
		</member>
		<member name="M:Unigine.Engine.getArgi(int) const">
			<summary>
			Returns a command line argument by its index converted to an integer value.
			</summary> 
			<param name="num"> Index of the command line argument. </param> 
			<returns>Command line argument.</returns>
		</member>
		<member name="M:Unigine.Engine.getBuildConfiguration">
			<summary>
			Returns the current Engine build configuration.
			</summary>  
			<returns>Current build configuration. One of the BUILD_CONFIG_ values.</returns>
		</member>
		<member name="M:Unigine.Engine.getLibraryModulePath">
			<summary>
			Returns a path to the Engine's dynamic library file.
			</summary>  
			<returns>Path to the Engine's dynamic library file.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorFunction(char,int) const">
			<summary>
			Returns the editor function identifier.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>The editor script function identifier.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorFunction(char,int) const">
			<summary>
			Returns a value indicating if the editor script function exists.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>true if the editor script function exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorInterpreter const">
			<summary>
			Returns a pointer to the editor interpreter.
			</summary>  
			<returns>Pointer to the editor interpreter.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorInterpreter const">
			<summary>
			Returns a value indicating if the function is called from the editor script.
			</summary>  
			<returns>true if the function is called from the editor script; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorLoaded const">
			<summary>
			Returns a value indicating if the editor script is loaded.
			</summary>  
			<returns>true if the editor script is loaded; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getEditorLogic(int) const">
			<summary>
			Returns the registered EditorLogic instance by its number.
			</summary> 
			<param name="num"> Number of the EditorLogic instance. </param> 
			<returns>EditorLogic instance.</returns>
		</member>
		<member name="M:Unigine.Engine.setEditorVariable(char,Unigine.Variable)">
			<summary>
			Sets the editor script variable by its name.
			</summary> 
			<param name="name"> Name of the editor script variable. </param>
			<param name="v"> Value of the editor script variable. </param> 
		</member>
		<member name="M:Unigine.Engine.getEditorVariable(char) const">
			<summary>
			Returns the editor script variable by its name.
			</summary> 
			<param name="name"> Name of the world script variable. </param> 
			<returns>Value of the editor script variable.</returns>
		</member>
		<member name="M:Unigine.Engine.isEditorVariable(char) const">
			<summary>
			Returns a value indicating if the editor script variable exists.
			</summary> 
			<param name="name"> Name of the editor script variable. </param> 
			<returns>true if the editor script variable exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getArg(int)">
			<summary>
			Returns the command-line argument by its index.
			</summary> 
			<param name="num"> Index of the argument. </param> 
			<returns>Command-line argument</returns>
		</member>
		<member name="M:Unigine.Engine.getPlugin(char)">
			<summary>
			Returns the loaded plugin interface.
			</summary> 
			<param name="name"> Name of the loaded plugin. </param> 
			<returns>Interface of the loaded plugin, if it exists; otherwise, nullptr.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginData(int) const">
			<summary>
			Returns the loaded plugin data.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Data of the loaded plugin, if it exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginInterface(int) const">
			<summary>
			Returns the loaded plugin interface.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Interface of the loaded plugin, if it exists; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginName(int) const">
			<summary>
			Returns the name of the loaded plugin by its index.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Loaded plugin name.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginOrder(int) const">
			<summary>
			Returns the execution order of the loaded plugin by its index.
			</summary> 
			<param name="num"> Index of the loaded plugin. </param> 
			<returns>Loaded plugin execution order.</returns>
		</member>
		<member name="M:Unigine.Engine.getPluginPath(int) const">
			<summary>
			Returns a path to a plugin directory specified via -plugin_path.
			</summary> 
			<param name="num"> Plugin path number in the row of the specified plugin paths. </param> 
			<returns>Path to a plugin directory.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemFunction(char,int) const">
			<summary>
			Returns the system function identifier.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
			<returns>System script function identifier.</returns>
		</member>
		<member name="M:Unigine.Engine.isSystemFunction(char,int) const">
			<summary>
			Checks whether the system script function exists.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
			<returns>true if the system script function exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemInterpreter const">
			<summary>
			Returns a pointer to the system interpreter.
			</summary>  
			<returns>Pointer to the system interpreter.</returns>
		</member>
		<member name="M:Unigine.Engine.isSystemInterpreter const">
			<summary>
			Checks if the function is called from the system script.
			</summary>  
			<returns>true when the function is called from the system script; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getSystemLogic(int) const">
			<summary>
			Returns the registered SystemLogic instance by the given number.
			</summary> 
			<param name="num"> Number of the SystemLogic instance. </param> 
			<returns>SystemLogic instance.</returns>
		</member>
		<member name="M:Unigine.Engine.setSystemVariable(char,Unigine.Variable)">
			<summary>
			Sets a system script variable by a name.
			</summary> 
			<param name="name"> Name of the system script variable. </param>
			<param name="v"> Value of the system script variable. </param> 
		</member>
		<member name="M:Unigine.Engine.getSystemVariable(char) const">
			<summary>
			Returns the system script variable by its name.
			</summary> 
			<param name="name"> Name of the system script variable. </param> 
			<returns>System script variable.</returns>
		</member>
		<member name="M:Unigine.Engine.isSystemVariable(char) const">
			<summary>
			Checks whether a system script variable exists.
			</summary> 
			<param name="name"> Name of the system script variable. </param> 
			<returns>true if the system script variable exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getWorldFunction(char,int) const">
			<summary>
			Returns the world script function identifier.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>World script function identifier.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldFunction(char,int) const">
			<summary>
			Returns value indicating if the world script function exists.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>true if the world script function exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getWorldInterpreter const">
			<summary>
			Returns a pointer to the world interpreter.
			</summary>  
			<returns>Pointer to the world interpreter.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldInterpreter const">
			<summary>
			Returns a value indicating if the function is called from the world script.
			</summary>  
			<returns>true if the function is called from the world script; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldLoaded const">
			<summary>
			Returns a value indicating if the world script is loaded.
			</summary>  
			<returns>true if the world script is loaded; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.getWorldLogic(int) const">
			<summary>
			Returns the registered WorldLogic instance by its number.
			</summary> 
			<param name="num"> Number of the WorldLogic instance. </param> 
			<returns>WorldLogic instance.</returns>
		</member>
		<member name="M:Unigine.Engine.setWorldVariable(char,Unigine.Variable)">
			<summary>
			Sets a world script variable by its name.
			</summary> 
			<param name="name"> Name of the world script variable. </param>
			<param name="v"> Value of the world script variable. </param> 
		</member>
		<member name="M:Unigine.Engine.getWorldVariable(char) const">
			<summary>
			Returns a world script variable by its name.
			</summary> 
			<param name="name"> Name of the world script variable. </param> 
			<returns>World script variable.</returns>
		</member>
		<member name="M:Unigine.Engine.isWorldVariable(char) const">
			<summary>
			Returns a value indicating if the world script variable exists.
			</summary> 
			<param name="name"> Name of the world script variable. </param> 
			<returns>true if the world script variable exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.addEditorLogic(EditorLogic)">
			<summary>
			Adds an EditorLogic instance to the engine runtime.
			</summary> 
			<param name="logic"> EditorLogic instance. </param> 
			<returns>true if the EditorLogic instance has been added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.addPlugin(Plugin)">
			<summary>
			Adds a plugin to engine runtime by using a pointer to this plugin.
			</summary> 
			<param name="plugin"> Plugin pointer. </param> 
			<returns>true if the plugin ha been added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.addPlugin(char)">
			<summary>
			Adds a plugin to engine runtime by its name.
			</summary> 
			<param name="name"> Plugin name. </param> 
			<returns>true if the plugin has been added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.addSystemLogic(SystemLogic)">
			<summary>
			Adds a SystemLogic instance to Engine runtime.
			</summary> 
			<param name="logic"> SystemLogic instance. </param> 
			<returns>true if the SystemLogic instance has been added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.addWorldLogic(WorldLogic)">
			<summary>
			Adds a WorldLogic instance to the engine runtime.					Instances of the WorldLogic class should not be added while the world is loaded and the world script is being executed (as you can't change a world script while the world is loaded). In such a case the init() method shall not be called if the WorldLogic is added before opening the world.
			</summary> 
			<param name="logic"> WorldLogic instance. </param> 
			<returns>true if the WorldLogic instance has been added successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.findPlugin(char) const">
			<summary>
			Searches the index of the loaded plugin by its name.
			</summary> 
			<param name="name"> Name of the plugin. </param> 
			<returns>Index of the plugin if it is found, or -1 otherwise.</returns>
		</member>
		<member name="M:Unigine.Engine.main(SystemLogic,WorldLogic,EditorLogic)">
			<summary>
			Engine main loop. Replaces the following commands:
			</summary> 
			<param name="system"> A SystemLogic instance. </param>
			<param name="world"> A WorldLogic instance. </param>
			<param name="editor"> An EditorLogic instance. </param> 
		</member>
		<member name="M:Unigine.Engine.removeEditorLogic(EditorLogic)">
			<summary>
			Removes an EditorLogic instance from engine runtime.
			</summary> 
			<param name="logic"> An EditorLogic instance. </param> 
			<returns>true if the instance has been removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.destroyPlugin(Plugin)">
			<summary>
			Removes the specified plugin.
			</summary> 
			<param name="plugin"> Plugin pointer to remove. </param> 
			<returns>true if the plugin has been removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.removeSystemLogic(SystemLogic)">
			<summary>
			Removes a SystemLogic instance from engine runtime.
			</summary> 
			<param name="logic"> A SystemLogic instance. </param> 
			<returns>true if the instance has been removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.removeWorldLogic(WorldLogic)">
			<summary>
			Removes a WorldLogic instance from engine runtime.					Instances of the WorldLogic class should not be removed while the world is loaded and the world script is being executed (as you can't change a world script while the world is loaded). In such a case the shutdown() method shall not be called if the WorldLogic is removed before closing the world.
			</summary> 
			<param name="logic"> A WorldLogic instance. </param> 
			<returns>true if the instance has been removed successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function can receive up to 8 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 5 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 7 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(Unigine.Variable,Unigine.Variable,int)">
			<summary>
			Runs the editor script function by its name.
			</summary> 
			<param name="name"> Name of the editor script function. </param>
			<param name="args"> Pointer to editor script function arguments. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int)">
			<summary>
			Runs the editor script function by its id. The target function can receive up to 8 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,int)">
			<summary>
			Runs the editor script function by its id.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="args"> Pointer to editor script function arguments. </param>
			<param name="num_args"> Number of editor script function arguments. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 5 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 7 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runEditorFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the editor script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="id"> ID of the editor script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>Editor script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function can receive up to 8 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 7 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(Unigine.Variable,Unigine.Variable,int)">
			<summary>
			Runs system script function by its name.
			</summary> 
			<param name="name"> Name of the system script function. </param>
			<param name="args"> Pointer to system script function arguments. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int)">
			<summary>
			Runs the system script function by its id. The target function can receive up to 8 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,int)">
			<summary>
			Runs system script function by its id.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="args"> Pointer to system script function arguments. </param>
			<param name="num_args"> Number of system script function arguments. </param> 
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 1 argument.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 2 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 3 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 4 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 5 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 6 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 7 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runSystemFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the system script function by its id. The target function must receive 8 arguments.
			</summary> 
			<param name="id"> ID of the system script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>System script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function can receive up to 8 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 1 argument.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable)">
			<summary>
			Runs the world script function by its identifier. The target function must receive one argument.
			</summary> 
			<param name="id"> Identifier of the world script function. </param>
			<param name="a0"> Argument </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 2 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 3 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 4 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 5 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 6 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its name. The target function must receive 8 arguments.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(Unigine.Variable,Unigine.Variable,int)">
			<summary>
			Runs the world script function by its name.
			</summary> 
			<param name="name"> Name of the world script function. </param>
			<param name="args"> Pointer to world script function arguments. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int)">
			<summary>
			Runs the world script function by its id.
			</summary> 
			<param name="id"> ID of the world script function. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,int)">
			<summary>
			Runs the world script function by its id.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="args"> Pointer to world script function arguments. </param>
			<param name="num_args"> Number of world script function arguments. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 2 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 3 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param> 
			<returns>Runs the world script function by its id. The target function must receive 4 arguments.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 5 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 6 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 7 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.runWorldFunction(int,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable,Unigine.Variable)">
			<summary>
			Runs the world script function by its id. The target function must receive 8 arguments.
			</summary> 
			<param name="id"> ID of the world script function. </param>
			<param name="a0"> First argument. </param>
			<param name="a1"> Second argument. </param>
			<param name="a2"> Third argument. </param>
			<param name="a3"> Fourth argument. </param>
			<param name="a4"> Fifth argument. </param>
			<param name="a5"> Sixth argument. </param>
			<param name="a6"> Seventh argument. </param>
			<param name="a7"> Eighth argument. </param> 
			<returns>World script function return value.</returns>
		</member>
		<member name="M:Unigine.Engine.shutdown">
			<summary>
			Deletes the pointer to the existing engine instance.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.iterate">
			<summary>
			Engine iterate function (update, render, swap). This function must be called every frame.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.beginOutsideLoopRender">
			<summary>
			Starts a block of code where you can call Render class methods from outside the Engine's Loop. The end of this block should be marked with a call to the  method.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.endOutsideLoopRender">
			<summary>
			Closes a block of code where you can call Render class methods from outside the Engine's Loop started with a call to the  method.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.startFps">
			<summary>
			Starts the FPS counter if it was stopped. All function calls are placed into a stack, so the number of calls to this function should correspond to the number of calls to the stopFps() function.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.stopFps">
			<summary>
			Stops the FPS counter. This function should be called if application window is hidden or some heavy non-rendering tasks are processing. All function calls are placed into a stack, so the number of calls to this function should correspond to the number of calls to the startFps() function.
			</summary>  
		</member>
		<member name="M:Unigine.Engine.getVideoContextFlags">
			<summary>
			Returns the current video context flags.
			</summary>  
			<returns>A set of current video context flags as an integer value.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(int,wchar_t)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(InitParameters,int,char)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="init_parameters"> Structure of initializing parameters. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.init(InitParameters,int,wchar_t)">
			<summary>
			Initializes a new engine instance to be used with an external graphics application.
			</summary> 
			<param name="init_parameters"> Structure of initializing parameters. </param>
			<param name="argc"> Number of command line arguments. </param>
			<param name="argv"> Array of command line arguments values. </param> 
			<returns>Pointer to the new engine instance.</returns>
		</member>
		<member name="M:Unigine.Engine.quit">
			<summary>
			The Engine requests to exit the application.
			</summary>  
		</member>
		<member name="F:Unigine.Engine.GCMODE_DEFAULT">
			<summary>
			Default C# garbage collector mode. In this case heavy spikes and excessive memory consumption are imminent if you don't manage your objects properly and do not use the Dispose() method.
		</summary>
		</member>
		<member name="F:Unigine.Engine.GCMODE_USE_MEMORY_PRESSURE">
			<summary>
			Passes the information about C++ memory consumption to C#. This results in more frequent GC calls preventing the application from eating too much memory right after startup and removing heavy spikes.
		</summary>
		</member>
		<member name="F:Unigine.Engine.GCMODE_EVERY_FRAME">
			<summary>
			The garbage collector is called every frame. This results in overall performance reduction, but removes heavy spikes.
		</summary>
		</member>
		<member name="F:Unigine.Engine.GCMODE_WORLD_SHUTDOWN">
			<summary>
			The garbage collector is called on closing the world. This mode is ideal if the number of memory allocations is your code is insignificant.
		</summary>
		</member>
		<member name="F:Unigine.Engine.BACKGROUND_UPDATE_DISABLED">
			<summary>
			Background update is disabled.
		</summary>
		</member>
		<member name="F:Unigine.Engine.BACKGROUND_UPDATE_RENDER_NON_MINIMIZED">
			<summary>
			Background update is enabled (rendering is performed when the window is out of focus, but stops if the window is minimized).
		</summary>
		</member>
		<member name="F:Unigine.Engine.BACKGROUND_UPDATE_RENDER_ALWAYS">
			<summary>
			Background update is always enabled (rendering is performed all the time, regardless of the window state.
		</summary>
		</member>
		<member name="F:Unigine.Engine.BUILD_CONFIG_DEBUG">
			<summary>
			Debug build configuration.
		</summary>
		</member>
		<member name="F:Unigine.Engine.BUILD_CONFIG_DEVELOPMENT">
			<summary>
			Development build configuration.
		</summary>
		</member>
		<member name="F:Unigine.Engine.BUILD_CONFIG_RELEASE">
			<summary>
			Release build configuration.
		</summary>
		</member>
		<member name="F:Unigine.Engine.PRECISION_PRECISION_DOUBLE">
			<summary>
			Double precision type.
		</summary>
		</member>
		<member name="F:Unigine.Engine.PRECISION_PRECISION_FLOAT">
			<summary>
			Float precision type.
		</summary>
		</member>
	</members>
</doc>