<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.ConsoleVariableFloat.set(float) const">
			<summary>
			Sets the variable value.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableFloat.get const">
			<summary>
			Gets the variable value.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableFloat.ConsoleVariableFloat(char,char,int,float,float,float)">
			<summary>
			Console variable constructor.
			</summary> 
			<param name="name"> Name of the variable. </param>
			<param name="desc"> Variable description. </param>
			<param name="save"> Value indicating whether to save the variable value into the configuration file: 1 to save the variable; otherwise, 0. </param>
			<param name="value"> Float value of the variable. </param>
			<param name="min"> Minimum value of the variable. </param>
			<param name="max"> Maximum value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableFloat.operator float const">
			<summary>
			Cast operator for the variable.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableFloat.operator=(float)">
			<summary>
			Assignment operator for the variable.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableFloat.setGetFunc(float(*))">
			<summary>
			Sets a function that will be called when the get() function is called for the variable.
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableFloat.setSetFunc(void(*)(float))">
			<summary>
			Sets a function that will be called when the set() function is called for the variable. For example:
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableFloat.~ConsoleVariableFloat">
			<summary>
			Destructor.
			</summary>  
		</member>
		<member name="M:Unigine.ConsoleVariableInt.set(int) const">
			<summary>
			Sets the variable value.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableInt.get const">
			<summary>
			Gets the variable value.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableInt.ConsoleVariableInt(char,char,int,int,int,int)">
			<summary>
			Console variable constructor.
			</summary> 
			<param name="name"> Name of the variable. </param>
			<param name="desc"> Variable description. </param>
			<param name="save"> Value indicating whether to save the variable value into the configuration file: 1 to save the variable; otherwise, 0. </param>
			<param name="value"> Integer value of the variable. </param>
			<param name="min"> Minimum value of the variable. </param>
			<param name="max"> Maximum value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableInt.operator int const">
			<summary>
			Cast operator for the variable.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableInt.operator=(int)">
			<summary>
			Assignment operator for the variable.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableInt.setGetFunc(int(*))">
			<summary>
			Sets a function that will be called when the get() function is called for the variable.
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableInt.setSetFunc(void(*)(int))">
			<summary>
			Sets a function that will be called when the set() function is called for the variable. For example:
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableInt.~ConsoleVariableInt">
			<summary>
			Destructor.
			</summary>  
		</member>
		<member name="M:Unigine.ConsoleVariableString.set(char) const">
			<summary>
			Sets the variable value.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableString.get const">
			<summary>
			Gets the variable value.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableString.ConsoleVariableString(char,char,int,char)">
			<summary>
			Console variable constructor.
			</summary> 
			<param name="name"> Name of the variable. </param>
			<param name="desc"> Variable description. </param>
			<param name="save"> Value indicating whether to save the variable value into the configuration file: 1 to save the variable; otherwise,0. </param>
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableString.operator const char * const">
			<summary>
			Cast operator for the variable.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableString.operator=(char)">
			<summary>
			Assignment operator for the variable.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableString.setGetFunc(String(*))">
			<summary>
			Sets a function that will be called when the get() function is called for the variable.
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableString.setSetFunc(void(*)(String))">
			<summary>
			Sets a function that will be called when the set() function is called for the variable. For example:
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableString.~ConsoleVariableString">
			<summary>
			Destructor.
			</summary>  
		</member>
		<member name="M:Unigine.ConsoleVariableVec2.set(Unigine.Math.vec2) const">
			<summary>
			Sets the variable value.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec2.get const">
			<summary>
			Gets the variable value.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableVec2.ConsoleVariableVec2(char,char,int,Unigine.Math.vec2,Unigine.Math.vec2,Unigine.Math.vec2)">
			<summary>
			Console variable constructor.
			</summary> 
			<param name="name"> Name of the variable. </param>
			<param name="desc"> Variable description. </param>
			<param name="save"> Value indicating whether to save the variable value into the configuration file: 1 to save the variable; otherwise, 0. </param>
			<param name="value"> Vec2 value of the variable. </param>
			<param name="min"> Minimum value of the variable. </param>
			<param name="max"> Maximum value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec2.operator Math::vec2 const">
			<summary>
			Cast operator for the variable.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableVec2.operator=(Unigine.Math.vec2)">
			<summary>
			Assignment operator for the variable.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec2.setGetFunc(vec2(*))">
			<summary>
			Sets a function that will be called when the get() function is called for the variable.
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec2.setSetFunc(void(*)(vec2))">
			<summary>
			Sets a function that will be called when the set() function is called for the variable. For example:
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec2.~ConsoleVariableVec2">
			<summary>
			Destructor.
			</summary>  
		</member>
		<member name="M:Unigine.ConsoleVariableVec3.set(Unigine.Math.vec3) const">
			<summary>
			Sets the variable value.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec3.get const">
			<summary>
			Gets the variable value.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableVec3.ConsoleVariableVec3(char,char,int,Unigine.Math.vec3,Unigine.Math.vec3,Unigine.Math.vec3)">
			<summary>
			Console variable constructor.
			</summary> 
			<param name="name"> Name of the variable. </param>
			<param name="desc"> Variable description. </param>
			<param name="save"> Value indicating whether to save the variable value into the configuration file: 1 to save the variable; otherwise, 0. </param>
			<param name="value"> Vec3 value of the variable. </param>
			<param name="min"> Minimum value of the variable. </param>
			<param name="max"> Maximum value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec3.operator Math::vec3 const">
			<summary>
			Cast operator for the variable.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableVec3.operator=(Unigine.Math.vec3)">
			<summary>
			Assignment operator for the variable.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec3.setGetFunc(vec3(*))">
			<summary>
			Sets a function that will be called when the get() function is called for the variable.
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec3.setSetFunc(void(*)(vec3))">
			<summary>
			Sets a function that will be called when the set() function is called for the variable. For example:
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec3.~ConsoleVariableVec3">
			<summary>
			Destructor.
			</summary>  
		</member>
		<member name="M:Unigine.ConsoleVariableVec4.set(Unigine.Math.vec4) const">
			<summary>
			Sets the variable value.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec4.get const">
			<summary>
			Gets the variable value.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableVec4.ConsoleVariableVec4(char,char,int,Unigine.Math.vec4,Unigine.Math.vec4,Unigine.Math.vec4)">
			<summary>
			Console variable constructor.
			</summary> 
			<param name="name"> Name of the variable. </param>
			<param name="desc"> Variable description. </param>
			<param name="save"> Value indicating whether to save the variable value into the configuration file: 1 to save the variable; otherwise, 0. </param>
			<param name="value"> Vec4 value of the variable. </param>
			<param name="min"> Minimum value of the variable. </param>
			<param name="max"> Maximum value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec4.operator Math::vec4 const">
			<summary>
			Cast operator for the variable.
			</summary>  
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.ConsoleVariableVec4.operator=(Unigine.Math.vec4)">
			<summary>
			Assignment operator for the variable.
			</summary> 
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec4.setGetFunc(vec4(*))">
			<summary>
			Sets a function that will be called when the get() function is called for the variable.
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec4.setSetFunc(void(*)(vec4))">
			<summary>
			Sets a function that will be called when the set() function is called for the variable. For example:
			</summary> 
			<param name="func"> Function pointer. </param> 
		</member>
		<member name="M:Unigine.ConsoleVariableVec4.~ConsoleVariableVec4">
			<summary>
			Destructor.
			</summary>  
		</member>
		<member name="M:Unigine.Console.isCommand(char) const">
			<summary>
			Returns a value indicating if a command with a given name exists.
			</summary> 
			<param name="name"> The command name. </param> 
			<returns>true if the command with a given name exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Console.getCommandDescription(char) const">
			<summary>
			Returns the description of the console command by its name. If the name isn't specified, an empty string will be returned.
			</summary> 
			<param name="name"> The command name. </param> 
			<returns>The command description if it exists; otherwise, an empty string.</returns>
		</member>
		<member name="M:Unigine.Console.getCommandName(int) const">
			<summary>
			Returns the name of the console command by its number in the array of the existing commands.
			</summary> 
			<param name="num"> The command number. </param> 
			<returns>The command name if it is found in the array of the existing commands; otherwise, an empty string.</returns>
		</member>
		<member name="M:Unigine.Console.setFloat(char,float)">
			<summary>
			Sets a float value for a given variable.
			</summary> 
			<param name="name"> The variable name. </param>
			<param name="value"> Float value of the variable. </param> 
		</member>
		<member name="M:Unigine.Console.getFloat(char) const">
			<summary>
			Returns a float value of a given variable.
			</summary> 
			<param name="name"> The variable name. </param> 
			<returns>Float value of the variable.</returns>
		</member>
		<member name="M:Unigine.Console.getFloatMax(char) const">
			<summary>
			Returns a maximum float value for a given variable.
			</summary> 
			<param name="name"> Variable name. </param> 
			<returns>Maximum float value of the variable.</returns>
		</member>
		<member name="M:Unigine.Console.getFloatMin(char) const">
			<summary>
			Returns a minimum float value for a given variable.
			</summary> 
			<param name="name"> Variable name. </param> 
			<returns>Minimum float value of the variable.</returns>
		</member>
		<member name="M:Unigine.Console.isFloat(char) const">
			<summary>
			Checks if the value set for the given console variable is of the float type.
			</summary> 
			<param name="name"> The variable name. </param> 
			<returns>True if the variable value is float; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Console.setInt(char,int)">
			<summary>
			Sets an integer value for a given variable.
			</summary> 
			<param name="name"> Name of the variable. </param>
			<param name="value"> Integer value of the variable. </param> 
		</member>
		<member name="M:Unigine.Console.getInt(char) const">
			<summary>
			Returns an integer value of a given variable.
			</summary> 
			<param name="name"> Name of the variable. </param> 
			<returns>Integer value of the variable.</returns>
		</member>
		<member name="M:Unigine.Console.getIntMax(char) const">
			<summary>
			Returns a maximum integer value for a given variable.
			</summary> 
			<param name="name"> Variable name. </param> 
			<returns>Maximum integer value of the variable.</returns>
		</member>
		<member name="M:Unigine.Console.getIntMin(char) const">
			<summary>
			Returns a minimum integer value for a given variable.
			</summary> 
			<param name="name"> Variable name. </param> 
			<returns>Minimum integer value of the variable.</returns>
		</member>
		<member name="M:Unigine.Console.isInt(char) const">
			<summary>
			Checks if the value of the given console variable is of the integer type.
			</summary> 
			<param name="name"> The variable name. </param> 
			<returns>True if the variable value is int; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Console.isPalette(char) const">
			<summary>
			Checks for a palette with the specified name.
			</summary> 
			<param name="name"> Palette name. </param> 
		</member>
		<member name="M:Unigine.Console.setPalette(char,Palette)">
			<summary>
			Sets a color palette by its name.
			</summary> 
			<param name="name"> Palette name. </param>
			<param name="value"> Palette to be set. </param> 
		</member>
		<member name="M:Unigine.Console.setPalette(char,int,float)">
			<summary>
			Sets a value for the specified palette color by its index.
			</summary> 
			<param name="name"> Palette name. </param>
			<param name="index"> Palette color index. </param>
			<param name="value"> Value to be set for the color with the specified index. </param> 
		</member>
		<member name="M:Unigine.Console.setPalette(char,char,float)">
			<summary>
			Sets a value for the specified palette color by the color name.
			</summary> 
			<param name="name"> Palette name. </param>
			<param name="color"> Palette color name. </param>
			<param name="value"> Value to be set for the color with the specified name. </param> 
		</member>
		<member name="M:Unigine.Console.getPalette(char) const">
			<summary>
			Returns a color palette by its name.
			</summary> 
			<param name="name"> Palette name. </param> 
			<returns>Palette with the specified name is it exists; otherwise nullptr.</returns>
		</member>
		<member name="M:Unigine.Console.setString(char,char)">
			<summary>
			Sets a string value for a given variable.
			</summary> 
			<param name="name"> The variable name. </param>
			<param name="value"> String value of the variable. </param> 
		</member>
		<member name="M:Unigine.Console.getString(char) const">
			<summary>
			Returns the string value of a given variable.
			</summary> 
			<param name="name"> The variable name. </param> 
			<returns>String value of the variable.</returns>
		</member>
		<member name="M:Unigine.Console.isString(char) const">
			<summary>
			Checks if the value of the given console variable is of the string type.
			</summary> 
			<param name="name"> The variable name. </param> 
			<returns>True if the variable value is string; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Console.isVariable(char) const">
			<summary>
			Returns a value indicating if a variable with a given name exists.
			</summary> 
			<param name="name"> The variable name. </param> 
			<returns>True if the variable exists; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Console.getVariableDescription(char) const">
			<summary>
			Returns the description of the console variable by its name. If the name isn't specified, an empty string will be returned.
			</summary> 
			<param name="name"> The variable name. </param> 
			<returns>The variable description if it exists; otherwise, an empty string.</returns>
		</member>
		<member name="M:Unigine.Console.getVariableName(int) const">
			<summary>
			Returns the name of the console variable by its number in the array of the existing variables.
			</summary> 
			<param name="num"> The variable number. </param> 
			<returns>The variable name if it is found in the array of the existing variables; otherwise, an empty string.</returns>
		</member>
		<member name="M:Unigine.Console.setVec2(char,Unigine.Math.vec2)">
			<summary>
			Sets a two component vector for the console variable.
			</summary> 
			<param name="name"> Name of the variable. </param>
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.Console.getVec2(char) const">
			<summary>
			Returns the two component vector console variable.
			</summary> 
			<param name="name"> Name of the variable. </param> 
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.Console.isVec2(char) const">
			<summary>
			Returns a value indicating if the console variable is a two component vector.
			</summary> 
			<param name="name"> Name of the variable. </param> 
			<returns>True if the variable is a two component vector; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Console.setVec3(char,Unigine.Math.vec3)">
			<summary>
			Sets a three component vector for the console variable.
			</summary> 
			<param name="name"> Name of the variable. </param>
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.Console.getVec3(char) const">
			<summary>
			Returns the three component vector console variable.
			</summary> 
			<param name="name"> Name of the variable. </param> 
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.Console.isVec3(char) const">
			<summary>
			Returns a value indicating if the console variable is a three component vector.
			</summary> 
			<param name="name"> Name of the variable. </param> 
			<returns>True if the variable is a three component vector; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Console.setVec4(char,Unigine.Math.vec4)">
			<summary>
			Sets a four component vector for the console variable.
			</summary> 
			<param name="name"> Name of the variable. </param>
			<param name="value"> Value of the variable. </param> 
		</member>
		<member name="M:Unigine.Console.getVec4(char) const">
			<summary>
			Returns the four component vector console variable.
			</summary> 
			<param name="name"> Name of the variable. </param> 
			<returns>Value of the variable.</returns>
		</member>
		<member name="M:Unigine.Console.isVec4(char) const">
			<summary>
			Returns a value indicating if the console variable is a four component vector.
			</summary>  
			<returns>True if the variable is a three component vector; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Console.addCommand(char,char,Unigine.CallbackBase)">
			<summary>
			Adds a custom console command bound to a given callback function.
			</summary> 
			<param name="name"> Name of the new console command. </param>
			<param name="desc"> Short description to be displayed in the console. </param>
			<param name="callback"> The callback pointer. The callback arguments must be (int argc, char** argv,...). </param> 
			<returns>1 if the custom command is added successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Console.flush">
			<summary>
			Forces to execute all queued console commands.
			</summary>  
		</member>
		<member name="M:Unigine.Console.removeCommand(char)">
			<summary>
			Removes a custom console command.
			</summary> 
			<param name="name"> Name of the custom console command. </param> 
			<returns>true if the custom command has been removed successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Console.run(char)">
			<summary>
			Runs the specified console command.
			</summary> 
			<param name="command"> A console command with arguments. </param> 
		</member>
		<member name="M:Unigine.Console.write(char)">
			<summary>
			Writes the specified text to the console and displays it on the screen (onscreen overlay).					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.write(Unigine.Math.vec4,char)">
			<summary>
			Writes the specified text to the console and displays it on the screen (onscreen overlay).					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="color"> Four-component vector specifying the text color in the RGBA format. </param>
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.write(Console::LEVEL,char)">
			<summary>
			Writes the specified text to the console and displays it on the screen (onscreen overlay).					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="level"> Type of the message. </param>
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.getMessages(Unigine.Vector{String,int,Unigine.VectorAllocator},int)">
			<summary>
			Gets the messages written to the console and the onscreen overlay.
			</summary> 
			<param name="messages"> Vector to populate with messages. </param>
			<param name="limit"> Maximum number of messages to retrieve. </param> 
		</member>
		<member name="M:Unigine.Console.getMessages(Unigine.Vector{String,int,Unigine.VectorAllocator},Unigine.Vector{int,int,Unigine.VectorAllocator},int) const">
			<summary>
			</summary> 
			<param name="messages"> Vector to populate with messages. </param>
			<param name="levels"> Types of messages to retrieve. </param>
			<param name="limit"> Maximum number of messages to retrieve. </param> 
		</member>
		<member name="M:Unigine.Console.getWarnings(Unigine.Vector{String,int,Unigine.VectorAllocator},int)">
			<summary>
			Gets the warning messages written to the console and the onscreen overlay.
			</summary> 
			<param name="messages"> Vector to populate with messages. </param>
			<param name="limit"> Maximum number of messages to retrieve. </param> 
		</member>
		<member name="M:Unigine.Console.getErrors(Unigine.Vector{String,int,Unigine.VectorAllocator},int)">
			<summary>
			Gets the error messages written to the console and the onscreen overlay.
			</summary> 
			<param name="messages"> Vector to populate with messages. </param>
			<param name="limit"> Maximum number of messages to retrieve. </param> 
		</member>
		<member name="M:Unigine.Console.writeLine(char)">
			<summary>
			Writes the text followed by the line terminator to the console and the onscreen overlay.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.writeLine(Unigine.Math.vec4,char)">
			<summary>
			Writes the text followed by the line terminator to the console and the onscreen overlay.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="color"> Four-component vector specifying the text color in the RGBA format. </param>
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.writeLine(Console::LEVEL,char)">
			<summary>
			Writes the text followed by the line terminator to the console and the onscreen overlay.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="level"> Type of the message. </param>
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenWrite(char)">
			<summary>
			Writes the text to the onscreen overlay only.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenWrite(Unigine.Math.vec4,char)">
			<summary>
			Writes the text to the onscreen overlay only.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="color"> Four-component vector specifying the text color in the RGBA format. </param>
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenWrite(Console::LEVEL,char)">
			<summary>
			Writes the text to the onscreen overlay only.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="level"> Type of the message. </param>
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenWriteLine(char)">
			<summary>
			Writes the text only to the onscreen overlay followed by the line terminator.					The console overlay must be enabled for the text to be seen on the screen.
			</summary> 
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenWriteLine(Unigine.Math.vec4,char)">
			<summary>
			Writes the text only to the onscreen overlay followed by the line terminator.					The console overlay must be enabled for the text to be seen on the screen.
			</summary> 
			<param name="color"> Four-component vector specifying the text color in the RGBA format. </param>
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenWriteLine(Console::LEVEL,char)">
			<summary>
			Writes the text only to the onscreen overlay followed by the line terminator.					The console overlay must be enabled for the text to be seen on the screen.
			</summary> 
			<param name="level"> Type of the message. </param>
			<param name="text"> Text to output to the console. </param> 
		</member>
		<member name="M:Unigine.Console.message(Unigine.Math.vec4,char,...)">
			<summary>
			Writes the ordinary message to the console and the onscreen overlay.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="color"> Four-component vector specifying the text color in the RGBA format.  </param>
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.message(char,...)">
			<summary>
			Writes the ordinary message to the console and the onscreen overlay.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.warning(char,...)">
			<summary>
			Writes the warning message to the console and the onscreen overlay.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.error(char,...)">
			<summary>
			Writes the error message to the console and the onscreen overlay.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.messageLine(Unigine.Math.vec4,char,...)">
			<summary>
			Writes the ordinary message to the console and the onscreen overlay followed by the line terminator.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="color"> Four-component vector specifying the text color in the RGBA format.  </param>
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.messageLine(char,...)">
			<summary>
			Writes the ordinary message to the console and the onscreen overlay followed by the line terminator.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.warningLine(char,...)">
			<summary>
			Writes the warning message to the console and the onscreen overlay followed by the line terminator.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.errorLine(char,...)">
			<summary>
			Writes the error message to the console and the onscreen overlay followed by the line terminator.					The onscreen overlay must be enabled for the text to be seen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenMessage(Unigine.Math.vec4,char,...)">
			<summary>
			Writes the ordinary message to the onscreen overlay only.				The console overlay must be enabled for the text to be seen on the screen.
			</summary> 
			<param name="color"> Four-component vector specifying the text color in the RGBA format.  </param>
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenMessage(char,...)">
			<summary>
			Writes the ordinary message to the onscreen overlay only.					The console overlay must be enabled for the text to be seen on the screen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenWarning(char,...)">
			<summary>
			Writes the warning message to the onscreen overlay only.					The console overlay must be enabled for the text to be seen on the screen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenError(char,...)">
			<summary>
			Writes the error message to the onscreen overlay only.					The console overlay must be enabled for the text to be seen on the screen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenMessageLine(Unigine.Math.vec4,char,...)">
			<summary>
			Writes the ordinary message only to the onscreen overlay followed by the line terminator.					The console overlay must be enabled for the text to be seen on the screen.
			</summary> 
			<param name="color"> Four-component vector specifying the text color in the RGBA format.  </param>
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenMessageLine(char,...)">
			<summary>
			Writes the ordinary message only to the onscreen overlay followed by the line terminator.					The console overlay must be enabled for the text to be seen on the screen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenWarningLine(char,...)">
			<summary>
			Writes the warning message only to the onscreen overlay followed by the line terminator.					The console overlay must be enabled for the text to be seen on the screen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="M:Unigine.Console.onscreenErrorLine(char,...)">
			<summary>
			Writes the error message only to the onscreen overlay followed by the line terminator.					The console overlay must be enabled for the text to be seen on the screen.
			</summary> 
			<param name="format"> Formatted text. </param>
			<param name=""> Arguments, multiple allowed. </param> 
		</member>
		<member name="F:Unigine.Console.LEVEL_NORMAL">
			<summary>
			An ordinary message.
		</summary>
		</member>
		<member name="F:Unigine.Console.LEVEL_WARNING">
			<summary>
			A warning.
		</summary>
		</member>
		<member name="F:Unigine.Console.LEVEL_ERROR">
			<summary>
			An error message.
		</summary>
		</member>
	</members>
</doc>