<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Profiler.setValue(char,char,int,int,float)">
			<summary>
			Updates settings of the integer counter.
			</summary> 
			<param name="name"> Name of the counter. </param>
			<param name="units"> Counter units. </param>
			<param name="value"> Value of the counter. </param>
			<param name="max_value"> Counter maximum value. </param>
			<param name="arg5"> Color of the graph. Pass NULL if no graph is required. </param> 
		</member>
		<member name="M:Unigine.Profiler.setValue(char,char,float,float,float)">
			<summary>
			Updates settings of the float counter.
			</summary> 
			<param name="name"> Name of the counter. </param>
			<param name="units"> Counter units. </param>
			<param name="value"> Value of the counter. </param>
			<param name="max_value"> Counter maximum value. </param>
			<param name="arg5"> Color of the graph. Pass NULL if no graph is required. </param> 
		</member>
		<member name="M:Unigine.Profiler.getValue(char) const">
			<summary>
			Returns a value of the specified counter.
			</summary> 
			<param name="name"> The name of the counter. </param> 
			<returns>Value of the counter in milliseconds.</returns>
		</member>
		<member name="M:Unigine.Profiler.begin(char,Unigine.Math.vec4) const">
			<summary>
			Starts a counter with a given name and shows a colored graph (if the show_profiler 1 console variable is set). The counter shows user how many millisecods have been spent for the operation that is performed between the begin() and the end() functions.
			</summary> 
			<param name="name"> Name of the counter. </param>
			<param name="color"> Color of the graph. </param> 
		</member>
		<member name="M:Unigine.Profiler.begin(char) const">
			<summary>
			Starts a counter with a given name. The counter shows user how many millisecods have been spent for the operation that is performed between the begin() and the end() functions.
			</summary> 
			<param name="name"> Name of the counter. </param> 
		</member>
		<member name="M:Unigine.Profiler.end const">
			<summary>
			Stops the last activated counter and returns its value.
			</summary>  
			<returns>Value of the counter in milliseconds.</returns>
		</member>
		<member name="M:Unigine.Profiler.beginMicro(char,bool) const">
			<summary>
			Starts a counter with a given name in the Microprofile only, without overloading the Performance Profiler layout. The counter shows user how many millisecods have been spent for the operation that is performed between the beginMicro() and the endMicro() functions.Each counter has an ID. Thus, several nested beginMicro() / endMicro() blocks can be created, which can't be done in the Performance Profiler.
			</summary> 
			<param name="name"> Name of the counter. </param>
			<param name="gpu"> true for the GPU counter; false â€” for the CPU counter. The default value is false. </param> 
			<returns>ID of the new added counter.</returns>
		</member>
		<member name="M:Unigine.Profiler.endMicro(int) const">
			<summary>
			Stops a previously activated Microprofile counter with the specified ID.
			</summary> 
			<param name="id"> Microprofile counter ID. </param> 
		</member>
		<member name="M:Unigine.Profiler.findCounter(char) const">
			<summary>
			Returns the counter number by its name.
			</summary> 
			<param name="name"> Name of the counter. </param> 
			<returns>Counter number in range from 0 to the total number of counters.</returns>
		</member>
		<member name="M:Unigine.Profiler.getCounterName(int) const">
			<summary>
			Returns the counter name by its number.
			</summary> 
			<param name="num"> Counter number in range from 0 to the total number of counters. </param> 
			<returns>Name of the counter.</returns>
		</member>
		<member name="M:Unigine.Profiler.getCounterText(int) const">
			<summary>
			Returns the text of the specified counter.
			</summary> 
			<param name="num"> Counter number in range from 0 to the total number of counters. </param> 
			<returns>Text of the counter.</returns>
		</member>
		<member name="M:Unigine.Profiler.getCounterColor(int) const">
			<summary>
			Returns the color of the specified counter.
			</summary> 
			<param name="num"> Counter number in range from 0 to the total number of counters. </param> 
			<returns>Color of the counter.</returns>
		</member>
		<member name="M:Unigine.Profiler.getCounterValue(int) const">
			<summary>
			Returns the value of the specified counter.
			</summary> 
			<param name="num"> Counter number in range from 0 to the total number of counters. </param> 
			<returns>Value of the counter.</returns>
		</member>
		<member name="M:Unigine.Profiler.getCounterFrame(int) const">
			<summary>
			Returns the frame of the specified counter.
			</summary> 
			<param name="num"> Counter number in range from 0 to the total number of counters. </param> 
			<returns>Frame of the counter.</returns>
		</member>
		<member name="M:Unigine.Profiler.isCounterActive(int) const">
			<summary>
			Returns the value indicating if the specified counter is active.
			</summary> 
			<param name="num"> Counter number in range from 0 to the total number of counters. </param> 
			<returns>true if the counter is active; otherwise false.</returns>
		</member>
		<member name="M:Unigine.Profiler.isCounterSeparator(int) const">
			<summary>
			Returns the value indicating if a separator is placed after the specified counter.
			</summary> 
			<param name="num"> Counter number in range from 0 to the total number of counters. </param> 
			<returns>true if the separator is placed; otherwise false.</returns>
		</member>
	</members>
</doc>