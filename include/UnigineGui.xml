<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Gui.getCurrent">
			<summary>
			Returns the current GUI instance.
			</summary>  
			<returns>Current GUI instance.</returns>
		</member>
		<member name="M:Unigine.Gui.getChild(int) const">
			<summary>
			Returns a child widget with a given number.
			</summary> 
			<param name="num"> Child widget number. </param> 
			<returns>Child widget.</returns>
		</member>
		<member name="M:Unigine.Gui.isChild(Unigine.Ptr{Unigine.Widget}) const">
			<summary>
			Checks if a given widget belongs to the GUI.
			</summary> 
			<param name="widget"> Widget to check. </param> 
			<returns>true if the widget belongs to the GUI; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Gui.setFocusedPermanent(bool)">
			<summary>
			Changes the permanent color of the focused widget.
			</summary> 
			<param name="permanent"> 1 - a font color is overridden with the global GUI focused color; 0 - a font color is unchanged. </param> 
		</member>
		<member name="M:Unigine.Gui.isFocusedPermanent const">
			<summary>
			Returns a value indicating if the permanent color of the focused widget is changed.
			</summary>  
			<returns>1 if the font color is overridden with the global GUI focused color; 0 if the font color is unchanged.</returns>
		</member>
		<member name="M:Unigine.Gui.getKeyActivity(unsignedint) const">
			<summary>
			Checks if a given key already has a special purpose for the widget in focus.
			</summary> 
			<param name="key"> One of the standard ASCII control codes or one of the KEY_* pre-defined variables. </param> 
			<returns>1 if the key cannot be used; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Gui.setResource(char)">
			<summary>
			Changes the resource skin file used in the system GUI.
			</summary> 
			<param name="name"> Path to the rc file. </param> 
			<returns>1 if the resource file is successfully changed; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Gui.setToolTip(int,int,char)">
			<summary>
			Sets a tooltip.
			</summary> 
			<param name="x"> X coordinate of the tooltip position. </param>
			<param name="y"> Y coordinate of the tooltip position. </param>
			<param name="str"> ToolTip text. </param> 
		</member>
		<member name="M:Unigine.Gui.getToolTipHeight(char) const">
			<summary>
			Returns a height of the given tooltip.					Height of a single-line tooltip is equal to 21 pixels.
			</summary> 
			<param name="str"> A tooltip text. </param> 
			<returns>Height of the given tooltip (in pixels).</returns>
		</member>
		<member name="M:Unigine.Gui.getToolTipWidth(char) const">
			<summary>
			Returns the current width of the tooltip.
			</summary> 
			<param name="str"> A tooltip text. </param> 
			<returns>Width of the tooltip.</returns>
		</member>
		<member name="M:Unigine.Gui.addChild(Unigine.Ptr{Unigine.Widget},int)">
			<summary>
			Adds a given widget to the GUI.
			</summary> 
			<param name="widget"> Widget to add. </param>
			<param name="flags"> One of the ALIGN_* pre-defined variables. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.Gui.addDictionary(char,char)">
			<summary>
			Adds a new dictionary with localized interface strings. Dictionaries cannot be modified in run-time.
			</summary> 
			<param name="name"> Path to the dictionary file. </param>
			<param name="language"> Name of the dictionary language. </param> 
			<returns>Returns 1 if the dictionary is added successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Gui.clearDictionaries">
			<summary>
			Clears all dictionaries.
			</summary>  
		</member>
		<member name="M:Unigine.Gui.clearTexture(char)">
			<summary>
			Clears the specified GUI texture file cache.
			</summary> 
			<param name="name"> Texture name. </param> 
			<returns>1 if the texture is successfully cleared; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Gui.create(char)">
			<summary>
			GUI constructor.
			</summary> 
			<param name="name"> GUI skin name. </param> 
			<returns>Pointer to the created GUI.</returns>
		</member>
		<member name="M:Unigine.Gui.destroy">
			<summary>
			Destroys all GUI resources.
			</summary>  
		</member>
		<member name="M:Unigine.Gui.disable">
			<summary>
			Disables GUI rendering.
			</summary>  
		</member>
		<member name="M:Unigine.Gui.enable">
			<summary>
			Enables GUI rendering.
			</summary>  
		</member>
		<member name="M:Unigine.Gui.hasTranslation(char) const">
			<summary>
			Returns a value indicating if there is translation for a given string in the localization dictionary.
			</summary> 
			<param name="arg1"> String to check. </param> 
			<returns>1 if there is translation for the given string; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Gui.parseColor(char) const">
			<summary>
			Converts a color string in the Web format (RRGGBB / #RRGGBB or RRGGBBAA / #RRGGBBAA) into its vec4 equivalent.
			</summary> 
			<param name="str"> Color string in the Web format. </param> 
			<returns>Color value as a vec4 vector (R, G, B, A).</returns>
		</member>
		<member name="M:Unigine.Gui.removeChild(Unigine.Ptr{Unigine.Widget})">
			<summary>
			Removes the specified widget from the GUI.
			</summary> 
			<param name="widget"> Child widget to be removed. </param> 
		</member>
		<member name="M:Unigine.Gui.removeFocus">
			<summary>
			Removes focus from the GUI.
			</summary>  
		</member>
		<member name="M:Unigine.Gui.replaceChild(Unigine.Ptr{Unigine.Widget},Unigine.Ptr{Unigine.Widget},int)">
			<summary>
			Replaces a given widget in the GUI with another widget.
			</summary> 
			<param name="widget"> Replacement widget. </param>
			<param name="old_widget"> Widget to be replaced. </param>
			<param name="flags"> One of the ALIGN_* pre-defined variables. This is an optional parameter. </param> 
		</member>
		<member name="M:Unigine.Gui.saveDictionary(char,char)">
			<summary>
			Saves the current dictionary on disk. This function can be used to save the currently loaded dictionary into another file.
			</summary> 
			<param name="name"> Name of the dictionary language. </param>
			<param name="language"> Dictionary language name. </param> 
			<returns>1 if the dictionary is saved successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Gui.translate(char)">
			<summary>
			Returns the source string translated using the dictionary.
			</summary> 
			<param name="str"> String to translate (source). </param> 
			<returns>Target (translated) string if it is found in the localization dictionary; otherwise, the source string.</returns>
		</member>
		<member name="M:Unigine.Gui.update">
			<summary>
			Updates GUI.
			</summary>  
		</member>
		<member name="M:Unigine.Gui.preRender">
			<summary>
			Method executed after the update() and before the render() function. This method is used to make necessary preparations for rendering (e.g. prepare a texture) after the update() and is called automatically for WidgetSpriteViewport and WidgetSpriteNode to ensure proper rendering of the widgets during render(). In case you implement a custom GUI or widgets using the WidgetExtern class you should put all such rendering preparations to  and call preRender() for GUI manually after update().
			</summary>  
		</member>
		<member name="M:Unigine.Gui.render">
			<summary>
			Renders the GUI.
			</summary>  
		</member>
		<member name="M:Unigine.Gui.render(int)">
			<summary>
			Renders the GUI.
			</summary> 
			<param name="custom_mouse_buttons"> Pressed mouse button. </param> 
		</member>
		<member name="M:Unigine.Gui.updateHierarchy">
			<summary>
			Updates the hierarchy for all widgets â€” the widgets are arranged, expanded to the required sizes and then their positions are updated. Updating the hierarchy may be required, for example, for getting the screen position immediately after the widget has been added to the hierarchy.
			</summary>  
		</member>
		<member name="M:Unigine.Gui.isRenderingBootScreen">
			<summary>
			Returns a value indicating if the GUI currently renders the boot screen.
			</summary>  
			<returns>true if the GUI currently renders the boot screen; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Gui.isRenderingSplashScreen">
			<summary>
			Returns a value indicating if the GUI currently renders the splash screen.
			</summary>  
			<returns>true if the GUI currently renders the splash screen; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Gui.isRenderingLoadingScreen">
			<summary>
			Returns a value indicating if the GUI currently renders the loading screen.
			</summary>  
			<returns>true if the GUI currently renders the loading screen; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Gui.focusGained">
			<summary>
			The focus is set on the GUI object.
			</summary>  
		</member>
		<member name="M:Unigine.Gui.focusLost">
			<summary>
			The focus is removed from the GUI.
			</summary>  
		</member>
		<member name="M:Unigine.Gui.isHover(int,int) const">
			<summary>
			Returns a value indicating if the cursor is hovering over the GUI object.
			</summary> 
			<param name="global_pos_x"> The X coordinate of the cursor in global coordinates. </param>
			<param name="global_pos_y"> The Y coordinate of the cursor in global coordinates. </param> 
			<returns>true if the cursor is hovering over the GUI object; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Gui.getWidgetIntersection(int,int)">
			<summary>
			Returns the intersected widget that is visually perceptible (not empty, not transparent).
			</summary> 
			<param name="global_pos_x"> The X coordinate of the cursor in global coordinates. </param>
			<param name="global_pos_y"> The Y coordinate of the cursor in global coordinates. </param> 
			<returns>The intersected widget that is visually perceptible.</returns>
		</member>
		<member name="M:Unigine.Gui.getUnderCursorWidget">
			<summary>
			Returns the visually perceptible widget, over which the cursor is currently hovering.
			</summary>  
			<returns>The widget, over which the cursor is currently hovering.</returns>
		</member>
		<member name="M:Unigine.Gui.getFocusGui">
			<summary>
			Returns the GUI object that is currently in focus.
			</summary>  
			<returns>The GUI object currently in focus.</returns>
		</member>
		<member name="M:Unigine.Gui.getGuiIntersection(int,int)">
			<summary>
			Returns the intersected GUI object.This method takes Z-ordering into consideration: if the GUI object is overlapped by any other window, the method returns nullptr.
			</summary> 
			<param name="global_pos_x"> The X coordinate of the intersection point in global coordinates. </param>
			<param name="global_pos_y"> The Y coordinate of the intersection point in global coordinates. </param> 
			<returns>The intersected GUI object.</returns>
		</member>
		<member name="M:Unigine.Gui.getUnderCursorGui">
			<summary>
			Returns the GUI object that is currently under cursor.If case of dragging or resizing a window, this method returns nullptr. To receive the intersected GUI in such a case, use getGuiIntersection().
			</summary>  
			<returns>GUI object currently under cursor.</returns>
		</member>
		<member name="M:Unigine.Gui.getWorldGuiInstances(Unigine.Vector{Unigine.Ptr{Gui},int,Unigine.VectorAllocator})">
			<summary>
			Returns all GUI instances that are available in the scene hierarchy and rendered as world objects.
			</summary> 
			<param name="ret_instances"> All GUI instances that are available in the scene hierarchy and rendered as world objects. </param> 
		</member>
		<member name="M:Unigine.Gui.getAndClearMouseWheel">
			<summary>
			Returns the mouse scroll value and clears the mouse scroll state info.
			</summary>  
			<returns>The mouse scroll value in the [-1;1] range.</returns>
		</member>
		<member name="M:Unigine.Gui.forceSetMouseWheel(int)">
			<summary>
			Sets the mouse scroll value.
			</summary> 
			<param name="value"> The mouse scroll value in the [-1;1] range. </param> 
		</member>
		<member name="M:Unigine.Gui.getAndClearMouseWheelHorizontal">
			<summary>
			Returns the mouse horizontal scroll value and clears the mouse scroll state info.
			</summary>  
			<returns>The horizontal mouse scroll value in the [-1;1] range.</returns>
		</member>
		<member name="M:Unigine.Gui.forceSetMouseWheelHorizontal(int)">
			<summary>
			Sets the mouse vertical scroll value.
			</summary> 
			<param name="value"> The horizontal mouse scroll value in the [-1;1] range. </param> 
		</member>
		<member name="M:Unigine.Gui.getKey(Input::KEY)">
			<summary>
			Returns the value indicating if the specified key is pressed.
			</summary> 
			<param name="key"> One of the standard ASCII control codes or one of the KEY_* pre-defined variables. </param> 
			<returns>true if the key is pressed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Gui.getAndClearKey(Input::KEY)">
			<summary>
			Returns the value indicating if the specified key is pressed and clears the key state info.
			</summary> 
			<param name="key"> One of the standard ASCII control codes or one of the KEY_* pre-defined variables. </param> 
			<returns>true if the key is pressed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Gui.toRenderSize(int) const">
			<summary>
			Transforms the unit value to the pixel value.
			</summary> 
			<param name="unit_size"> Size in units. </param> 
			<returns>Size in pixels.</returns>
		</member>
		<member name="M:Unigine.Gui.toUnitSize(int) const">
			<summary>
			Transforms the pixel value to the unit value.
			</summary> 
			<param name="render_size"> Size in pixels. </param> 
			<returns>Size in units.</returns>
		</member>
		<member name="M:Unigine.Gui.setFontPath(char)">
			<summary>
			Changes the regular font used in the system GUI.
			</summary> 
			<param name="path"> Path to the font file. </param> 
			<returns>true if the font is set successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Gui.getFontPath const">
			<summary>
			Returns the path to the regular font currently used in the system GUI.
			</summary>  
			<returns>Path to the font file.</returns>
		</member>
		<member name="M:Unigine.Gui.setFontPaths(char,char,char,char)">
			<summary>
			Changes the set of fonts â€” regular, bold, italic, and italic bold â€” used in the system GUI.
			</summary> 
			<param name="normal_path"> Path to the regular font file. </param>
			<param name="bold_path"> Path to the bold font file. </param>
			<param name="italic_path"> Path to the italic font file. </param>
			<param name="bold_italic_path"> Path to the bold italic font file. </param> 
			<returns>true if the fonts are set successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Gui.setFontRichBoldPath(char)">
			<summary>
			Changes the bold font used in the system GUI.
			</summary> 
			<param name="path"> Path to the bold font file. </param> 
			<returns>true if the fonts are set successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Gui.getFontRichBoldPath const">
			<summary>
			Returns the path to the bold font currently used in the system GUI.
			</summary>  
			<returns>Path to the bold font file.</returns>
		</member>
		<member name="M:Unigine.Gui.setFontRichItalicPath(char)">
			<summary>
			Changes the italic font used in the system GUI.
			</summary> 
			<param name="path"> Path to the italic font file. </param> 
			<returns>true if the font is set successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Gui.getFontRichItalicPath const">
			<summary>
			Returns the path to the italic font currently used in the system GUI.
			</summary>  
			<returns>Path to the italic font file.</returns>
		</member>
		<member name="M:Unigine.Gui.setFontRichBoldItalicPath(char)">
			<summary>
			Changes the bold italic font used in the system GUI.
			</summary> 
			<param name="path"> Path to the bold italic font file. </param> 
			<returns>true if the font is set successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Gui.getFontRichBoldItalicPath const">
			<summary>
			Returns the path to the bold italic font currently used in the system GUI.
			</summary>  
			<returns>Path to the bold italic font file.</returns>
		</member>
		<member name="M:Unigine.Gui.setSkinPath(char)">
			<summary>
			Changes the GUI skin used in the system GUI.
			</summary> 
			<param name="path"> Path to the directory where the skin files (an RC file and textures) are stored. </param> 
			<returns>true if the skin is set successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.Gui.getSkinPath const">
			<summary>
			Returns the path to the current GUI skin.
			</summary>  
			<returns>Path to the directory where the skin files (an RC file and textures) are stored.</returns>
		</member>
		<member name="M:Unigine.Gui.get">
			<summary>
			Returns the pointer to the current GUI.
			</summary>  
			<returns>Pointer to GUI.</returns>
		</member>
		<member name="F:Unigine.Gui.ALIGN_CENTER">
			<summary>
			Widget is centered relative to its container.
		</summary>
		</member>
		<member name="F:Unigine.Gui.ALIGN_LEFT">
			<summary>
			Widget is aligned to the left side of its container.
		</summary>
		</member>
		<member name="F:Unigine.Gui.ALIGN_RIGHT">
			<summary>
			Widget is aligned to the right side of its container.
		</summary>
		</member>
		<member name="F:Unigine.Gui.ALIGN_TOP">
			<summary>
			Widget is aligned to the top of its container.
		</summary>
		</member>
		<member name="F:Unigine.Gui.ALIGN_BOTTOM">
			<summary>
			Widget is aligned to the bottom of its container.
		</summary>
		</member>
		<member name="F:Unigine.Gui.ALIGN_EXPAND">
			<summary>
			Widget occupies all available space inside its container.
		</summary>
		</member>
		<member name="F:Unigine.Gui.ALIGN_OVERLAP">
			<summary>
			Widget is rendered over other widgets, on the foreground (or over the contents of the parent container). Overlapping widgets are sorted between each other (i.e. pop up when focused on). This flag also makes the window movable.
		</summary>
		</member>
		<member name="F:Unigine.Gui.ALIGN_BACKGROUND">
			<summary>
			Widget is always placed under other widgets. If clicked on, it does not pop up. Use this flag together with ALIGN_OVERLAP one.
		</summary>
		</member>
		<member name="F:Unigine.Gui.ALIGN_FIXED">
			<summary>
			Widget in focus stays on the background or on the foreground (depending on where it was created). This flag is valid only if GUI_ALIGN_OVERLAP is also set. Non-fixed overlapping windows can pop over the fixed ones, while the latter cannot do it.
		</summary>
		</member>
		<member name="F:Unigine.Gui.ATTACH_LOG10">
			<summary>
			Attached slider uses a logarithmic scale with the base ten.
		</summary>
		</member>
		<member name="F:Unigine.Gui.ATTACH_MIN_EXPAND">
			<summary>
			Minimum value of the attached slider can be lowered.
		</summary>
		</member>
		<member name="F:Unigine.Gui.ATTACH_MAX_EXPAND">
			<summary>
			Maximum value of the attached slider can be raised.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BLEND_NONE">
			<summary>
			No blending is used for a widget.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BLEND_ZERO">
			<summary>
			Components of each widget color are multiplied by zero.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BLEND_ONE">
			<summary>
			Components of each widget color are multiplied by one.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BLEND_SRC_COLOR">
			<summary>
			Components of each widget color are multiplied by these factors (per component): (wR, wG, wB, wA) .
		</summary>
		</member>
		<member name="F:Unigine.Gui.BLEND_ONE_MINUS_SRC_COLOR">
			<summary>
			Components of each widget color are multiplied by these factors (per component): (1 - wR, 1 - wG, 1 - wB, 1 - wA) .
		</summary>
		</member>
		<member name="F:Unigine.Gui.BLEND_SRC_ALPHA">
			<summary>
			Components of each widget color are multiplied by wA.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BLEND_ONE_MINUS_SRC_ALPHA">
			<summary>
			Components of each widget color are multiplied by 1- wA.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BLEND_DEST_COLOR">
			<summary>
			Components of each widget color are multiplied by these factors (per component): (bR, bG, bB, bA) .
		</summary>
		</member>
		<member name="F:Unigine.Gui.BLEND_ONE_MINUS_DEST_COLOR">
			<summary>
			Components of each widget color are multiplied by these factors (per component): (1 - bR, 1 - bG, 1 - bB, 1 - bA) .
		</summary>
		</member>
		<member name="F:Unigine.Gui.BLEND_DEST_ALPHA">
			<summary>
			Components of each widget color are multiplied by bA.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BLEND_ONE_MINUS_DEST_ALPHA">
			<summary>
			Components of each widget color are multiplied by 1- bA.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BUFFER_ALL">
			<summary>
			Mask that specifies all channels.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BUFFER_RED">
			<summary>
			Mask that specifies the red channel.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BUFFER_GREEN">
			<summary>
			Mask that specifies the green channel.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BUFFER_BLUE">
			<summary>
			Mask that specifies the blue channel.
		</summary>
		</member>
		<member name="F:Unigine.Gui.BUFFER_ALPHA">
			<summary>
			Mask that specifies the alpha channel.
		</summary>
		</member>
		<member name="F:Unigine.Gui.CURSOR_NONE">
			<summary>
			Mouse pointer is not displayed.
		</summary>
		</member>
		<member name="F:Unigine.Gui.CURSOR_ARROW">
			<summary>
			Default arrow pointer is displayed.
		</summary>
		</member>
		<member name="F:Unigine.Gui.CURSOR_NA">
			<summary>
			Pointer indicating that an operation is not available is displayed.
		</summary>
		</member>
		<member name="F:Unigine.Gui.CURSOR_DND">
			<summary>
			Pointer for a drag-and-drop operation is displayed.
		</summary>
		</member>
		<member name="F:Unigine.Gui.CURSOR_WIDTH">
			<summary>
			Pointer for horizontal resizing is displayed.
		</summary>
		</member>
		<member name="F:Unigine.Gui.CURSOR_HEIGHT">
			<summary>
			Pointer for vertical resizing is displayed.
		</summary>
		</member>
		<member name="F:Unigine.Gui.CURSOR_NESW">
			<summary>
			Pointer for top-right / bottom-left resizing is displayed.
		</summary>
		</member>
		<member name="F:Unigine.Gui.CURSOR_NWSE">
			<summary>
			Pointer for top-left / bottom-right resizing is displayed.
		</summary>
		</member>
		<member name="F:Unigine.Gui.CURSOR_MOVE">
			<summary>
			Pointer for move operation is displayed.
		</summary>
		</member>
		<member name="F:Unigine.Gui.CURSOR_ROTATE">
			<summary>
			Pointer for rotation operation is displayed.
		</summary>
		</member>
		<member name="F:Unigine.Gui.CURSOR_SCALE">
			<summary>
			Pointer for operation of object scaling is displayed.
		</summary>
		</member>
		<member name="F:Unigine.Gui.NUM_CURSORS">
			<summary>
			Number of cursors.
		</summary>
		</member>
		<member name="F:Unigine.Gui.VALIDATOR_ANY">
			<summary>
			Input control accepts any data.
		</summary>
		</member>
		<member name="F:Unigine.Gui.VALIDATOR_INT">
			<summary>
			Input control accepts only integer data.
		</summary>
		</member>
		<member name="F:Unigine.Gui.VALIDATOR_UINT">
			<summary>
			Input control accepts only unsigned integer data.
		</summary>
		</member>
		<member name="F:Unigine.Gui.VALIDATOR_FLOAT">
			<summary>
			Input control accepts only floating point data.
		</summary>
		</member>
		<member name="F:Unigine.Gui.VALIDATOR_ASCII">
			<summary>
			Input control accepts only ASCII based symbols.
		</summary>
		</member>
		<member name="F:Unigine.Gui.VERTICAL">
			<summary>
			Widget has vertical orientation.
		</summary>
		</member>
		<member name="F:Unigine.Gui.HORIZONTAL">
			<summary>
			Widget has horizontal orientation.
		</summary>
		</member>
		<member name="F:Unigine.Gui.MOUSE_MASK_LEFT">
			<summary>
			The bit mask value of the left mouse button.
		</summary>
		</member>
		<member name="F:Unigine.Gui.MOUSE_MASK_MIDDLE">
			<summary>
			The bit mask value of the middle mouse button.
		</summary>
		</member>
		<member name="F:Unigine.Gui.MOUSE_MASK_RIGHT">
			<summary>
			The bit mask value of the right mouse button.
		</summary>
		</member>
		<member name="F:Unigine.Gui.MOUSE_MASK_DCLICK">
			<summary>
			The bit mask value of the double click.
		</summary>
		</member>
	</members>
</doc>