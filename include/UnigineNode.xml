<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Node.getAncestor(int) const">
			<summary>
			Returns a node ancestor by its number.
			</summary> 
			<param name="num"> Ancestor ID. </param> 
			<returns>Ancestor node.</returns>
		</member>
		<member name="M:Unigine.Node.getChild(int) const">
			<summary>
			Returns a node child by its number.
			</summary> 
			<param name="num"> Child ID. </param> 
			<returns>Child node.</returns>
		</member>
		<member name="M:Unigine.Node.isChild(Unigine.Ptr{Unigine.Node}) const">
			<summary>
			Checks if a given node is a child of the node.
			</summary> 
			<param name="n"> Node to check. </param> 
			<returns>true if the given node is a child; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.setChildIndex(Unigine.Ptr{Unigine.Node},int)">
			<summary>
			Sets the index for a given child node of the node.
			</summary> 
			<param name="n"> Child node. </param>
			<param name="index"> Node index. </param> 
		</member>
		<member name="M:Unigine.Node.getChildIndex(Unigine.Ptr{Unigine.Node})">
			<summary>
			Returns the index of a given child node of the node.
			</summary> 
			<param name="n"> Child node. </param> 
			<returns>Node index.</returns>
		</member>
		<member name="M:Unigine.Node.setData(char,char)">
			<summary>
			Sets user data associated with the node.											If the node was loaded from the *.node file, data is saved directly into the data tag of this file.						If the node is loaded from the *.world file, data is saved into the Node data tag of the *.world file.						If the node is loaded from the *.world file as a NodeReference, data will be saved to the NodeReference data tag of the *.world file.
			</summary> 
			<param name="name"> String containing a key identifying user data to be stored in the *.node file.The "editor_data" key is reserved for the UnigineEditor. </param>
			<param name="data"> New user data. Data can contain an XML formatted string. </param> 
		</member>
		<member name="M:Unigine.Node.getData(char)">
			<summary>
			Returns user data associated with the node.											If the node was loaded from the *.node file, data from the data tag of this file is returned.						If the node is loaded from the *.world file, data from the Node data tag of the *.world file is returned.						If the node is loaded from the *.world file as a NodeReference, data from the NodeReference data tag of the *.world file is returned.
			</summary> 
			<param name="name"> String containing a key identifying user data stored in the *.node file.The "editor_data" key is reserved for the UnigineEditor. </param> 
			<returns>User string data. Data can be an xml formatted string.</returns>
		</member>
		<member name="M:Unigine.Node.updateEnabled">
			<summary>
			Updates node's internal state according to the current "enabled" state.
			</summary>  
		</member>
		<member name="M:Unigine.Node.isEnabledSelf const">
			<summary>
			Returns a value indicating if the node is enabled.
			</summary>  
			<returns>true if the node is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchy(Unigine.Vector{Unigine.Ptr{Unigine.Node},int,Unigine.VectorAllocator})">
			<summary>
			Retrieves the whole hierarchy of the node and puts it to the hierarchy buffer.
			</summary> 
			<param name="hierarchy"> Hierarchy buffer. </param> 
		</member>
		<member name="M:Unigine.Node.getNode(int)">
			<summary>
			Returns a node pointer.
			</summary> 
			<param name="id"> Node identifier. </param> 
			<returns>Node pointer.</returns>
		</member>
		<member name="M:Unigine.Node.isNode(Unigine.Ptr{Unigine.Node})">
			<summary>
			Check the node pointer.
			</summary> 
			<param name="node"> Node pointer. </param> 
			<returns>1 if the node is valid; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Node.isNode(int)">
			<summary>
			Check the node pointer.
			</summary> 
			<param name="id"> Node pointer. </param> 
			<returns>1 if the node is valid; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Node.addProperty(char)">
			<summary>
			Inherits a new property from the one with the given name and adds it to the list of properties associated with the node. The inherited property will be internal, such properties are saved in a *.world or *.node file.
			</summary> 
			<param name="name"> Name of the property to be added. </param> 
			<returns>Index of the new node property if it was added successfully; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Node.addProperty(Unigine.UGUID)">
			<summary>
			Inherits a new property from the one with the given GUID and adds it to the list of properties associated with the node. The inherited property will be internal, such properties are saved in a *.world or *.node file.
			</summary> 
			<param name="guid"> GUID of the property to be added. </param> 
			<returns>Index of the new node property if it was added successfully; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Node.addProperty(Unigine.Ptr{Unigine.Property})">
			<summary>
			Inherits a new property from the specified one and adds it to the list of properties associated with the node. The inherited property will be internal, such properties are saved in a *.world or *.node file.
			</summary> 
			<param name="property"> Property to be added. </param> 
			<returns>Index of the new node property if it was added successfully; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Node.insertProperty(int,char)">
			<summary>
			Inserts the property with the specified name at the specified position.
			</summary> 
			<param name="num"> Position at which a new property is to be inserted, in the range from 0 to the total number of node properties. </param>
			<param name="name"> Name of the property to be inserted. </param> 
		</member>
		<member name="M:Unigine.Node.insertProperty(int,Unigine.UGUID)">
			<summary>
			Inserts the property with the specified GUID at the specified position.
			</summary> 
			<param name="num"> Position at which a new property is to be inserted, in the range from 0 to the total number of node properties. </param>
			<param name="guid"> GUID of the property to be inserted. </param> 
		</member>
		<member name="M:Unigine.Node.insertProperty(int,Unigine.Ptr{Unigine.Property})">
			<summary>
			Inserts the specified property at the specified position.
			</summary> 
			<param name="num"> Position at which a new property is to be inserted, in the range from 0 to the total number of node properties. </param>
			<param name="property"> Property to be added. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(char)">
			<summary>
			Updates the first node property (the one with a 0 index) in the list of properties associated with the node. A new internal property inherited from the one with the specified name will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="name"> Name of the property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(Unigine.UGUID)">
			<summary>
			Updates the first node property (the one with a 0 index) in the list of properties associated with the node. A new internal property inherited from the one with the specified GUID will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="guid"> GUID of the property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(Unigine.Ptr{Unigine.Property})">
			<summary>
			Updates the first node property (the one with a 0 index) in the list of properties associated with the node. A new internal property inherited from the one specified will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="property"> Property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(int,char)">
			<summary>
			Updates the node property with the specified number. A new internal property inherited from the one with the specified name will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param>
			<param name="name"> Name of the property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(int,Unigine.UGUID)">
			<summary>
			Updates the node property with the specified number. A new internal property inherited from the one with the specified GUID will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param>
			<param name="guid"> GUID of the property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setProperty(int,Unigine.Ptr{Unigine.Property})">
			<summary>
			Updates the node property with the specified number. A new internal property inherited from the specified one will be set. Such internal properties are saved in a *.world or *.node file.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param>
			<param name="property"> Property to be set. </param> 
		</member>
		<member name="M:Unigine.Node.setPropertyEnabled(int,bool)">
			<summary>
			Enables or disables the node property with the specified number.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param>
			<param name="enable"> true to enable the specified node property, false to disable it. </param> 
		</member>
		<member name="M:Unigine.Node.isPropertyEnabled(int) const">
			<summary>
			Returns a value indicating if the node property with the specified number is enabled.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param> 
			<returns>true if the specified property is enabled; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.swapProperty(int,int)">
			<summary>
			Swaps two properties with specified numbers in the list of properties associated with the node.					The order of properties in the list determines the execution sequence of logic of corresponding components (if any).
			</summary> 
			<param name="from_num"> Number of the first node property to be swapped, in the range from 0 to the total number of node properties. </param>
			<param name="to_num"> Number of the second node property to be swapped, in the range from 0 to the total number of node properties. </param> 
		</member>
		<member name="M:Unigine.Node.removeProperty(int)">
			<summary>
			Removes the node property with the specified number.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param> 
		</member>
		<member name="M:Unigine.Node.removeProperty(char)">
			<summary>
			Removes the node property that has the specified name.					If several properties with the same name are associated with the node, only the first one will be removed.
			</summary> 
			<param name="name"> Name of the node property to be removed. </param> 
		</member>
		<member name="M:Unigine.Node.removeProperty(Unigine.UGUID)">
			<summary>
			Removes the node property that has the GUID or parent GUID equal to the specified one.					If several such properties are associated with the node, only the first one will be removed.
			</summary> 
			<param name="guid"> GUID of the property to be removed (or GUID of its parent). </param> 
		</member>
		<member name="M:Unigine.Node.removeProperty(Unigine.Ptr{Unigine.Property})">
			<summary>
			Removes the specified node property or a node property inherited from it.					If several such properties are associated with the node, only the first one will be removed.
			</summary> 
			<param name="property"> Node property to be removed. </param> 
		</member>
		<member name="M:Unigine.Node.clearProperties">
			<summary>
			Clears the list of properties associated with the node.
			</summary>  
		</member>
		<member name="M:Unigine.Node.getProperty(int) const">
			<summary>
			Returns a node property with the specified number if it exists.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param> 
			<returns>Node property smart pointer, if exists; otherwise, NULL.</returns>
		</member>
		<member name="M:Unigine.Node.getPropertyName(int) const">
			<summary>
			Returns the name of a node property with the specified number.
			</summary> 
			<param name="num"> Node property number in the range from 0 to the total number of node properties. </param> 
			<returns>Property name, if exists; otherwise, NULL.</returns>
		</member>
		<member name="M:Unigine.Node.findProperty(char) const">
			<summary>
			Searches for a property with the specified name among the ones assigned to the node.
			</summary> 
			<param name="name"> GUID of a node property to be found. </param> 
			<returns>Node property number in the range from 0 to the total number of node properties if such a property exists; otherwise -1.</returns>
		</member>
		<member name="M:Unigine.Node.findProperty(Unigine.UGUID) const">
			<summary>
			Searches for a property with the specified GUID among the ones assigned to the node.
			</summary> 
			<param name="guid"> GUID of a node property to be found. </param> 
			<returns>Node property number in the range from 0 to the total number of node properties if such a property exists; otherwise -1.</returns>
		</member>
		<member name="M:Unigine.Node.findProperty(Unigine.Ptr{Unigine.Property}) const">
			<summary>
			Searches for a specified property among the ones assigned to the node.
			</summary> 
			<param name="property"> Node property to be found. </param> 
			<returns>Node property number in the range from 0 to the total number of node properties if such a property exists; otherwise -1.</returns>
		</member>
		<member name="M:Unigine.Node.hasQueryForce const">
			<summary>
			Returns a value indicating if the					Culled By Occlusion Queryoption is force-enabled for the node by the Engine.
			</summary>  
			<returns>true if theCulled By Occlusion Queryoption is force-enabled for the node by the Engine; otherwise,false.</returns>
		</member>
		<member name="M:Unigine.Node.setRotation(Unigine.Math.quat,bool)">
			<summary>
			Sets the node rotation.
			</summary> 
			<param name="rot"> Quaternion representing node rotation in the local space. </param>
			<param name="identity"> Flag indicating if node's scale is to be ignored or taken into account:false - node's scale is taken into account. In this case additional calculations are performed to extract current node's scale and apply it when building the final transformation matrix. These additional operations reduce performance and may lead to error accumulation.true - node's scale is ignored (assumed to be equal to 1 along all axes). Thus, the number of calculations performed for each rotation is reduced and error accumulation is minimal. </param>
			<param name="identity"> It is recommended to set this flag for all non-scaled nodes to improve performance and accuracy.Scaling of nodes should be avoided whenever possible, as it requires addidional calculations and may lead to error accumulation. </param> 
		</member>
		<member name="M:Unigine.Node.getRotation const">
			<summary>
			Returns the node rotation.
			</summary>  
			<returns>Quaternion representing node rotation in the local space.</returns>
		</member>
		<member name="M:Unigine.Node.setWorldRotation(Unigine.Math.quat,bool)">
			<summary>
			Sets the node rotation in the world space.
			</summary> 
			<param name="rot"> Node rotation in the world space. </param>
			<param name="identity"> Flag indicating if node's scale is to be ignored or taken into account:false - node's scale is taken into account. In this case additional calculations are performed to extract current node's scale and apply it when building the final transformation matrix. These additional operations reduce performance and may lead to error accumulation.true - node's scale is ignored (assumed to be equal to 1 along all axes). Thus, the number of calculations performed for each rotation is reduced and error accumulation is minimal. </param>
			<param name="identity"> It is recommended to set this flag for all non-scaled nodes to improve performance and accuracy.Scaling of nodes should be avoided whenever possible, as it requires addidional calculations and may lead to error accumulation. </param> 
		</member>
		<member name="M:Unigine.Node.getWorldRotation const">
			<summary>
			Returns the node rotation in the world space.
			</summary>  
			<returns>Node rotation in the world space.</returns>
		</member>
		<member name="M:Unigine.Node.setTransformWithoutChildren(Unigine.Math.Mat4)">
			<summary>
			Sets the transformation matrix for the node in local coordinates (transformations of all node's children are not affected). This method can be used to change node's transformation relative to its children.
			</summary> 
			<param name="transform"> New transformation matrix to be set for the node (local coordinates). </param> 
		</member>
		<member name="M:Unigine.Node.getTypeID(char)">
			<summary>
			Returns the ID of a node type with a given name.
			</summary> 
			<param name="type"> Node type name. </param> 
			<returns>Node type ID, if such type exists; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Node.getTypeName(Node::TYPE)">
			<summary>
			Returns the name of a node type with a given ID.
			</summary> 
			<param name="type"> Node type ID. </param> 
			<returns>Node type name.</returns>
		</member>
		<member name="M:Unigine.Node.setVariable(char,Unigine.Variable)">
			<summary>
			Sets the value of a variable with a given name. If such variable does not exist it will be added with a specified value.
			</summary> 
			<param name="name"> Variable name. </param>
			<param name="v"> Variable value. </param> 
		</member>
		<member name="M:Unigine.Node.getVariable(char) const">
			<summary>
			Returns the variable with a given name.
			</summary> 
			<param name="name"> Variable name. </param> 
			<returns>Variable if it exists; otherwise, variable with 0 value.</returns>
		</member>
		<member name="M:Unigine.Node.setWorldParent(Unigine.Ptr{Unigine.Node})">
			<summary>
			Sets the new parent of the node. Transformations of the current node will be done in the world coordinates.
			</summary> 
			<param name="n"> New parent node or NULL (0). </param> 
		</member>
		<member name="M:Unigine.Node.setWorldTransformWithoutChildren(Unigine.Math.Mat4)">
			<summary>
			Sets the transformation matrix for the node in world coordinates (transformations of all node's children are not affected). This method can be used to change node's transformation relative to its children.
			</summary> 
			<param name="transform"> New transformation matrix to be set for the node (world coordinates). </param> 
		</member>
		<member name="M:Unigine.Node.getBodyWorldVelocity(Unigine.Math.Vec3) const">
			<summary>
			Returns linear velocity of a point of the node's physical body in the world space.
			</summary>  
			<returns>Linear velocity in the world space.</returns>
		</member>
		<member name="M:Unigine.Node.addChild(Unigine.Ptr{Unigine.Node})">
			<summary>
			Adds a child to the node. Transformations of the new child will be done in the coordinates of the parent.
			</summary> 
			<param name="n"> New child node. </param> 
		</member>
		<member name="M:Unigine.Node.addWorldChild(Unigine.Ptr{Unigine.Node})">
			<summary>
			Adds a child to the node. Transformations of the new child will be done in the world coordinates.
			</summary> 
			<param name="n"> New child node. </param> 
		</member>
		<member name="M:Unigine.Node.clone const">
			<summary>
			Clones the node.
			</summary>  
			<returns>Cloned node.</returns>
		</member>
		<member name="M:Unigine.Node.findAncestor(int) const">
			<summary>
			Returns the ID of node's ancestor of a given type.
			</summary> 
			<param name="type"> Ancestor type identifier. One of the NODE_* pre-defined variables. </param> 
			<returns>Ancestor ID if it exists; otherwise -1.</returns>
		</member>
		<member name="M:Unigine.Node.findAncestor(char) const">
			<summary>
			Returns the ID of node's ancestor with a given name.
			</summary> 
			<param name="name"> Ancestor name. </param> 
			<returns>Ancestor ID if it exists; otherwise -1.</returns>
		</member>
		<member name="M:Unigine.Node.findChild(char) const">
			<summary>
			Searches for a child node with a given name among the children of the node.
			</summary> 
			<param name="name"> Name of the child node. </param> 
			<returns>Child node number, if it is found; otherwise, -1.</returns>
		</member>
		<member name="M:Unigine.Node.findNode(char,int) const">
			<summary>
			Searches for a node with a given name among the children of the node.
			</summary> 
			<param name="name"> Name of the child node to search for. </param>
			<param name="recursive"> 1 if the search is recursive (i.e. performed for children of child nodes); otherwise, 0. </param> 
			<returns>Child node, if it is found; otherwise, NULL.</returns>
		</member>
		<member name="M:Unigine.Node.findNodes(char,Unigine.Vector{Unigine.Ptr{Unigine.Node},int,Unigine.VectorAllocator},int) const">
			<summary>
			Searches for a node with a given name among the children of the node and puts them to the specified output nodes buffer.
			</summary> 
			<param name="name"> Name of the node to search for. </param>
			<param name="nodes"> Output buffer to which all found nodes with the specified name will be put. </param>
			<param name="recursive"> 1 if the search is recursive (i.e. performed for children of child nodes); otherwise, 0. </param> 
		</member>
		<member name="M:Unigine.Node.hasVariable(char)">
			<summary>
			Returns a value indicating if the node has a variable parameter with a given name.
			</summary> 
			<param name="name"> Variable name. </param> 
			<returns>1 if the node has a variable parameter with a given name; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Node.hasVariable">
			<summary>
			Returns a value indicating if the node has a single unnamed variable parameter.
			</summary>  
			<returns>1 if the node has a single unnamed variable parameter; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Node.loadWorld(Unigine.Ptr{Unigine.Xml})">
			<summary>
			Loads a node state from the Xml.
			</summary> 
			<param name="xml"> Xml smart pointer. </param> 
		</member>
		<member name="M:Unigine.Node.removeChild(Unigine.Ptr{Unigine.Node})">
			<summary>
			Removes a child node (added by the addChild() method) from the list of children.
			</summary> 
			<param name="n"> Child node to remove. </param> 
		</member>
		<member name="M:Unigine.Node.removeVariable(char)">
			<summary>
			Removes a variable parameter with a given name.
			</summary> 
			<param name="name"> Variable parameter name. </param> 
		</member>
		<member name="M:Unigine.Node.removeWorldChild(Unigine.Ptr{Unigine.Node})">
			<summary>
			Removes a child node (added by the addWorldChild() method) from the list of children.
			</summary> 
			<param name="n"> Child node to remove. </param> 
		</member>
		<member name="M:Unigine.Node.renderVisualizer">
			<summary>
			Renders a bounding box / sphere of the object.					You should enable the engine visualizer by the						show_visualizer 1 console command.
			</summary>  
		</member>
		<member name="M:Unigine.Node.saveState(Unigine.Ptr{Unigine.Stream}) const">
			<summary>
			Saves a node state to a binary stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if node state is successfully saved; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.restoreState(Unigine.Ptr{Unigine.Stream})">
			<summary>
			Restores a node state from a binary stream.					Example using saveState() and restoreState() methods:
			</summary> 
			<param name="stream"> Stream smart pointer. </param> 
			<returns>true if node state is successfully restored; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.saveWorld(Unigine.Ptr{Unigine.Xml}) const">
			<summary>
			Saves the node into the Xml.
			</summary> 
			<param name="xml"> Xml smart pointer. </param> 
			<returns>true if the node is successfully saved; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.Node.swap(Unigine.Ptr{Unigine.Node}) const">
			<summary>
			Swaps two nodes.
			</summary> 
			<param name="n"> Node to swap. </param> 
		</member>
		<member name="M:Unigine.Node.toLocal(Unigine.Math.Vec3) const">
			<summary>
			Converts a given vector in the world space to the node's local space.
			</summary> 
			<param name="p"> Vector in the world space. </param> 
			<returns>Vector in the local space.</returns>
		</member>
		<member name="M:Unigine.Node.toWorld(Unigine.Math.vec3) const">
			<summary>
			Converts a given vector in the local space to the world space.
			</summary> 
			<param name="p"> Vector in the local space. </param> 
			<returns>Vector in the world space.</returns>
		</member>
		<member name="M:Unigine.Node.translate(Unigine.Math.Vec3)">
			<summary>
			Translates the node relative to its local coordinate system: the parent node transformation isn't taken into account.
			</summary> 
			<param name="t"> Translation vector. </param> 
		</member>
		<member name="M:Unigine.Node.translate(Unigine.Math.Scalar,Unigine.Math.Scalar,Unigine.Math.Scalar)">
			<summary>
			Translates the node relative to its local coordinate system: the parent node transformation isn't taken into account.
			</summary> 
			<param name="x"> Node translation along the X axis, in units. </param>
			<param name="y"> Node translation along the Y axis, in units. </param>
			<param name="z"> Node translation along the Z axis, in units. </param> 
		</member>
		<member name="M:Unigine.Node.worldTranslate(Unigine.Math.Vec3)">
			<summary>
			Translates the node in the world space using the specified vector.
			</summary> 
			<param name="t"> Translation vector. </param> 
		</member>
		<member name="M:Unigine.Node.worldTranslate(Unigine.Math.Scalar,Unigine.Math.Scalar,Unigine.Math.Scalar)">
			<summary>
			Translates the node in the world space using the values specified for the corresponding axes.
			</summary> 
			<param name="x"> Node translation along the X axis, in units. </param>
			<param name="y"> Node translation along the Y axis, in units. </param>
			<param name="z"> Node translation along the Z axis, in units. </param> 
		</member>
		<member name="M:Unigine.Node.worldLookAt(Unigine.Math.Vec3,Unigine.Math.vec3)">
			<summary>
			Reorients the node to "look" at the target point and sets the given up vector:											If the node is a Player-related one, it will "look" at the target point along the negative Z axis. The Y axis will be oriented along the specified up vector.						Other nodes will "look" at the target point along the Y axis. The Z axis will be oriented along the specified up vector.
			</summary> 
			<param name="target"> Coordinates of the target point in the world space. </param>
			<param name="up"> Up vector of the node in the world space. By default, the up vector is oriented along the Z axis. </param> 
		</member>
		<member name="M:Unigine.Node.worldLookAt(Unigine.Math.Vec3)">
			<summary>
			Reorients the node to "look" at the target point. The up vector is oriented along the Z axis.											If the node is a Player-related one, it will "look" at the target point along the negative Z axis. The Y axis will be oriented along the world Z axis.						Other nodes will "look" at the target point along the Y axis.
			</summary> 
			<param name="target"> Coordinates of the target point in the world space. </param> 
		</member>
		<member name="M:Unigine.Node.rotate(Unigine.Math.quat)">
			<summary>
			Rotates the node relative to its local coordinate system: the parent node transformation isn't taken into account. Rotation is determined by the specified quaternion.
			</summary> 
			<param name="r"> Rotation quaternion. </param> 
		</member>
		<member name="M:Unigine.Node.rotate(Unigine.Math.vec3)">
			<summary>
			Rotates the node in the local space. Rotation is determined by Euler angles passed as a vec3 vector.
			</summary>  
		</member>
		<member name="M:Unigine.Node.rotate(float,float,float)">
			<summary>
			Rotates the node in the world space according to specified Euler angles.
			</summary> 
			<param name="angle_x"> Pitch angle, in degrees. </param>
			<param name="angle_y"> Roll angle, in degrees. </param>
			<param name="angle_z"> Yaw angle, in degrees. </param> 
		</member>
		<member name="M:Unigine.Node.worldRotate(Unigine.Math.quat)">
			<summary>
			Rotates the node in the world space. Rotation is determined by the specified quaternion.
			</summary> 
			<param name="r"> Rotation quaternion. </param> 
		</member>
		<member name="M:Unigine.Node.worldRotate(Unigine.Math.vec3)">
			<summary>
			Rotates the node in the world space. Rotation is determined by Euler angles passed as a vec3 vector.
			</summary> 
			<param name="angles"> Vector containing Euler angles (Pitch, Yaw, Roll). </param> 
		</member>
		<member name="M:Unigine.Node.worldRotate(float,float,float)">
			<summary>
			Rotates the node in the world space according to specified Euler angles.
			</summary> 
			<param name="angle_x"> Pitch angle, in degrees. </param>
			<param name="angle_y"> Roll angle, in degrees. </param>
			<param name="angle_z"> Yaw angle, in degrees. </param> 
		</member>
		<member name="M:Unigine.Node.setDirection(Unigine.Math.vec3,Unigine.Math.vec3,MathLib::AXIS)">
			<summary>
			Updates the direction vector of the node and reorients this node: the specified axis of the node becomes oriented along the specified vector in local coordinates. For example, after running the code below, you will get the X axis of the node pointed along the Y axis in local coordinates.
			</summary> 
			<param name="dir"> New direction vector in local coordinates. The direction vector always has unit length. </param>
			<param name="up"> New up vector in local coordinates. If you skip this argument, the Z axis (in local coordinates) will be used. Note that the specified up vector is a hint vector only: the node's up vector points in the direction hinted by the specified up vector. The node's up vector matches the specified up vector (up) only if it is perpendicular to the specified direction vector (dir).  </param>
			<param name="axis"> Axis along which the direction vector should be pointed. The default is the negative Z axis. </param> 
		</member>
		<member name="M:Unigine.Node.getDirection(MathLib::AXIS) const">
			<summary>
			Returns the normalized direction vector pointing along the given node axis in local coordinates (i.e. relative to the node's parent). By default, the direction vector pointing along the negative Z axis of the node (in local coordinates) is returned. The direction vector always has a unit length.
			</summary> 
			<param name="axis"> Axis along which the direction vector points. The default is the negative Z axis. </param> 
			<returns>Direction vector in local coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.setWorldDirection(Unigine.Math.vec3,Unigine.Math.vec3,MathLib::AXIS)">
			<summary>
			Updates the direction vector of the node and reorients this node: the specified axis of the node becomes oriented along the specified vector in world coordinates. For example, after running the code below, you will get the X axis of the node pointed along the Y axis in world coordinates:
			</summary> 
			<param name="dir"> New direction vector in world coordinates. The direction vector always has unit length. </param>
			<param name="up"> New up vector in world coordinates. If you skip this argument, the Z axis (in local coordinates) will be used. Note that the specified up vector is a hint vector only: the node's up vector points in the direction hinted by the specified up vector. The node's up vector matches the specified up vector (up) only if it is perpendicular to the specified direction vector (dir).  </param>
			<param name="axis"> Axis along which the direction vector should be pointed. The default is the negative Z axis. </param> 
		</member>
		<member name="M:Unigine.Node.getWorldDirection(MathLib::AXIS) const">
			<summary>
			Returns the normalized direction vector pointing along the given node axis in world coordinates. By default, the direction vector pointing along the negative Z axis of the node is returned. The direction vector always has a unit length.
			</summary> 
			<param name="axis"> Axis along which the direction vector points. The default is the negative Z axis. </param> 
			<returns>Direction vector in world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getCloneNode(Unigine.Ptr{Unigine.Node})">
			<summary>
			Returns a node cloned from the specified original node.					This method is intended for use only inside the node clone callback.
			</summary> 
			<param name="original_node"> Original node that was cloned. </param> 
			<returns>Clone of the specified original node if it exists; otherwise the original node itself.</returns>
		</member>
		<member name="M:Unigine.Node.getCloneProperty(Unigine.Ptr{Unigine.Property})">
			<summary>
			Returns a node property cloned from the specified original property.					This method is intended for use only inside the node clone callback.
			</summary> 
			<param name="original_property"> Original node property that was cloned. </param> 
			<returns>Clone of the specified original node property if it exists; otherwise the original node property itself.</returns>
		</member>
		<member name="M:Unigine.Node.setSaveToWorldEnabledRecursive(bool)">
			<summary>
			Sets a value indicating if saving to *.world file is enabled for the node and all its children (if any).
			</summary> 
			<param name="enable"> true to enable saving to *.world file for the node and all its children (if any); 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Node.setShowInEditorEnabledRecursive(bool)">
			<summary>
			Sets a value indicating if displaying in the World Hierarchy window of the UnigineEditor is enabled for the node and all its children (if any).
			</summary> 
			<param name="enable"> true to enable displaying in the World Hierarchy window of the UnigineEditor for the node and all its children (if any); 0 to disable. </param> 
		</member>
		<member name="M:Unigine.Node.getLifetimeSelf const">
			<summary>
			Returns the lifetime management type set for the node itself.					Lifetime of each node in the hierarchy is defined by it's root (either parent or posessor). Setting lifetime management type for a child node different from the one set for the root has no effect.
			</summary>  
			<returns>Lifetime management type for the node (see the LIFETIME enum).</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchyBoundBox(bool) const">
			<summary>
			Returns a bounding box with local coordinates that takes children into account, but doesn't participate in physics calculations. Exclusion of objects from the spatial tree significantly reduces the size of the tree and improves performance due to saving time on bounding box recalculation when transforming nodes.
			</summary> 
			<param name="only_enabled_nodes"> Set true to obtain the result taking into account only the nodes in the hierarchy that are enabled, or false - to take into account all nodes in the hierarchy regardless of theirenabled state. </param> 
			<returns>The bounding box with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchyBoundSphere(bool) const">
			<summary>
			Returns a bounding sphere with local coordinates that takes children into account, but doesn't participate in physics calculations. Exclusion of objects from the spatial tree significantly reduces the size of the tree and improves performance due to saving time on bounding sphere recalculation when transforming nodes.
			</summary> 
			<param name="only_enabled_nodes"> Set true to obtain the result taking into account only the nodes in the hierarchy that are enabled, or false - to take into account all nodes in the hierarchy regardless of theirenabled state. </param> 
			<returns>The bounding sphere with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchyWorldBoundBox(bool) const">
			<summary>
			Returns a bounding box with world coordinates that takes children into account, but doesn't participate in physics calculations. Exclusion of objects from the spatial tree significantly reduces the size of the tree and improves performance due to saving time on bounding box recalculation when transforming nodes.
			</summary> 
			<param name="only_enabled_nodes"> Set true to obtain the result taking into account only the nodes in the hierarchy that are enabled, or false - to take into account all nodes in the hierarchy regardless of theirenabled state. </param> 
			<returns>The bounding box with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchyWorldBoundSphere(bool) const">
			<summary>
			Returns a bounding sphere with world coordinates that takes children into account, but doesn't participate in physics calculations. Exclusion of objects from the spatial tree significantly reduces the size of the tree and improves performance due to saving time on bounding sphere recalculation when transforming nodes.
			</summary> 
			<param name="only_enabled_nodes"> Set true to obtain the result taking into account only the nodes in the hierarchy that are enabled, or false - to take into account all nodes in the hierarchy regardless of theirenabled state. </param> 
			<returns>The bounding sphere with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchySpatialBoundBox(bool) const">
			<summary>
			Returns a bounding box with world coordinates that takes all children and physics into account. This bounding box is used by the spatial tree.
			</summary> 
			<param name="only_enabled_nodes"> Set true to obtain the result taking into account only the nodes in the hierarchy that are enabled, or false - to take into account all nodes in the hierarchy regardless of theirenabled state. </param> 
			<returns>The bounding box with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.getHierarchySpatialBoundSphere(bool) const">
			<summary>
			Returns a bounding sphere with world coordinates that takes all children and physics into account. This bounding sphere is used by the spatial tree.
			</summary> 
			<param name="only_enabled_nodes"> Set true to obtain the result taking into account only the nodes in the hierarchy that are enabled, or false - to take into account all nodes in the hierarchy regardless of theirenabled state. </param> 
			<returns>The bounding sphere with world coordinates.</returns>
		</member>
		<member name="M:Unigine.Node.updateSpatialTree">
			<summary>
			Updates node bounds in the spatial tree in the current frame. This method can be used in case you use some custom logic affecting node bounds or position and need to have your changes to be taken into account in the current frame, as well as to process such changes for your custom nodes (					ObjectExtern, NodeExtern) which are otherwise ignored. Calling this method enables you to apply changes for this node fast without complete tree recalculation. But you should be aware that node bounds fast-updated this way					might be inaccurate (they can only be expanded, as shrinking will require tree recalculation). In case you need to have 100% accurate bounds in the current frame, call the					 method. You can also simply tell the spatial tree to update node bounds in the next frame via the					 method.
			</summary>  
		</member>
		<member name="M:Unigine.Node.updateSpatialTreeDelayed">
			<summary>
			Mark node bounds in the spatial tree to be updated in the next frame (all bounds will be 100% accurate in this case unlike for the					 method). This method can be used in case you use some custom logic affecting node bounds or position, as well as to process such changes for your custom nodes (					ObjectExtern, NodeExtern) which are otherwise ignored. The changes will only be applied in the next frame, in case you need to have your changes to be taken into account right in the current frame use the					 method for 100% accurate bounds (slow), or the fast					 method which only expands node bounds if necessary.
			</summary>  
		</member>
		<member name="M:Unigine.Node.getWorldTrigger(int)">
			<summary>
			Returns one of the World Triggers inside which the node is located at the moment by its number. For any node in the world, you can check whether it is currently inside any World Trigger and access any of such triggers by simply calling this method.
			</summary> 
			<param name="num"> Number of the World Trigger in the list of World Triggers inside which the node is located at the moment. </param> 
			<returns>World Trigger with the specified number inside which the node is located at the moment.</returns>
		</member>
		<member name="M:Unigine.Node.getLostNodePropertyGUID(int) const">
			<summary>
			Returns the GUID of a lost property assigned to the node. If for some reason a property assigned to the specified slot of the node is missing, this method can be used to get it's GUID.
			</summary> 
			<param name="num"> Target property slot number. </param> 
			<returns>Lost property GUID.</returns>
		</member>
		<member name="M:Unigine.Node.renderBounds(bool,bool)">
			<summary>
			Renders the node bounds. The method is applied for checking the actual size of the CPU-rendered node bounds that may differ from the GPU-rendered mesh size, if the latter has been modified by the shader. For nodes that consist of multiple mesh instances (Clutter, Cluster) rendering of each individual mesh bound is also available.
			</summary> 
			<param name="render_node_bound"> true to enable rendering of the node bounds, false to disable it. </param>
			<param name="render_instance_bound"> true to enable bound rendering for each individual mesh instance (applicable for Clutter and Cluster nodes), false to disable it. </param> 
		</member>
		<member name="M:Unigine.Node.getIDFromFile const">
			<summary>
			Returns the node ID from the *.node or a *.world file if the node has been loaded from this file.
			</summary>  
			<returns>Node ID from the *.node or a *.world file. For the node created via code, -1 is returned.</returns>
		</member>
		<member name="M:Unigine.Node.applyReplacePaths">
			<summary>
			Restores the engine's ability to replace baked textures (lightmap, shadow map) inside Node References in runtime. This method is to be applied if hierarchy inside a Node Reference or a path to the baked texture has been modified thus causing rendering of an unsuitable lightmap or a shadow map.
			</summary>  
		</member>
		<member name="F:Unigine.Node.ANY_TYPE">
			<summary>
			Any node type.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_BEGIN">
			<summary>
			Begin of the nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_DUMMY">
			<summary>
			Dummy node. See the NodeDummy class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_LAYER">
			<summary>
			Layer node. See the NodeLayer class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_TRIGGER">
			<summary>
			Dummy node that can fire callbacks on its enabling/disabling or repositioning. See the NodeTrigger class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_REFERENCE">
			<summary>
			Node reference that refers to an external NODE file. See the NodeReference class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_EXTERN">
			<summary>
			Extern node. See the NodeExtern class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_ANIMATION_PLAYBACK">
			<summary>
			Animation playback node. See the NodeAnimationPlayback class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NODE_END">
			<summary>
			End of the nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_BEGIN">
			<summary>
			Begin of the world nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_SPLINE_GRAPH">
			<summary>
			World spline graph. See the WorldSplineGraph class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_TRIGGER">
			<summary>
			World trigger. See the WorldTrigger class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_CLUTTER">
			<summary>
			World clutter. See the WorldClutter class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_SWITCHER">
			<summary>
			Node switcher (to switch off parts of the world). See the WorldSwitcher class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_OCCLUDER">
			<summary>
			World occluder. See the WorldOccluder class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_OCCLUDER_MESH">
			<summary>
			World mesh occluder. See the WorldOccluderMesh class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_TRANSFORM_PATH">
			<summary>
			Path defined transformer. See the WorldTransformPath
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_TRANSFORM_BONE">
			<summary>
			Bone defined transformer. See the WorldTransformBone class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_EXPRESSION">
			<summary>
			Node which allows to execute arbitrary expression. See the WorldExpression class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_EXTERN">
			<summary>
			External world. See the WorldExtern class.
		</summary>
		</member>
		<member name="F:Unigine.Node.WORLD_END">
			<summary>
			End of the world nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.GEODETIC_BEGIN">
			<summary>
			Begin of the geodetic nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.GEODETIC_PIVOT">
			<summary>
			Geodetic Pivot node. See the GeodeticPivot class.
		</summary>
		</member>
		<member name="F:Unigine.Node.GEODETIC_END">
			<summary>
			End of the geodetic nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_BEGIN">
			<summary>
			Begin of the field nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_SPACER">
			<summary>
			Field Spacer node. See the FieldSpacer class.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_ANIMATION">
			<summary>
			Field Animation node. See the FieldAnimation class.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_HEIGHT">
			<summary>
			Field Height node. See the FieldHeight class.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_SHORELINE">
			<summary>
			Field Shoreline node. See the FieldShoreline class.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_WEATHER">
			<summary>
			Field Weather node. See the FieldWeather class.
		</summary>
		</member>
		<member name="F:Unigine.Node.FIELD_END">
			<summary>
			End of the field nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.PARTICLES_FIELD_BEGIN">
			<summary>
			Beginning of the particles field range.
		</summary>
		</member>
		<member name="F:Unigine.Node.PARTICLES_FIELD_SPACER">
			<summary>
			Particles Field Spacer node. See the ParticlesFieldSpacer class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PARTICLES_FIELD_DEFLECTOR">
			<summary>
			Particles Field Deflector node. See the ParticlesFieldDeflector class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PARTICLES_FIELD_END">
			<summary>
			End of the particles field nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_BEGIN">
			<summary>
			Begin of the light nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_VOXEL_PROBE">
			<summary>
			Voxel probe. See the LightVoxelProbe class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_ENVIRONMENT_PROBE">
			<summary>
			Environment probe. See the LightEnvironmentProbe class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_PLANAR_PROBE">
			<summary>
			Planar probe. See the LightPlanarProbe class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_OMNI">
			<summary>
			Omni-directional light source. See the LightOmni class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_PROJ">
			<summary>
			Projected light source. See the LightProj class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_WORLD">
			<summary>
			World light source. See the LightWorld class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIGHT_END">
			<summary>
			End of the light nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.DECAL_BEGIN">
			<summary>
			Begin of the decal nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.DECAL_PROJ">
			<summary>
			Projected decal node. See the DecalProj class.
		</summary>
		</member>
		<member name="F:Unigine.Node.DECAL_ORTHO">
			<summary>
			Orthographic decal node. See the DecalOrtho class.
		</summary>
		</member>
		<member name="F:Unigine.Node.DECAL_MESH">
			<summary>
			Mesh decal node. See the DecalMesh class.
		</summary>
		</member>
		<member name="F:Unigine.Node.DECAL_END">
			<summary>
			End of the decal nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.LANDSCAPE_LAYER_BEGIN">
			<summary>
			Beginning of the landscape layers range.
		</summary>
		</member>
		<member name="F:Unigine.Node.LANDSCAPE_LAYER_MAP">
			<summary>
			Landscape Layer Map. See the LandscapeLayerMap class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LANDSCAPE_LAYER_END">
			<summary>
			End of the landscape layers range.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_BEGIN">
			<summary>
			Begin of the object nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_DUMMY">
			<summary>
			Dummy object. See the ObjectDummy class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_DYNAMIC">
			<summary>
			Dynamic object. See the ObjectDynamic class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_STATIC">
			<summary>
			Static mesh object. See the ObjectMeshStatic class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_CLUSTER">
			<summary>
			Mesh Cluster object. See the ObjectMeshCluster class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_CLUTTER">
			<summary>
			Mesh Clutter object. See the ObjectMeshClutter class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_SKINNED">
			<summary>
			Skinned mesh object. See the ObjectMeshSkinned class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_DYNAMIC">
			<summary>
			Dynamic mesh object. See the ObjectMeshDynamic class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_MESH_SPLINE_CLUSTER">
			<summary>
			Mesh Spline Cluster object. See the ObjectMeshSplineCluster class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_LANDSCAPE_TERRAIN">
			<summary>
			LandscapeTerrain object. See the ObjectLandscapeTerrain class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_TERRAIN_GLOBAL">
			<summary>
			Terrain global object. See the ObjectTerrainGlobal class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_GRASS">
			<summary>
			Grass. See the ObjectGrass class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_PARTICLES">
			<summary>
			Particles object. See the ObjectParticles class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_BILLBOARDS">
			<summary>
			Billboards object for rendering a high number of billboards. See the ObjectBillboard class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_VOLUME_BOX">
			<summary>
			Volume box object. See the ObjectVolumeBox class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_VOLUME_SPHERE">
			<summary>
			Volume sphere object. See the ObjectVolumeSphere class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_VOLUME_OMNI">
			<summary>
			Volume omni light object. See the ObjectVolumeOmni class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_VOLUME_PROJ">
			<summary>
			Volume projected light object. See the ObjectVolumeProj class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_GUI">
			<summary>
			GUI object. See the ObjectGui class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_GUI_MESH">
			<summary>
			GUI mesh object. See the ObjectGuiMesh class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_WATER_GLOBAL">
			<summary>
			Water global object. See the ObjectWaterGlobal class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_WATER_MESH">
			<summary>
			Water mesh object. See the ObjectWaterMesh class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_SKY">
			<summary>
			Sky object. See the ObjectSky class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_CLOUD_LAYER">
			<summary>
			Cloud layer object. See the ObjectCloudLayer class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_EXTERN">
			<summary>
			Extern object. See the ObjectExtern class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_END">
			<summary>
			End of the object nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBJECT_TEXT">
			<summary>
			Text object. See the ObjectText class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_BEGIN">
			<summary>
			Begin of the player nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_DUMMY">
			<summary>
			Dummy player. See the PlayerDummy class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_SPECTATOR">
			<summary>
			Observing player. See the PlayerSpectator class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_PERSECUTOR">
			<summary>
			Persecuting player. See the PlayerPersecutor class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_ACTOR">
			<summary>
			Acting player. See the PlayerActor class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PLAYER_END">
			<summary>
			End of the player nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_BEGIN">
			<summary>
			Begin of the physical nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_WIND">
			<summary>
			Physical wind object. See the PhysicalWind class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_FORCE">
			<summary>
			Physical force node that allows to simulate point forces applied to dynamic objects. See the PhysicalForce class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_NOISE">
			<summary>
			Physical noise node that allows to simulate force field. See the PhysicalNoise class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_WATER">
			<summary>
			Physical water object that has no visual representation. See the PhysicalWater class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_TRIGGER">
			<summary>
			Physical trigger. See the PhysicalTrigger class.
		</summary>
		</member>
		<member name="F:Unigine.Node.PHYSICAL_END">
			<summary>
			End of the physical nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.NAVIGATION_BEGIN">
			<summary>
			Begin of the navigation nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.NAVIGATION_SECTOR">
			<summary>
			Sector within which pathfinding is performed. See the NavigationSector class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NAVIGATION_MESH">
			<summary>
			Mesh-based navigation area across which pathfinding is performed. See the NavigationMesh class.
		</summary>
		</member>
		<member name="F:Unigine.Node.NAVIGATION_END">
			<summary>
			End of the navigation nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBSTACLE_BEGIN">
			<summary>
			Begin of the obstacle nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBSTACLE_BOX">
			<summary>
			Obstacle in the shape of a box avoided by pathfinding. See the ObstacleBox class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBSTACLE_SPHERE">
			<summary>
			Obstacle in the shape of a sphere avoided by pathfinding. See the ObstacleSphere class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBSTACLE_CAPSULE">
			<summary>
			Obstacle in the shape of a capsule avoided by pathfinding. See the ObstacleCapsule class.
		</summary>
		</member>
		<member name="F:Unigine.Node.OBSTACLE_END">
			<summary>
			End of the obstacle nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.SOUND_BEGIN">
			<summary>
			Begin of the sound nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.SOUND_SOURCE">
			<summary>
			Sound source. See the SoundSource class.
		</summary>
		</member>
		<member name="F:Unigine.Node.SOUND_REVERB">
			<summary>
			Sound reverberation zone. See the SoundReverb class.
		</summary>
		</member>
		<member name="F:Unigine.Node.SOUND_END">
			<summary>
			End of the sound nodes range.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_NODES">
			<summary>
			Counter of node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_DECALS">
			<summary>
			Counter of decal node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_FIELDS">
			<summary>
			Counter of field node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_PARTICLES_FIELDS">
			<summary>
			Counter of particles field node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_GEODETICS">
			<summary>
			Counter of geodetic node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_LIGHTS">
			<summary>
			Counter of light node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_NAVIGATIONS">
			<summary>
			Counter of navigation node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_OBJECTS">
			<summary>
			Counter of object node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_OBSTACLES">
			<summary>
			Counter of obstacle node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_PHYSICALS">
			<summary>
			Counter of physical node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_PLAYERS">
			<summary>
			Counter of player node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_SOUNDS">
			<summary>
			Counter of sound node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.NUM_WORLDS">
			<summary>
			Counter of world node types.
		</summary>
		</member>
		<member name="F:Unigine.Node.DUMMY">
			<summary>
			Dummy node. See the NodeDummy class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LAYER">
			<summary>
			Layer node. See the NodeLayer class.
		</summary>
		</member>
		<member name="F:Unigine.Node.TRIGGER">
			<summary>
			Dummy node that can fire callbacks on its enabling/disabling or repositioning. See the NodeTrigger class.
		</summary>
		</member>
		<member name="F:Unigine.Node.REFERENCE">
			<summary>
			Node reference that refers to an external NODE file. See the NodeReference class.
		</summary>
		</member>
		<member name="F:Unigine.Node.EXTERN">
			<summary>
			Extern node. See the NodeExtern class.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIFETIME_WORLD">
			<summary>
			Node's lifetime is managed by the world. The node shall be deleted automatically on closing the world.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIFETIME_ENGINE">
			<summary>
			Node's lifetime is managed by the Engine. The node shall be deleted automatically on Engine shutdown.
		</summary>
		</member>
		<member name="F:Unigine.Node.LIFETIME_MANUAL">
			<summary>
			Node's lifetime is managed by the user. The node should be deleted manually by the user.
		</summary>
		</member>
	</members>
</doc>