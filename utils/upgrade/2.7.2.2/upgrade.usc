#!/usr/bin/env usc

/* Copyright (C) 2005-2024, UNIGINE. All rights reserved.
*
* This file is a part of the UNIGINE 2 SDK.
*
* Your use and / or redistribution of this software in source and / or
* binary form, with or without modification, is subject to: (i) your
* ongoing acceptance of and compliance with the terms and conditions of
* the UNIGINE License Agreement; and (ii) your inclusion of this notice
* in any version of this software that you use or redistribute.
* A copy of the UNIGINE License Agreement is available by contacting
* UNIGINE. at http://unigine.com/
*/

int skipFile(string file) {
	return startsWith(file, "core/") || startsWith(file, "editor/") || startsWith(file, "editor2/");
}
int skipFile(string path, string file) {
	file = relname(path, file);
	return skipFile(file);
}

string ENGINE_VERSION = "2.7.2.2";

#include <utils.h>
#include <log.h>
#include <file_system.h>
#include <asset.h>
#include <material.h>
#include <property.h>
#include <process.h>

#include <worlds_nodes.h>
#include <materials.h>
#include <properties.h>
#include <track.h>
#include <config.h>

void main() {
	
	string log_file = "";
	string data_paths[0];
	
	for(int i = 1; i < getNumArgs(); i++) {
		if(getArg(i) == "--log") {
			i++;
			if(i < getNumArgs())
				log_file = getArg(i);
		} else {
			data_paths.append(getAbsPath(getDirPath(getArg(i))));
		}
	}
	
	if(data_paths.size() == 0)
		data_paths.append(currdir() + "/");
	
	// check version
	foreach(string data_path; data_paths) {
		string files[0] = ();
		if(!findFilesByExt(files, data_path, ".mat|.prop|.node|.cfg|.world|.track|.render|.sound|.physics"))
			continue;
		
		foreach(string file; files) {
			if(skipFile(data_path, file))
				continue;
			
			Xml xml = new Xml();
			if(!xml.load(file)) {
				delete xml;
				continue;
			}
			
			if(versionLessOrEqual(ENGINE_VERSION, xml.getArg("version", "1.00"))) {
				delete xml;
				log.message("Skip migration to version \"%s\" File:\"%s\"\n", ENGINE_VERSION, file);
				return;
			}
		}
	}
	
	Log::init(log_file);
	Log::setLevel(Log::INFO);
	
	Log::info("Start migration to version \"%s\"", ENGINE_VERSION);
	
	foreach(string data_path; data_paths) {
		
		// FileSystem load files
		log.message("FileSystem generate guid files\n");
		FileSystem::load(data_path);
		
		log.message("Load assets guid\n");
		{
			string files[0] = ();
			findFiles(files, data_path);
			foreach(string file; files) {
				
				if(skipFile(data_path, file))
					continue;
				if(startsWith(relname(data_path, file), ".runtimes"))
					continue;
				
				string asset_file = file + ".meta";
				if(is_file(asset_file)) {
					Asset asset = Asset::load(asset_file);
					foreach(AssetRuntime runtime; asset.runtimes)
						if(runtime.getLink() == LINK_SOURCE) {
							UGUID guid = new UGUID();
							guid.setString(runtime.getGUID());
							string path = runtime.getFile();
							
							if(pathExtensionCompare(file, ".mat"))
								path += ".mat";
							FileSystem::setGUID(path, guid);
						}
					asset.save();
				}
			}
		}
		
		log.message("FileSystem sort paths\n");
		FileSystem::sortPathes();
		
		{
			log.message("Materials migration\n");
			Materials::processPath(data_path);
			
			log.message("Properties migration\n");
			string paths[0];
			paths.clear();
			paths.append(data_path);
			Properties::processPaths(data_paths);
			
			log.message("Configs migration\n");
			Config::processPath(data_path);
			
			log.message("Tracks migration\n");
			Track::processPath(data_path);
			
			log.message("Nodes migration\n");
			WorldsNodes::processPath(data_path, ".node");
			
			log.message("Worlds migration\n");
			WorldsNodes::processPath(data_path, ".world");
			
			log.message("Render settings migration\n");
			WorldsNodes::processPath(data_path, ".render");
			
			log.message("Sound settings migration\n");
			WorldsNodes::processPath(data_path, ".sound");
			
			log.message("Physics settings migration\n");
			WorldsNodes::processPath(data_path, ".physics");
		}
	}
	
	Log::shutdown();
}
