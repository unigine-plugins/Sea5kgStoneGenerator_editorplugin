#!/usr/bin/env usc

/* Copyright (C) 2005-2024, UNIGINE. All rights reserved.
*
* This file is a part of the UNIGINE 2 SDK.
*
* Your use and / or redistribution of this software in source and / or
* binary form, with or without modification, is subject to: (i) your
* ongoing acceptance of and compliance with the terms and conditions of
* the UNIGINE License Agreement; and (ii) your inclusion of this notice
* in any version of this software that you use or redistribute.
* A copy of the UNIGINE License Agreement is available by contacting
* UNIGINE. at http://unigine.com/
*/

int skipFile(string file) {
	return startsWith(file,"core/") || startsWith(file,"editor/") || startsWith(file,"editor2/");
}
int skipFile(string path,string file) {
	file = relname(path,file);
	return skipFile(file);
}

string ENGINE_VERSION = "2.7.0.2";

#include <utils.h>
#include <log.h>
#include <material.h>
#include <process.h>

#include <worlds_nodes.h>
#include <materials.h>
#include <track.h>
#include <config.h>

void main() {
	
	string log_file = "";
	string data_paths[0];
	
	for(int i = 1; i < getNumArgs(); i++) {
		if(getArg(i) == "--log") {
			i++;
			if(i < getNumArgs())
				log_file = getArg(i);
		} else
			data_paths.append(getAbsPath(getDirPath(getArg(i))));
	}
	
	if(data_paths.size() == 0)
		data_paths.append(currdir() + "/");
	
	// check version
	foreach(string data_path; data_paths) {
		string files[0] = ();
		if(!findFilesByExt(files,data_path,".mat|.prop|.node|.cfg|.world|.track|.render_settings|.settings"))
			continue;
		
		foreach(string file; files) {
			if(skipFile(data_path,file))
				continue;
			
			Xml xml = new Xml();
			if(!xml.load(file)) {
				delete xml;
				continue;
			}
			
			if(versionLessOrEqual(ENGINE_VERSION, xml.getArg("version", "1.00"))) {
				delete xml;
				log.message("Skip migration to version \"%s\" File:\"%s\"\n", ENGINE_VERSION, file);
				return;
			}
		}
	}
	
	Log::init(log_file);
	Log::setLevel(Log::INFO);
	
	Log::info("Start migration to version \"%s\"", ENGINE_VERSION);
	
	// materials upgrade
	Materials::processPaths(data_paths);
	
	foreach(string data_path; data_paths) {
		
		string files[0] = ();
		findFiles(files,data_path);
		
		foreach(string file; files) {
			
			if(skipFile(data_path,file)) continue;
			
			string ext = lower(getExtension(file));
			
			if(ext == ".track")
				Track::processFile(file);
			
			if(ext == ".cfg")
				Config::processFile(file);
			
			if(ext == ".node" || ext == ".world" || ext == ".render_settings" || ext == ".settings")
				WorldsNodes::processFile(file);
		}
	}
	
	Log::shutdown();
}
